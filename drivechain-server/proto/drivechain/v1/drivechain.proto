syntax = "proto3";

package drivechain.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service DrivechainService {
  rpc GetBalance(google.protobuf.Empty) returns (GetBalanceResponse);

  // Problem: deriving nilly willy here is potentially problematic. There's no way of listing
  // out unused addresses, so we risk crossing the sync gap.
  rpc GetNewAddress(google.protobuf.Empty) returns (GetNewAddressResponse);

  rpc ListTransactions(google.protobuf.Empty) returns (ListTransactionsResponse);
  // The "latest transactions" list in the first tab of Drivechain-QT is actually
  // a list of unconfirmed transactions!
  rpc ListUnconfirmedTransactions(google.protobuf.Empty) returns (ListUnconfirmedTransactionsResponse);
}

message GetNewAddressResponse {
  string address = 1;
  uint32 index = 2;
}

message GetBalanceResponse {
  uint64 confirmed_satoshi = 1;

  uint64 pending_satoshi = 2;
}

message ListTransactionsResponse {
  repeated Transaction transactions = 1;
}

message Confirmation {
  uint32 height = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message Transaction {
  string txid = 1;

  uint64 fee_satoshi = 2;
  uint64 received_satoshi = 3;
  uint64 sent_satoshi = 4;

  Confirmation confirmation_time = 5;
}

message ListUnconfirmedTransactionsResponse {
  repeated UnconfirmedTransaction unconfirmed_transactions = 1;
}

message UnconfirmedTransaction {
  uint32 virtual_size = 1;
  uint32 weight = 2;
  google.protobuf.Timestamp time = 3;
  string txid = 4;
  uint64 fee_satoshi = 5;

  // is_bmm_request and is_critical_data_request both
  // pertain to BMM (BIP301). Hearing chatter that the
  // new CUSF approach might actually do away with BMM
  // entirely? Holding off on that for a little while.

  // BMM = blind merged mining
  // bool is_bmm_request = 6;

  // bool is_critical_data_request = 7;
}
