syntax = "proto3";

package wallet.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service WalletService {
  rpc SendTransaction(SendTransactionRequest) returns (SendTransactionResponse);

  rpc GetBalance(google.protobuf.Empty) returns (GetBalanceResponse);

  // Problem: deriving nilly willy here is potentially problematic. There's no way of listing
  // out unused addresses, so we risk crossing the sync gap.
  rpc GetNewAddress(google.protobuf.Empty) returns (GetNewAddressResponse);

  rpc ListTransactions(google.protobuf.Empty) returns (ListTransactionsResponse);

  rpc ListSidechainDeposits(ListSidechainDepositsRequest) returns (ListSidechainDepositsResponse);
}

message GetNewAddressResponse {
  string address = 1;
  uint32 index = 2;
}

message SendTransactionRequest {
  // Address -> satoshi amount
  map<string, uint64> destinations = 1;

  // Fee rate, measured in BTC/kvB. If set to zero, a reasonable
  // rate is used by asking Core for an estimate.
  double fee_rate = 2;

  // Whether to activate replace by fee for this transaction
  bool rbf = 3;
}

message SendTransactionResponse {
  string txid = 1;
}

message GetBalanceResponse {
  uint64 confirmed_satoshi = 1;

  uint64 pending_satoshi = 2;
}

message ListTransactionsResponse {
  repeated Transaction transactions = 1;
}

message Confirmation {
  uint32 height = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message Transaction {
  string txid = 1;

  uint64 fee_satoshi = 2;
  uint64 received_satoshi = 3;
  uint64 sent_satoshi = 4;

  Confirmation confirmation_time = 5;
}

message ListSidechainDepositsRequest {
  int32 slot = 1;
}

message ListSidechainDepositsResponse {
  message SidechainDeposit {
    string txid = 1;
    string address = 2;
    double amount = 3;
    double fee = 4;
    int32 confirmations = 5;
  }

  repeated SidechainDeposit deposits = 1;
}
