// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: drivechain/v1/drivechain.proto

package drivechainv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/drivechain-server/gen/drivechain/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DrivechainServiceName is the fully-qualified name of the DrivechainService service.
	DrivechainServiceName = "drivechain.v1.DrivechainService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DrivechainServiceGetBalanceProcedure is the fully-qualified name of the DrivechainService's
	// GetBalance RPC.
	DrivechainServiceGetBalanceProcedure = "/drivechain.v1.DrivechainService/GetBalance"
	// DrivechainServiceGetNewAddressProcedure is the fully-qualified name of the DrivechainService's
	// GetNewAddress RPC.
	DrivechainServiceGetNewAddressProcedure = "/drivechain.v1.DrivechainService/GetNewAddress"
	// DrivechainServiceListTransactionsProcedure is the fully-qualified name of the DrivechainService's
	// ListTransactions RPC.
	DrivechainServiceListTransactionsProcedure = "/drivechain.v1.DrivechainService/ListTransactions"
	// DrivechainServiceListUnconfirmedTransactionsProcedure is the fully-qualified name of the
	// DrivechainService's ListUnconfirmedTransactions RPC.
	DrivechainServiceListUnconfirmedTransactionsProcedure = "/drivechain.v1.DrivechainService/ListUnconfirmedTransactions"
	// DrivechainServiceListRecentBlocksProcedure is the fully-qualified name of the DrivechainService's
	// ListRecentBlocks RPC.
	DrivechainServiceListRecentBlocksProcedure = "/drivechain.v1.DrivechainService/ListRecentBlocks"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	drivechainServiceServiceDescriptor                           = v1.File_drivechain_v1_drivechain_proto.Services().ByName("DrivechainService")
	drivechainServiceGetBalanceMethodDescriptor                  = drivechainServiceServiceDescriptor.Methods().ByName("GetBalance")
	drivechainServiceGetNewAddressMethodDescriptor               = drivechainServiceServiceDescriptor.Methods().ByName("GetNewAddress")
	drivechainServiceListTransactionsMethodDescriptor            = drivechainServiceServiceDescriptor.Methods().ByName("ListTransactions")
	drivechainServiceListUnconfirmedTransactionsMethodDescriptor = drivechainServiceServiceDescriptor.Methods().ByName("ListUnconfirmedTransactions")
	drivechainServiceListRecentBlocksMethodDescriptor            = drivechainServiceServiceDescriptor.Methods().ByName("ListRecentBlocks")
)

// DrivechainServiceClient is a client for the drivechain.v1.DrivechainService service.
type DrivechainServiceClient interface {
	GetBalance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error)
	// Problem: deriving nilly willy here is potentially problematic. There's no way of listing
	// out unused addresses, so we risk crossing the sync gap.
	GetNewAddress(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error)
	ListTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error)
	// The "latest transactions" list in the first tab of Drivechain-QT is actually
	// a list of unconfirmed transactions!
	ListUnconfirmedTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListUnconfirmedTransactionsResponse], error)
	// Lists the ten most recent blocks, lightly populated with data.
	ListRecentBlocks(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListRecentBlocksResponse], error)
}

// NewDrivechainServiceClient constructs a client for the drivechain.v1.DrivechainService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDrivechainServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DrivechainServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &drivechainServiceClient{
		getBalance: connect.NewClient[emptypb.Empty, v1.GetBalanceResponse](
			httpClient,
			baseURL+DrivechainServiceGetBalanceProcedure,
			connect.WithSchema(drivechainServiceGetBalanceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNewAddress: connect.NewClient[emptypb.Empty, v1.GetNewAddressResponse](
			httpClient,
			baseURL+DrivechainServiceGetNewAddressProcedure,
			connect.WithSchema(drivechainServiceGetNewAddressMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTransactions: connect.NewClient[emptypb.Empty, v1.ListTransactionsResponse](
			httpClient,
			baseURL+DrivechainServiceListTransactionsProcedure,
			connect.WithSchema(drivechainServiceListTransactionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUnconfirmedTransactions: connect.NewClient[emptypb.Empty, v1.ListUnconfirmedTransactionsResponse](
			httpClient,
			baseURL+DrivechainServiceListUnconfirmedTransactionsProcedure,
			connect.WithSchema(drivechainServiceListUnconfirmedTransactionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRecentBlocks: connect.NewClient[emptypb.Empty, v1.ListRecentBlocksResponse](
			httpClient,
			baseURL+DrivechainServiceListRecentBlocksProcedure,
			connect.WithSchema(drivechainServiceListRecentBlocksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// drivechainServiceClient implements DrivechainServiceClient.
type drivechainServiceClient struct {
	getBalance                  *connect.Client[emptypb.Empty, v1.GetBalanceResponse]
	getNewAddress               *connect.Client[emptypb.Empty, v1.GetNewAddressResponse]
	listTransactions            *connect.Client[emptypb.Empty, v1.ListTransactionsResponse]
	listUnconfirmedTransactions *connect.Client[emptypb.Empty, v1.ListUnconfirmedTransactionsResponse]
	listRecentBlocks            *connect.Client[emptypb.Empty, v1.ListRecentBlocksResponse]
}

// GetBalance calls drivechain.v1.DrivechainService.GetBalance.
func (c *drivechainServiceClient) GetBalance(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error) {
	return c.getBalance.CallUnary(ctx, req)
}

// GetNewAddress calls drivechain.v1.DrivechainService.GetNewAddress.
func (c *drivechainServiceClient) GetNewAddress(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error) {
	return c.getNewAddress.CallUnary(ctx, req)
}

// ListTransactions calls drivechain.v1.DrivechainService.ListTransactions.
func (c *drivechainServiceClient) ListTransactions(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// ListUnconfirmedTransactions calls drivechain.v1.DrivechainService.ListUnconfirmedTransactions.
func (c *drivechainServiceClient) ListUnconfirmedTransactions(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListUnconfirmedTransactionsResponse], error) {
	return c.listUnconfirmedTransactions.CallUnary(ctx, req)
}

// ListRecentBlocks calls drivechain.v1.DrivechainService.ListRecentBlocks.
func (c *drivechainServiceClient) ListRecentBlocks(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListRecentBlocksResponse], error) {
	return c.listRecentBlocks.CallUnary(ctx, req)
}

// DrivechainServiceHandler is an implementation of the drivechain.v1.DrivechainService service.
type DrivechainServiceHandler interface {
	GetBalance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error)
	// Problem: deriving nilly willy here is potentially problematic. There's no way of listing
	// out unused addresses, so we risk crossing the sync gap.
	GetNewAddress(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error)
	ListTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error)
	// The "latest transactions" list in the first tab of Drivechain-QT is actually
	// a list of unconfirmed transactions!
	ListUnconfirmedTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListUnconfirmedTransactionsResponse], error)
	// Lists the ten most recent blocks, lightly populated with data.
	ListRecentBlocks(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListRecentBlocksResponse], error)
}

// NewDrivechainServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDrivechainServiceHandler(svc DrivechainServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	drivechainServiceGetBalanceHandler := connect.NewUnaryHandler(
		DrivechainServiceGetBalanceProcedure,
		svc.GetBalance,
		connect.WithSchema(drivechainServiceGetBalanceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	drivechainServiceGetNewAddressHandler := connect.NewUnaryHandler(
		DrivechainServiceGetNewAddressProcedure,
		svc.GetNewAddress,
		connect.WithSchema(drivechainServiceGetNewAddressMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	drivechainServiceListTransactionsHandler := connect.NewUnaryHandler(
		DrivechainServiceListTransactionsProcedure,
		svc.ListTransactions,
		connect.WithSchema(drivechainServiceListTransactionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	drivechainServiceListUnconfirmedTransactionsHandler := connect.NewUnaryHandler(
		DrivechainServiceListUnconfirmedTransactionsProcedure,
		svc.ListUnconfirmedTransactions,
		connect.WithSchema(drivechainServiceListUnconfirmedTransactionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	drivechainServiceListRecentBlocksHandler := connect.NewUnaryHandler(
		DrivechainServiceListRecentBlocksProcedure,
		svc.ListRecentBlocks,
		connect.WithSchema(drivechainServiceListRecentBlocksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/drivechain.v1.DrivechainService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DrivechainServiceGetBalanceProcedure:
			drivechainServiceGetBalanceHandler.ServeHTTP(w, r)
		case DrivechainServiceGetNewAddressProcedure:
			drivechainServiceGetNewAddressHandler.ServeHTTP(w, r)
		case DrivechainServiceListTransactionsProcedure:
			drivechainServiceListTransactionsHandler.ServeHTTP(w, r)
		case DrivechainServiceListUnconfirmedTransactionsProcedure:
			drivechainServiceListUnconfirmedTransactionsHandler.ServeHTTP(w, r)
		case DrivechainServiceListRecentBlocksProcedure:
			drivechainServiceListRecentBlocksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDrivechainServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDrivechainServiceHandler struct{}

func (UnimplementedDrivechainServiceHandler) GetBalance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("drivechain.v1.DrivechainService.GetBalance is not implemented"))
}

func (UnimplementedDrivechainServiceHandler) GetNewAddress(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("drivechain.v1.DrivechainService.GetNewAddress is not implemented"))
}

func (UnimplementedDrivechainServiceHandler) ListTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("drivechain.v1.DrivechainService.ListTransactions is not implemented"))
}

func (UnimplementedDrivechainServiceHandler) ListUnconfirmedTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListUnconfirmedTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("drivechain.v1.DrivechainService.ListUnconfirmedTransactions is not implemented"))
}

func (UnimplementedDrivechainServiceHandler) ListRecentBlocks(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListRecentBlocksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("drivechain.v1.DrivechainService.ListRecentBlocks is not implemented"))
}
