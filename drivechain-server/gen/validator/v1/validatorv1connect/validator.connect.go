// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: validator/v1/validator.proto

package validatorv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/drivechain-server/gen/validator/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ValidatorServiceName is the fully-qualified name of the ValidatorService service.
	ValidatorServiceName = "validator.v1.ValidatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ValidatorServiceConnectBlockProcedure is the fully-qualified name of the ValidatorService's
	// ConnectBlock RPC.
	ValidatorServiceConnectBlockProcedure = "/validator.v1.ValidatorService/ConnectBlock"
	// ValidatorServiceDisconnectBlockProcedure is the fully-qualified name of the ValidatorService's
	// DisconnectBlock RPC.
	ValidatorServiceDisconnectBlockProcedure = "/validator.v1.ValidatorService/DisconnectBlock"
	// ValidatorServiceGetCoinbasePSBTProcedure is the fully-qualified name of the ValidatorService's
	// GetCoinbasePSBT RPC.
	ValidatorServiceGetCoinbasePSBTProcedure = "/validator.v1.ValidatorService/GetCoinbasePSBT"
	// ValidatorServiceGetDepositsProcedure is the fully-qualified name of the ValidatorService's
	// GetDeposits RPC.
	ValidatorServiceGetDepositsProcedure = "/validator.v1.ValidatorService/GetDeposits"
	// ValidatorServiceGetSidechainProposalsProcedure is the fully-qualified name of the
	// ValidatorService's GetSidechainProposals RPC.
	ValidatorServiceGetSidechainProposalsProcedure = "/validator.v1.ValidatorService/GetSidechainProposals"
	// ValidatorServiceGetSidechainsProcedure is the fully-qualified name of the ValidatorService's
	// GetSidechains RPC.
	ValidatorServiceGetSidechainsProcedure = "/validator.v1.ValidatorService/GetSidechains"
	// ValidatorServiceGetCtipProcedure is the fully-qualified name of the ValidatorService's GetCtip
	// RPC.
	ValidatorServiceGetCtipProcedure = "/validator.v1.ValidatorService/GetCtip"
	// ValidatorServiceGetMainBlockHeightProcedure is the fully-qualified name of the ValidatorService's
	// GetMainBlockHeight RPC.
	ValidatorServiceGetMainBlockHeightProcedure = "/validator.v1.ValidatorService/GetMainBlockHeight"
	// ValidatorServiceGetMainChainTipProcedure is the fully-qualified name of the ValidatorService's
	// GetMainChainTip RPC.
	ValidatorServiceGetMainChainTipProcedure = "/validator.v1.ValidatorService/GetMainChainTip"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	validatorServiceServiceDescriptor                     = v1.File_validator_v1_validator_proto.Services().ByName("ValidatorService")
	validatorServiceConnectBlockMethodDescriptor          = validatorServiceServiceDescriptor.Methods().ByName("ConnectBlock")
	validatorServiceDisconnectBlockMethodDescriptor       = validatorServiceServiceDescriptor.Methods().ByName("DisconnectBlock")
	validatorServiceGetCoinbasePSBTMethodDescriptor       = validatorServiceServiceDescriptor.Methods().ByName("GetCoinbasePSBT")
	validatorServiceGetDepositsMethodDescriptor           = validatorServiceServiceDescriptor.Methods().ByName("GetDeposits")
	validatorServiceGetSidechainProposalsMethodDescriptor = validatorServiceServiceDescriptor.Methods().ByName("GetSidechainProposals")
	validatorServiceGetSidechainsMethodDescriptor         = validatorServiceServiceDescriptor.Methods().ByName("GetSidechains")
	validatorServiceGetCtipMethodDescriptor               = validatorServiceServiceDescriptor.Methods().ByName("GetCtip")
	validatorServiceGetMainBlockHeightMethodDescriptor    = validatorServiceServiceDescriptor.Methods().ByName("GetMainBlockHeight")
	validatorServiceGetMainChainTipMethodDescriptor       = validatorServiceServiceDescriptor.Methods().ByName("GetMainChainTip")
)

// ValidatorServiceClient is a client for the validator.v1.ValidatorService service.
type ValidatorServiceClient interface {
	ConnectBlock(context.Context, *connect.Request[v1.ConnectBlockRequest]) (*connect.Response[v1.ConnectBlockResponse], error)
	DisconnectBlock(context.Context, *connect.Request[v1.DisconnectBlockRequest]) (*connect.Response[v1.DisconnectBlockResponse], error)
	GetCoinbasePSBT(context.Context, *connect.Request[v1.GetCoinbasePSBTRequest]) (*connect.Response[v1.GetCoinbasePSBTResponse], error)
	GetDeposits(context.Context, *connect.Request[v1.GetDepositsRequest]) (*connect.Response[v1.GetDepositsResponse], error)
	GetSidechainProposals(context.Context, *connect.Request[v1.GetSidechainProposalsRequest]) (*connect.Response[v1.GetSidechainProposalsResponse], error)
	GetSidechains(context.Context, *connect.Request[v1.GetSidechainsRequest]) (*connect.Response[v1.GetSidechainsResponse], error)
	GetCtip(context.Context, *connect.Request[v1.GetCtipRequest]) (*connect.Response[v1.GetCtipResponse], error)
	GetMainBlockHeight(context.Context, *connect.Request[v1.GetMainBlockHeightRequest]) (*connect.Response[v1.GetMainBlockHeightResponse], error)
	GetMainChainTip(context.Context, *connect.Request[v1.GetMainChainTipRequest]) (*connect.Response[v1.GetMainChainTipResponse], error)
}

// NewValidatorServiceClient constructs a client for the validator.v1.ValidatorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewValidatorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ValidatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &validatorServiceClient{
		connectBlock: connect.NewClient[v1.ConnectBlockRequest, v1.ConnectBlockResponse](
			httpClient,
			baseURL+ValidatorServiceConnectBlockProcedure,
			connect.WithSchema(validatorServiceConnectBlockMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disconnectBlock: connect.NewClient[v1.DisconnectBlockRequest, v1.DisconnectBlockResponse](
			httpClient,
			baseURL+ValidatorServiceDisconnectBlockProcedure,
			connect.WithSchema(validatorServiceDisconnectBlockMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCoinbasePSBT: connect.NewClient[v1.GetCoinbasePSBTRequest, v1.GetCoinbasePSBTResponse](
			httpClient,
			baseURL+ValidatorServiceGetCoinbasePSBTProcedure,
			connect.WithSchema(validatorServiceGetCoinbasePSBTMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDeposits: connect.NewClient[v1.GetDepositsRequest, v1.GetDepositsResponse](
			httpClient,
			baseURL+ValidatorServiceGetDepositsProcedure,
			connect.WithSchema(validatorServiceGetDepositsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSidechainProposals: connect.NewClient[v1.GetSidechainProposalsRequest, v1.GetSidechainProposalsResponse](
			httpClient,
			baseURL+ValidatorServiceGetSidechainProposalsProcedure,
			connect.WithSchema(validatorServiceGetSidechainProposalsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSidechains: connect.NewClient[v1.GetSidechainsRequest, v1.GetSidechainsResponse](
			httpClient,
			baseURL+ValidatorServiceGetSidechainsProcedure,
			connect.WithSchema(validatorServiceGetSidechainsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCtip: connect.NewClient[v1.GetCtipRequest, v1.GetCtipResponse](
			httpClient,
			baseURL+ValidatorServiceGetCtipProcedure,
			connect.WithSchema(validatorServiceGetCtipMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMainBlockHeight: connect.NewClient[v1.GetMainBlockHeightRequest, v1.GetMainBlockHeightResponse](
			httpClient,
			baseURL+ValidatorServiceGetMainBlockHeightProcedure,
			connect.WithSchema(validatorServiceGetMainBlockHeightMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMainChainTip: connect.NewClient[v1.GetMainChainTipRequest, v1.GetMainChainTipResponse](
			httpClient,
			baseURL+ValidatorServiceGetMainChainTipProcedure,
			connect.WithSchema(validatorServiceGetMainChainTipMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// validatorServiceClient implements ValidatorServiceClient.
type validatorServiceClient struct {
	connectBlock          *connect.Client[v1.ConnectBlockRequest, v1.ConnectBlockResponse]
	disconnectBlock       *connect.Client[v1.DisconnectBlockRequest, v1.DisconnectBlockResponse]
	getCoinbasePSBT       *connect.Client[v1.GetCoinbasePSBTRequest, v1.GetCoinbasePSBTResponse]
	getDeposits           *connect.Client[v1.GetDepositsRequest, v1.GetDepositsResponse]
	getSidechainProposals *connect.Client[v1.GetSidechainProposalsRequest, v1.GetSidechainProposalsResponse]
	getSidechains         *connect.Client[v1.GetSidechainsRequest, v1.GetSidechainsResponse]
	getCtip               *connect.Client[v1.GetCtipRequest, v1.GetCtipResponse]
	getMainBlockHeight    *connect.Client[v1.GetMainBlockHeightRequest, v1.GetMainBlockHeightResponse]
	getMainChainTip       *connect.Client[v1.GetMainChainTipRequest, v1.GetMainChainTipResponse]
}

// ConnectBlock calls validator.v1.ValidatorService.ConnectBlock.
func (c *validatorServiceClient) ConnectBlock(ctx context.Context, req *connect.Request[v1.ConnectBlockRequest]) (*connect.Response[v1.ConnectBlockResponse], error) {
	return c.connectBlock.CallUnary(ctx, req)
}

// DisconnectBlock calls validator.v1.ValidatorService.DisconnectBlock.
func (c *validatorServiceClient) DisconnectBlock(ctx context.Context, req *connect.Request[v1.DisconnectBlockRequest]) (*connect.Response[v1.DisconnectBlockResponse], error) {
	return c.disconnectBlock.CallUnary(ctx, req)
}

// GetCoinbasePSBT calls validator.v1.ValidatorService.GetCoinbasePSBT.
func (c *validatorServiceClient) GetCoinbasePSBT(ctx context.Context, req *connect.Request[v1.GetCoinbasePSBTRequest]) (*connect.Response[v1.GetCoinbasePSBTResponse], error) {
	return c.getCoinbasePSBT.CallUnary(ctx, req)
}

// GetDeposits calls validator.v1.ValidatorService.GetDeposits.
func (c *validatorServiceClient) GetDeposits(ctx context.Context, req *connect.Request[v1.GetDepositsRequest]) (*connect.Response[v1.GetDepositsResponse], error) {
	return c.getDeposits.CallUnary(ctx, req)
}

// GetSidechainProposals calls validator.v1.ValidatorService.GetSidechainProposals.
func (c *validatorServiceClient) GetSidechainProposals(ctx context.Context, req *connect.Request[v1.GetSidechainProposalsRequest]) (*connect.Response[v1.GetSidechainProposalsResponse], error) {
	return c.getSidechainProposals.CallUnary(ctx, req)
}

// GetSidechains calls validator.v1.ValidatorService.GetSidechains.
func (c *validatorServiceClient) GetSidechains(ctx context.Context, req *connect.Request[v1.GetSidechainsRequest]) (*connect.Response[v1.GetSidechainsResponse], error) {
	return c.getSidechains.CallUnary(ctx, req)
}

// GetCtip calls validator.v1.ValidatorService.GetCtip.
func (c *validatorServiceClient) GetCtip(ctx context.Context, req *connect.Request[v1.GetCtipRequest]) (*connect.Response[v1.GetCtipResponse], error) {
	return c.getCtip.CallUnary(ctx, req)
}

// GetMainBlockHeight calls validator.v1.ValidatorService.GetMainBlockHeight.
func (c *validatorServiceClient) GetMainBlockHeight(ctx context.Context, req *connect.Request[v1.GetMainBlockHeightRequest]) (*connect.Response[v1.GetMainBlockHeightResponse], error) {
	return c.getMainBlockHeight.CallUnary(ctx, req)
}

// GetMainChainTip calls validator.v1.ValidatorService.GetMainChainTip.
func (c *validatorServiceClient) GetMainChainTip(ctx context.Context, req *connect.Request[v1.GetMainChainTipRequest]) (*connect.Response[v1.GetMainChainTipResponse], error) {
	return c.getMainChainTip.CallUnary(ctx, req)
}

// ValidatorServiceHandler is an implementation of the validator.v1.ValidatorService service.
type ValidatorServiceHandler interface {
	ConnectBlock(context.Context, *connect.Request[v1.ConnectBlockRequest]) (*connect.Response[v1.ConnectBlockResponse], error)
	DisconnectBlock(context.Context, *connect.Request[v1.DisconnectBlockRequest]) (*connect.Response[v1.DisconnectBlockResponse], error)
	GetCoinbasePSBT(context.Context, *connect.Request[v1.GetCoinbasePSBTRequest]) (*connect.Response[v1.GetCoinbasePSBTResponse], error)
	GetDeposits(context.Context, *connect.Request[v1.GetDepositsRequest]) (*connect.Response[v1.GetDepositsResponse], error)
	GetSidechainProposals(context.Context, *connect.Request[v1.GetSidechainProposalsRequest]) (*connect.Response[v1.GetSidechainProposalsResponse], error)
	GetSidechains(context.Context, *connect.Request[v1.GetSidechainsRequest]) (*connect.Response[v1.GetSidechainsResponse], error)
	GetCtip(context.Context, *connect.Request[v1.GetCtipRequest]) (*connect.Response[v1.GetCtipResponse], error)
	GetMainBlockHeight(context.Context, *connect.Request[v1.GetMainBlockHeightRequest]) (*connect.Response[v1.GetMainBlockHeightResponse], error)
	GetMainChainTip(context.Context, *connect.Request[v1.GetMainChainTipRequest]) (*connect.Response[v1.GetMainChainTipResponse], error)
}

// NewValidatorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewValidatorServiceHandler(svc ValidatorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	validatorServiceConnectBlockHandler := connect.NewUnaryHandler(
		ValidatorServiceConnectBlockProcedure,
		svc.ConnectBlock,
		connect.WithSchema(validatorServiceConnectBlockMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceDisconnectBlockHandler := connect.NewUnaryHandler(
		ValidatorServiceDisconnectBlockProcedure,
		svc.DisconnectBlock,
		connect.WithSchema(validatorServiceDisconnectBlockMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetCoinbasePSBTHandler := connect.NewUnaryHandler(
		ValidatorServiceGetCoinbasePSBTProcedure,
		svc.GetCoinbasePSBT,
		connect.WithSchema(validatorServiceGetCoinbasePSBTMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetDepositsHandler := connect.NewUnaryHandler(
		ValidatorServiceGetDepositsProcedure,
		svc.GetDeposits,
		connect.WithSchema(validatorServiceGetDepositsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetSidechainProposalsHandler := connect.NewUnaryHandler(
		ValidatorServiceGetSidechainProposalsProcedure,
		svc.GetSidechainProposals,
		connect.WithSchema(validatorServiceGetSidechainProposalsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetSidechainsHandler := connect.NewUnaryHandler(
		ValidatorServiceGetSidechainsProcedure,
		svc.GetSidechains,
		connect.WithSchema(validatorServiceGetSidechainsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetCtipHandler := connect.NewUnaryHandler(
		ValidatorServiceGetCtipProcedure,
		svc.GetCtip,
		connect.WithSchema(validatorServiceGetCtipMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetMainBlockHeightHandler := connect.NewUnaryHandler(
		ValidatorServiceGetMainBlockHeightProcedure,
		svc.GetMainBlockHeight,
		connect.WithSchema(validatorServiceGetMainBlockHeightMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetMainChainTipHandler := connect.NewUnaryHandler(
		ValidatorServiceGetMainChainTipProcedure,
		svc.GetMainChainTip,
		connect.WithSchema(validatorServiceGetMainChainTipMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/validator.v1.ValidatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ValidatorServiceConnectBlockProcedure:
			validatorServiceConnectBlockHandler.ServeHTTP(w, r)
		case ValidatorServiceDisconnectBlockProcedure:
			validatorServiceDisconnectBlockHandler.ServeHTTP(w, r)
		case ValidatorServiceGetCoinbasePSBTProcedure:
			validatorServiceGetCoinbasePSBTHandler.ServeHTTP(w, r)
		case ValidatorServiceGetDepositsProcedure:
			validatorServiceGetDepositsHandler.ServeHTTP(w, r)
		case ValidatorServiceGetSidechainProposalsProcedure:
			validatorServiceGetSidechainProposalsHandler.ServeHTTP(w, r)
		case ValidatorServiceGetSidechainsProcedure:
			validatorServiceGetSidechainsHandler.ServeHTTP(w, r)
		case ValidatorServiceGetCtipProcedure:
			validatorServiceGetCtipHandler.ServeHTTP(w, r)
		case ValidatorServiceGetMainBlockHeightProcedure:
			validatorServiceGetMainBlockHeightHandler.ServeHTTP(w, r)
		case ValidatorServiceGetMainChainTipProcedure:
			validatorServiceGetMainChainTipHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedValidatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedValidatorServiceHandler struct{}

func (UnimplementedValidatorServiceHandler) ConnectBlock(context.Context, *connect.Request[v1.ConnectBlockRequest]) (*connect.Response[v1.ConnectBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("validator.v1.ValidatorService.ConnectBlock is not implemented"))
}

func (UnimplementedValidatorServiceHandler) DisconnectBlock(context.Context, *connect.Request[v1.DisconnectBlockRequest]) (*connect.Response[v1.DisconnectBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("validator.v1.ValidatorService.DisconnectBlock is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetCoinbasePSBT(context.Context, *connect.Request[v1.GetCoinbasePSBTRequest]) (*connect.Response[v1.GetCoinbasePSBTResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("validator.v1.ValidatorService.GetCoinbasePSBT is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetDeposits(context.Context, *connect.Request[v1.GetDepositsRequest]) (*connect.Response[v1.GetDepositsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("validator.v1.ValidatorService.GetDeposits is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetSidechainProposals(context.Context, *connect.Request[v1.GetSidechainProposalsRequest]) (*connect.Response[v1.GetSidechainProposalsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("validator.v1.ValidatorService.GetSidechainProposals is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetSidechains(context.Context, *connect.Request[v1.GetSidechainsRequest]) (*connect.Response[v1.GetSidechainsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("validator.v1.ValidatorService.GetSidechains is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetCtip(context.Context, *connect.Request[v1.GetCtipRequest]) (*connect.Response[v1.GetCtipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("validator.v1.ValidatorService.GetCtip is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetMainBlockHeight(context.Context, *connect.Request[v1.GetMainBlockHeightRequest]) (*connect.Response[v1.GetMainBlockHeightResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("validator.v1.ValidatorService.GetMainBlockHeight is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetMainChainTip(context.Context, *connect.Request[v1.GetMainChainTipRequest]) (*connect.Response[v1.GetMainChainTipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("validator.v1.ValidatorService.GetMainChainTip is not implemented"))
}
