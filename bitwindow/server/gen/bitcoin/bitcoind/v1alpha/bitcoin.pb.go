// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: bitcoin/bitcoind/v1alpha/bitcoin.proto

package bitcoindv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Peer_Network int32

const (
	Peer_NETWORK_UNSPECIFIED           Peer_Network = 0
	Peer_NETWORK_IPV4                  Peer_Network = 1
	Peer_NETWORK_IPV6                  Peer_Network = 2
	Peer_NETWORK_ONION                 Peer_Network = 3
	Peer_NETWORK_I2P                   Peer_Network = 4
	Peer_NETWORK_CJDNS                 Peer_Network = 5
	Peer_NETWORK_NOT_PUBLICLY_ROUTABLE Peer_Network = 6
)

// Enum value maps for Peer_Network.
var (
	Peer_Network_name = map[int32]string{
		0: "NETWORK_UNSPECIFIED",
		1: "NETWORK_IPV4",
		2: "NETWORK_IPV6",
		3: "NETWORK_ONION",
		4: "NETWORK_I2P",
		5: "NETWORK_CJDNS",
		6: "NETWORK_NOT_PUBLICLY_ROUTABLE",
	}
	Peer_Network_value = map[string]int32{
		"NETWORK_UNSPECIFIED":           0,
		"NETWORK_IPV4":                  1,
		"NETWORK_IPV6":                  2,
		"NETWORK_ONION":                 3,
		"NETWORK_I2P":                   4,
		"NETWORK_CJDNS":                 5,
		"NETWORK_NOT_PUBLICLY_ROUTABLE": 6,
	}
)

func (x Peer_Network) Enum() *Peer_Network {
	p := new(Peer_Network)
	*p = x
	return p
}

func (x Peer_Network) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Peer_Network) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[0].Descriptor()
}

func (Peer_Network) Type() protoreflect.EnumType {
	return &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[0]
}

func (x Peer_Network) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Peer_Network.Descriptor instead.
func (Peer_Network) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{3, 0}
}

type Peer_ConnectionType int32

const (
	Peer_CONNECTION_TYPE_UNSPECIFIED         Peer_ConnectionType = 0
	Peer_CONNECTION_TYPE_OUTBOUND_FULL_RELAY Peer_ConnectionType = 1
	Peer_CONNECTION_TYPE_BLOCK_RELAY_ONLY    Peer_ConnectionType = 2
	Peer_CONNECTION_TYPE_INBOUND             Peer_ConnectionType = 3
	Peer_CONNECTION_TYPE_MANUAL              Peer_ConnectionType = 4
	Peer_CONNECTION_TYPE_ADDR_FETCH          Peer_ConnectionType = 5
	Peer_CONNECTION_TYPE_FEEDER              Peer_ConnectionType = 6
)

// Enum value maps for Peer_ConnectionType.
var (
	Peer_ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNSPECIFIED",
		1: "CONNECTION_TYPE_OUTBOUND_FULL_RELAY",
		2: "CONNECTION_TYPE_BLOCK_RELAY_ONLY",
		3: "CONNECTION_TYPE_INBOUND",
		4: "CONNECTION_TYPE_MANUAL",
		5: "CONNECTION_TYPE_ADDR_FETCH",
		6: "CONNECTION_TYPE_FEEDER",
	}
	Peer_ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNSPECIFIED":         0,
		"CONNECTION_TYPE_OUTBOUND_FULL_RELAY": 1,
		"CONNECTION_TYPE_BLOCK_RELAY_ONLY":    2,
		"CONNECTION_TYPE_INBOUND":             3,
		"CONNECTION_TYPE_MANUAL":              4,
		"CONNECTION_TYPE_ADDR_FETCH":          5,
		"CONNECTION_TYPE_FEEDER":              6,
	}
)

func (x Peer_ConnectionType) Enum() *Peer_ConnectionType {
	p := new(Peer_ConnectionType)
	*p = x
	return p
}

func (x Peer_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Peer_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[1].Descriptor()
}

func (Peer_ConnectionType) Type() protoreflect.EnumType {
	return &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[1]
}

func (x Peer_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Peer_ConnectionType.Descriptor instead.
func (Peer_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{3, 1}
}

type Peer_TransportProtocol int32

const (
	Peer_TRANSPORT_PROTOCOL_UNSPECIFIED Peer_TransportProtocol = 0
	Peer_TRANSPORT_PROTOCOL_DETECTING   Peer_TransportProtocol = 1
	Peer_TRANSPORT_PROTOCOL_V1          Peer_TransportProtocol = 2
	Peer_TRANSPORT_PROTOCOL_V2          Peer_TransportProtocol = 3
)

// Enum value maps for Peer_TransportProtocol.
var (
	Peer_TransportProtocol_name = map[int32]string{
		0: "TRANSPORT_PROTOCOL_UNSPECIFIED",
		1: "TRANSPORT_PROTOCOL_DETECTING",
		2: "TRANSPORT_PROTOCOL_V1",
		3: "TRANSPORT_PROTOCOL_V2",
	}
	Peer_TransportProtocol_value = map[string]int32{
		"TRANSPORT_PROTOCOL_UNSPECIFIED": 0,
		"TRANSPORT_PROTOCOL_DETECTING":   1,
		"TRANSPORT_PROTOCOL_V1":          2,
		"TRANSPORT_PROTOCOL_V2":          3,
	}
)

func (x Peer_TransportProtocol) Enum() *Peer_TransportProtocol {
	p := new(Peer_TransportProtocol)
	*p = x
	return p
}

func (x Peer_TransportProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Peer_TransportProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[2].Descriptor()
}

func (Peer_TransportProtocol) Type() protoreflect.EnumType {
	return &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[2]
}

func (x Peer_TransportProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Peer_TransportProtocol.Descriptor instead.
func (Peer_TransportProtocol) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{3, 2}
}

type GetTransactionResponse_Replaceable int32

const (
	GetTransactionResponse_REPLACEABLE_UNSPECIFIED GetTransactionResponse_Replaceable = 0
	GetTransactionResponse_REPLACEABLE_YES         GetTransactionResponse_Replaceable = 1
	GetTransactionResponse_REPLACEABLE_NO          GetTransactionResponse_Replaceable = 2
)

// Enum value maps for GetTransactionResponse_Replaceable.
var (
	GetTransactionResponse_Replaceable_name = map[int32]string{
		0: "REPLACEABLE_UNSPECIFIED",
		1: "REPLACEABLE_YES",
		2: "REPLACEABLE_NO",
	}
	GetTransactionResponse_Replaceable_value = map[string]int32{
		"REPLACEABLE_UNSPECIFIED": 0,
		"REPLACEABLE_YES":         1,
		"REPLACEABLE_NO":          2,
	}
)

func (x GetTransactionResponse_Replaceable) Enum() *GetTransactionResponse_Replaceable {
	p := new(GetTransactionResponse_Replaceable)
	*p = x
	return p
}

func (x GetTransactionResponse_Replaceable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTransactionResponse_Replaceable) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[3].Descriptor()
}

func (GetTransactionResponse_Replaceable) Type() protoreflect.EnumType {
	return &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[3]
}

func (x GetTransactionResponse_Replaceable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTransactionResponse_Replaceable.Descriptor instead.
func (GetTransactionResponse_Replaceable) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{13, 0}
}

type GetTransactionResponse_Category int32

const (
	GetTransactionResponse_CATEGORY_UNSPECIFIED GetTransactionResponse_Category = 0
	GetTransactionResponse_CATEGORY_SEND        GetTransactionResponse_Category = 1
	GetTransactionResponse_CATEGORY_RECEIVE     GetTransactionResponse_Category = 2
	GetTransactionResponse_CATEGORY_GENERATE    GetTransactionResponse_Category = 3
	GetTransactionResponse_CATEGORY_IMMATURE    GetTransactionResponse_Category = 4
	GetTransactionResponse_CATEGORY_ORPHAN      GetTransactionResponse_Category = 5
)

// Enum value maps for GetTransactionResponse_Category.
var (
	GetTransactionResponse_Category_name = map[int32]string{
		0: "CATEGORY_UNSPECIFIED",
		1: "CATEGORY_SEND",
		2: "CATEGORY_RECEIVE",
		3: "CATEGORY_GENERATE",
		4: "CATEGORY_IMMATURE",
		5: "CATEGORY_ORPHAN",
	}
	GetTransactionResponse_Category_value = map[string]int32{
		"CATEGORY_UNSPECIFIED": 0,
		"CATEGORY_SEND":        1,
		"CATEGORY_RECEIVE":     2,
		"CATEGORY_GENERATE":    3,
		"CATEGORY_IMMATURE":    4,
		"CATEGORY_ORPHAN":      5,
	}
)

func (x GetTransactionResponse_Category) Enum() *GetTransactionResponse_Category {
	p := new(GetTransactionResponse_Category)
	*p = x
	return p
}

func (x GetTransactionResponse_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTransactionResponse_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[4].Descriptor()
}

func (GetTransactionResponse_Category) Type() protoreflect.EnumType {
	return &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[4]
}

func (x GetTransactionResponse_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTransactionResponse_Category.Descriptor instead.
func (GetTransactionResponse_Category) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{13, 1}
}

type EstimateSmartFeeRequest_EstimateMode int32

const (
	EstimateSmartFeeRequest_ESTIMATE_MODE_UNSPECIFIED  EstimateSmartFeeRequest_EstimateMode = 0
	EstimateSmartFeeRequest_ESTIMATE_MODE_ECONOMICAL   EstimateSmartFeeRequest_EstimateMode = 1
	EstimateSmartFeeRequest_ESTIMATE_MODE_CONSERVATIVE EstimateSmartFeeRequest_EstimateMode = 2
)

// Enum value maps for EstimateSmartFeeRequest_EstimateMode.
var (
	EstimateSmartFeeRequest_EstimateMode_name = map[int32]string{
		0: "ESTIMATE_MODE_UNSPECIFIED",
		1: "ESTIMATE_MODE_ECONOMICAL",
		2: "ESTIMATE_MODE_CONSERVATIVE",
	}
	EstimateSmartFeeRequest_EstimateMode_value = map[string]int32{
		"ESTIMATE_MODE_UNSPECIFIED":  0,
		"ESTIMATE_MODE_ECONOMICAL":   1,
		"ESTIMATE_MODE_CONSERVATIVE": 2,
	}
)

func (x EstimateSmartFeeRequest_EstimateMode) Enum() *EstimateSmartFeeRequest_EstimateMode {
	p := new(EstimateSmartFeeRequest_EstimateMode)
	*p = x
	return p
}

func (x EstimateSmartFeeRequest_EstimateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EstimateSmartFeeRequest_EstimateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[5].Descriptor()
}

func (EstimateSmartFeeRequest_EstimateMode) Type() protoreflect.EnumType {
	return &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[5]
}

func (x EstimateSmartFeeRequest_EstimateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EstimateSmartFeeRequest_EstimateMode.Descriptor instead.
func (EstimateSmartFeeRequest_EstimateMode) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{24, 0}
}

type GetBlockRequest_Verbosity int32

const (
	GetBlockRequest_VERBOSITY_UNSPECIFIED GetBlockRequest_Verbosity = 0
	// Returns the raw block data, completely unprocessed. Response only sets hex.
	GetBlockRequest_VERBOSITY_RAW_DATA GetBlockRequest_Verbosity = 1
	// Returns information about the block
	GetBlockRequest_VERBOSITY_BLOCK_INFO GetBlockRequest_Verbosity = 2
	// Returns information about the block and information
	// about each transaction
	GetBlockRequest_VERBOSITY_BLOCK_TX_INFO GetBlockRequest_Verbosity = 3
	// Returns information about the block, information
	// about each transaction and prevout information.
	GetBlockRequest_VERBOSITY_BLOCK_TX_PREVOUT_INFO GetBlockRequest_Verbosity = 4
)

// Enum value maps for GetBlockRequest_Verbosity.
var (
	GetBlockRequest_Verbosity_name = map[int32]string{
		0: "VERBOSITY_UNSPECIFIED",
		1: "VERBOSITY_RAW_DATA",
		2: "VERBOSITY_BLOCK_INFO",
		3: "VERBOSITY_BLOCK_TX_INFO",
		4: "VERBOSITY_BLOCK_TX_PREVOUT_INFO",
	}
	GetBlockRequest_Verbosity_value = map[string]int32{
		"VERBOSITY_UNSPECIFIED":           0,
		"VERBOSITY_RAW_DATA":              1,
		"VERBOSITY_BLOCK_INFO":            2,
		"VERBOSITY_BLOCK_TX_INFO":         3,
		"VERBOSITY_BLOCK_TX_PREVOUT_INFO": 4,
	}
)

func (x GetBlockRequest_Verbosity) Enum() *GetBlockRequest_Verbosity {
	p := new(GetBlockRequest_Verbosity)
	*p = x
	return p
}

func (x GetBlockRequest_Verbosity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetBlockRequest_Verbosity) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[6].Descriptor()
}

func (GetBlockRequest_Verbosity) Type() protoreflect.EnumType {
	return &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[6]
}

func (x GetBlockRequest_Verbosity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetBlockRequest_Verbosity.Descriptor instead.
func (GetBlockRequest_Verbosity) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{33, 0}
}

type GetBlockchainInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockchainInfoRequest) Reset() {
	*x = GetBlockchainInfoRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockchainInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainInfoRequest) ProtoMessage() {}

func (x *GetBlockchainInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlockchainInfoRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{0}
}

type GetBlockchainInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BestBlockHash string                 `protobuf:"bytes,1,opt,name=best_block_hash,json=bestBlockHash,proto3" json:"best_block_hash,omitempty"`
	// The height of the most-work fully-validated chain.
	Blocks uint32 `protobuf:"varint,5,opt,name=blocks,proto3" json:"blocks,omitempty"`
	// The current number of validated headers.
	Headers              uint32  `protobuf:"varint,6,opt,name=headers,proto3" json:"headers,omitempty"`
	Chain                string  `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	ChainWork            string  `protobuf:"bytes,3,opt,name=chain_work,json=chainWork,proto3" json:"chain_work,omitempty"`
	InitialBlockDownload bool    `protobuf:"varint,4,opt,name=initial_block_download,json=initialBlockDownload,proto3" json:"initial_block_download,omitempty"`
	VerificationProgress float64 `protobuf:"fixed64,7,opt,name=verification_progress,json=verificationProgress,proto3" json:"verification_progress,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetBlockchainInfoResponse) Reset() {
	*x = GetBlockchainInfoResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockchainInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainInfoResponse) ProtoMessage() {}

func (x *GetBlockchainInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlockchainInfoResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{1}
}

func (x *GetBlockchainInfoResponse) GetBestBlockHash() string {
	if x != nil {
		return x.BestBlockHash
	}
	return ""
}

func (x *GetBlockchainInfoResponse) GetBlocks() uint32 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *GetBlockchainInfoResponse) GetHeaders() uint32 {
	if x != nil {
		return x.Headers
	}
	return 0
}

func (x *GetBlockchainInfoResponse) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *GetBlockchainInfoResponse) GetChainWork() string {
	if x != nil {
		return x.ChainWork
	}
	return ""
}

func (x *GetBlockchainInfoResponse) GetInitialBlockDownload() bool {
	if x != nil {
		return x.InitialBlockDownload
	}
	return false
}

func (x *GetBlockchainInfoResponse) GetVerificationProgress() float64 {
	if x != nil {
		return x.VerificationProgress
	}
	return 0
}

type GetPeerInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeerInfoRequest) Reset() {
	*x = GetPeerInfoRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerInfoRequest) ProtoMessage() {}

func (x *GetPeerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerInfoRequest.ProtoReflect.Descriptor instead.
func (*GetPeerInfoRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{2}
}

type Peer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Peer index
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The IP address and port of the peer (host:port)
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// Bind address of the connection to the peer (ip:port)
	AddrBind string `protobuf:"bytes,3,opt,name=addr_bind,json=addrBind,proto3" json:"addr_bind,omitempty"`
	// Local address as reported by the peer (ip:port)
	AddrLocal string       `protobuf:"bytes,4,opt,name=addr_local,json=addrLocal,proto3" json:"addr_local,omitempty"`
	Network   Peer_Network `protobuf:"varint,5,opt,name=network,proto3,enum=bitcoin.bitcoind.v1alpha.Peer_Network" json:"network,omitempty"`
	// The AS in the BGP route to the peer used for diversifying peer selection
	MappedAs int64 `protobuf:"varint,6,opt,name=mapped_as,json=mappedAs,proto3" json:"mapped_as,omitempty"`
	// The services offered (hex)
	Services string `protobuf:"bytes,7,opt,name=services,proto3" json:"services,omitempty"`
	// The services offered, in human-readable form
	ServicesNames []string `protobuf:"bytes,8,rep,name=services_names,json=servicesNames,proto3" json:"services_names,omitempty"`
	// Whether we relay transactions to this peer
	RelayTransactions bool `protobuf:"varint,9,opt,name=relay_transactions,json=relayTransactions,proto3" json:"relay_transactions,omitempty"`
	// The time of the last send
	LastSendAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_send_at,json=lastSendAt,proto3" json:"last_send_at,omitempty"`
	// The time of the last receive
	LastRecvAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_recv_at,json=lastRecvAt,proto3" json:"last_recv_at,omitempty"`
	// The time of the last valid transaction received from this peer
	LastTransactionAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_transaction_at,json=lastTransactionAt,proto3" json:"last_transaction_at,omitempty"`
	// The time of the last block received from this peer
	LastBlockAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=last_block_at,json=lastBlockAt,proto3" json:"last_block_at,omitempty"`
	// The total bytes sent
	BytesSent uint64 `protobuf:"varint,14,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	// The total bytes received
	BytesReceived uint64 `protobuf:"varint,15,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	// The time of the connection
	ConnectedAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=connected_at,json=connectedAt,proto3" json:"connected_at,omitempty"`
	// The time offset
	TimeOffset *durationpb.Duration `protobuf:"bytes,17,opt,name=time_offset,json=timeOffset,proto3" json:"time_offset,omitempty"`
	// The last ping time, if any
	PingTime *durationpb.Duration `protobuf:"bytes,18,opt,name=ping_time,json=pingTime,proto3" json:"ping_time,omitempty"`
	// The minimum observed ping time, if any
	MinPing *durationpb.Duration `protobuf:"bytes,19,opt,name=min_ping,json=minPing,proto3" json:"min_ping,omitempty"`
	// The duration of an outstanding ping, if any
	PingWait *durationpb.Duration `protobuf:"bytes,20,opt,name=ping_wait,json=pingWait,proto3" json:"ping_wait,omitempty"`
	// The peer version, such as 70001
	Version uint32 `protobuf:"varint,21,opt,name=version,proto3" json:"version,omitempty"`
	// The string version
	Subver string `protobuf:"bytes,22,opt,name=subver,proto3" json:"subver,omitempty"`
	// Inbound (true) or Outbound (false)
	Inbound bool `protobuf:"varint,23,opt,name=inbound,proto3" json:"inbound,omitempty"`
	// Whether we selected peer as (compact blocks) high-bandwidth peer
	Bip152HbTo bool `protobuf:"varint,24,opt,name=bip152_hb_to,json=bip152HbTo,proto3" json:"bip152_hb_to,omitempty"`
	// Whether peer selected us as (compact blocks) high-bandwidth peer
	Bip152HbFrom bool `protobuf:"varint,25,opt,name=bip152_hb_from,json=bip152HbFrom,proto3" json:"bip152_hb_from,omitempty"`
	// The starting height (block) of the peer
	StartingHeight int32 `protobuf:"varint,26,opt,name=starting_height,json=startingHeight,proto3" json:"starting_height,omitempty"`
	// The current height of header pre-synchronization with this peer, or -1 if no low-work sync is in progress
	PresyncedHeaders int32 `protobuf:"varint,27,opt,name=presynced_headers,json=presyncedHeaders,proto3" json:"presynced_headers,omitempty"`
	// The last header we have in common with this peer
	SyncedHeaders int32 `protobuf:"varint,28,opt,name=synced_headers,json=syncedHeaders,proto3" json:"synced_headers,omitempty"`
	// The last block we have in common with this peer
	SyncedBlocks int32 `protobuf:"varint,29,opt,name=synced_blocks,json=syncedBlocks,proto3" json:"synced_blocks,omitempty"`
	// The heights of blocks we're currently asking from this peer
	Inflight []int32 `protobuf:"varint,30,rep,packed,name=inflight,proto3" json:"inflight,omitempty"`
	// Whether we participate in address relay with this peer
	AddrRelayEnabled bool `protobuf:"varint,31,opt,name=addr_relay_enabled,json=addrRelayEnabled,proto3" json:"addr_relay_enabled,omitempty"`
	// The total number of addresses processed, excluding those dropped due to rate limiting
	AddrProcessed int64 `protobuf:"varint,32,opt,name=addr_processed,json=addrProcessed,proto3" json:"addr_processed,omitempty"`
	// The total number of addresses dropped due to rate limiting
	AddrRateLimited int64 `protobuf:"varint,33,opt,name=addr_rate_limited,json=addrRateLimited,proto3" json:"addr_rate_limited,omitempty"`
	// Any special permissions that have been granted to this peer
	Permissions []string `protobuf:"bytes,34,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// The minimum fee rate for transactions this peer accepts
	MinFeeFilter float64 `protobuf:"fixed64,35,opt,name=min_fee_filter,json=minFeeFilter,proto3" json:"min_fee_filter,omitempty"`
	// The total bytes sent aggregated by message type
	BytesSentPerMsg map[string]int64 `protobuf:"bytes,36,rep,name=bytes_sent_per_msg,json=bytesSentPerMsg,proto3" json:"bytes_sent_per_msg,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// The total bytes received aggregated by message type
	BytesReceivedPerMsg map[string]int64 `protobuf:"bytes,37,rep,name=bytes_received_per_msg,json=bytesReceivedPerMsg,proto3" json:"bytes_received_per_msg,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Type of connection
	ConnectionType Peer_ConnectionType `protobuf:"varint,38,opt,name=connection_type,json=connectionType,proto3,enum=bitcoin.bitcoind.v1alpha.Peer_ConnectionType" json:"connection_type,omitempty"`
	// Type of transport protocol
	TransportProtocol Peer_TransportProtocol `protobuf:"varint,39,opt,name=transport_protocol,json=transportProtocol,proto3,enum=bitcoin.bitcoind.v1alpha.Peer_TransportProtocol" json:"transport_protocol,omitempty"`
	// The session ID for this connection, or empty if there is none (v2 transport protocol only)
	SessionId     string `protobuf:"bytes,40,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{3}
}

func (x *Peer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Peer) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Peer) GetAddrBind() string {
	if x != nil {
		return x.AddrBind
	}
	return ""
}

func (x *Peer) GetAddrLocal() string {
	if x != nil {
		return x.AddrLocal
	}
	return ""
}

func (x *Peer) GetNetwork() Peer_Network {
	if x != nil {
		return x.Network
	}
	return Peer_NETWORK_UNSPECIFIED
}

func (x *Peer) GetMappedAs() int64 {
	if x != nil {
		return x.MappedAs
	}
	return 0
}

func (x *Peer) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *Peer) GetServicesNames() []string {
	if x != nil {
		return x.ServicesNames
	}
	return nil
}

func (x *Peer) GetRelayTransactions() bool {
	if x != nil {
		return x.RelayTransactions
	}
	return false
}

func (x *Peer) GetLastSendAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSendAt
	}
	return nil
}

func (x *Peer) GetLastRecvAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRecvAt
	}
	return nil
}

func (x *Peer) GetLastTransactionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransactionAt
	}
	return nil
}

func (x *Peer) GetLastBlockAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBlockAt
	}
	return nil
}

func (x *Peer) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *Peer) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *Peer) GetConnectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConnectedAt
	}
	return nil
}

func (x *Peer) GetTimeOffset() *durationpb.Duration {
	if x != nil {
		return x.TimeOffset
	}
	return nil
}

func (x *Peer) GetPingTime() *durationpb.Duration {
	if x != nil {
		return x.PingTime
	}
	return nil
}

func (x *Peer) GetMinPing() *durationpb.Duration {
	if x != nil {
		return x.MinPing
	}
	return nil
}

func (x *Peer) GetPingWait() *durationpb.Duration {
	if x != nil {
		return x.PingWait
	}
	return nil
}

func (x *Peer) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Peer) GetSubver() string {
	if x != nil {
		return x.Subver
	}
	return ""
}

func (x *Peer) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *Peer) GetBip152HbTo() bool {
	if x != nil {
		return x.Bip152HbTo
	}
	return false
}

func (x *Peer) GetBip152HbFrom() bool {
	if x != nil {
		return x.Bip152HbFrom
	}
	return false
}

func (x *Peer) GetStartingHeight() int32 {
	if x != nil {
		return x.StartingHeight
	}
	return 0
}

func (x *Peer) GetPresyncedHeaders() int32 {
	if x != nil {
		return x.PresyncedHeaders
	}
	return 0
}

func (x *Peer) GetSyncedHeaders() int32 {
	if x != nil {
		return x.SyncedHeaders
	}
	return 0
}

func (x *Peer) GetSyncedBlocks() int32 {
	if x != nil {
		return x.SyncedBlocks
	}
	return 0
}

func (x *Peer) GetInflight() []int32 {
	if x != nil {
		return x.Inflight
	}
	return nil
}

func (x *Peer) GetAddrRelayEnabled() bool {
	if x != nil {
		return x.AddrRelayEnabled
	}
	return false
}

func (x *Peer) GetAddrProcessed() int64 {
	if x != nil {
		return x.AddrProcessed
	}
	return 0
}

func (x *Peer) GetAddrRateLimited() int64 {
	if x != nil {
		return x.AddrRateLimited
	}
	return 0
}

func (x *Peer) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Peer) GetMinFeeFilter() float64 {
	if x != nil {
		return x.MinFeeFilter
	}
	return 0
}

func (x *Peer) GetBytesSentPerMsg() map[string]int64 {
	if x != nil {
		return x.BytesSentPerMsg
	}
	return nil
}

func (x *Peer) GetBytesReceivedPerMsg() map[string]int64 {
	if x != nil {
		return x.BytesReceivedPerMsg
	}
	return nil
}

func (x *Peer) GetConnectionType() Peer_ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return Peer_CONNECTION_TYPE_UNSPECIFIED
}

func (x *Peer) GetTransportProtocol() Peer_TransportProtocol {
	if x != nil {
		return x.TransportProtocol
	}
	return Peer_TRANSPORT_PROTOCOL_UNSPECIFIED
}

func (x *Peer) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetPeerInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peers         []*Peer                `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeerInfoResponse) Reset() {
	*x = GetPeerInfoResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerInfoResponse) ProtoMessage() {}

func (x *GetPeerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerInfoResponse.ProtoReflect.Descriptor instead.
func (*GetPeerInfoResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{4}
}

func (x *GetPeerInfoResponse) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type GetNewAddressRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Label       string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	AddressType string                 `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	// Only needs to be set if dealing with multiple wallets at the same time.
	// TODO: better suited as a header?
	Wallet        string `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNewAddressRequest) Reset() {
	*x = GetNewAddressRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNewAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAddressRequest) ProtoMessage() {}

func (x *GetNewAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAddressRequest.ProtoReflect.Descriptor instead.
func (*GetNewAddressRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{5}
}

func (x *GetNewAddressRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GetNewAddressRequest) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *GetNewAddressRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type GetNewAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNewAddressResponse) Reset() {
	*x = GetNewAddressResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNewAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAddressResponse) ProtoMessage() {}

func (x *GetNewAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAddressResponse.ProtoReflect.Descriptor instead.
func (*GetNewAddressResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{6}
}

func (x *GetNewAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetWalletInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Only needs to be set if dealing with multiple wallets at the same time.
	// TODO: better suited as a header?
	Wallet        string `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWalletInfoRequest) Reset() {
	*x = GetWalletInfoRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletInfoRequest) ProtoMessage() {}

func (x *GetWalletInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletInfoRequest.ProtoReflect.Descriptor instead.
func (*GetWalletInfoRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{7}
}

func (x *GetWalletInfoRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type GetWalletInfoResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	WalletName            string                 `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	WalletVersion         int64                  `protobuf:"varint,2,opt,name=wallet_version,json=walletVersion,proto3" json:"wallet_version,omitempty"`
	Format                string                 `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	TxCount               int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	KeyPoolSize           int64                  `protobuf:"varint,8,opt,name=key_pool_size,json=keyPoolSize,proto3" json:"key_pool_size,omitempty"`
	KeyPoolSizeHdInternal int64                  `protobuf:"varint,9,opt,name=key_pool_size_hd_internal,json=keyPoolSizeHdInternal,proto3" json:"key_pool_size_hd_internal,omitempty"`
	PayTxFee              float64                `protobuf:"fixed64,10,opt,name=pay_tx_fee,json=payTxFee,proto3" json:"pay_tx_fee,omitempty"`
	PrivateKeysEnabled    bool                   `protobuf:"varint,11,opt,name=private_keys_enabled,json=privateKeysEnabled,proto3" json:"private_keys_enabled,omitempty"`
	AvoidReuse            bool                   `protobuf:"varint,12,opt,name=avoid_reuse,json=avoidReuse,proto3" json:"avoid_reuse,omitempty"`
	// Not set if no scan is in progress.
	Scanning       *WalletScan `protobuf:"bytes,13,opt,name=scanning,proto3" json:"scanning,omitempty"`
	Descriptors    bool        `protobuf:"varint,14,opt,name=descriptors,proto3" json:"descriptors,omitempty"`
	ExternalSigner bool        `protobuf:"varint,15,opt,name=external_signer,json=externalSigner,proto3" json:"external_signer,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetWalletInfoResponse) Reset() {
	*x = GetWalletInfoResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletInfoResponse) ProtoMessage() {}

func (x *GetWalletInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletInfoResponse.ProtoReflect.Descriptor instead.
func (*GetWalletInfoResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{8}
}

func (x *GetWalletInfoResponse) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *GetWalletInfoResponse) GetWalletVersion() int64 {
	if x != nil {
		return x.WalletVersion
	}
	return 0
}

func (x *GetWalletInfoResponse) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *GetWalletInfoResponse) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *GetWalletInfoResponse) GetKeyPoolSize() int64 {
	if x != nil {
		return x.KeyPoolSize
	}
	return 0
}

func (x *GetWalletInfoResponse) GetKeyPoolSizeHdInternal() int64 {
	if x != nil {
		return x.KeyPoolSizeHdInternal
	}
	return 0
}

func (x *GetWalletInfoResponse) GetPayTxFee() float64 {
	if x != nil {
		return x.PayTxFee
	}
	return 0
}

func (x *GetWalletInfoResponse) GetPrivateKeysEnabled() bool {
	if x != nil {
		return x.PrivateKeysEnabled
	}
	return false
}

func (x *GetWalletInfoResponse) GetAvoidReuse() bool {
	if x != nil {
		return x.AvoidReuse
	}
	return false
}

func (x *GetWalletInfoResponse) GetScanning() *WalletScan {
	if x != nil {
		return x.Scanning
	}
	return nil
}

func (x *GetWalletInfoResponse) GetDescriptors() bool {
	if x != nil {
		return x.Descriptors
	}
	return false
}

func (x *GetWalletInfoResponse) GetExternalSigner() bool {
	if x != nil {
		return x.ExternalSigner
	}
	return false
}

type GetBalancesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wallet        string                 `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalancesRequest) Reset() {
	*x = GetBalancesRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesRequest) ProtoMessage() {}

func (x *GetBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesRequest.ProtoReflect.Descriptor instead.
func (*GetBalancesRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{9}
}

func (x *GetBalancesRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type GetBalancesResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Mine          *GetBalancesResponse_Mine      `protobuf:"bytes,1,opt,name=mine,proto3" json:"mine,omitempty"`
	Watchonly     *GetBalancesResponse_Watchonly `protobuf:"bytes,2,opt,name=watchonly,proto3" json:"watchonly,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalancesResponse) Reset() {
	*x = GetBalancesResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesResponse) ProtoMessage() {}

func (x *GetBalancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesResponse.ProtoReflect.Descriptor instead.
func (*GetBalancesResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{10}
}

func (x *GetBalancesResponse) GetMine() *GetBalancesResponse_Mine {
	if x != nil {
		return x.Mine
	}
	return nil
}

func (x *GetBalancesResponse) GetWatchonly() *GetBalancesResponse_Watchonly {
	if x != nil {
		return x.Watchonly
	}
	return nil
}

type WalletScan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Duration      int64                  `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Progress      float64                `protobuf:"fixed64,2,opt,name=progress,proto3" json:"progress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WalletScan) Reset() {
	*x = WalletScan{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletScan) ProtoMessage() {}

func (x *WalletScan) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletScan.ProtoReflect.Descriptor instead.
func (*WalletScan) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{11}
}

func (x *WalletScan) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *WalletScan) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type GetTransactionRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Txid             string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	IncludeWatchonly bool                   `protobuf:"varint,2,opt,name=include_watchonly,json=includeWatchonly,proto3" json:"include_watchonly,omitempty"`
	Verbose          bool                   `protobuf:"varint,3,opt,name=verbose,proto3" json:"verbose,omitempty"`
	Wallet           string                 `protobuf:"bytes,4,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{12}
}

func (x *GetTransactionRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetTransactionRequest) GetIncludeWatchonly() bool {
	if x != nil {
		return x.IncludeWatchonly
	}
	return false
}

func (x *GetTransactionRequest) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *GetTransactionRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

// Commented fields are not present in btcd/rpcclient
type GetTransactionResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Amount float64                `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee    float64                `protobuf:"fixed64,2,opt,name=fee,proto3" json:"fee,omitempty"`
	// The number of confirmations for the transaction. Negative
	// confirmations means the transaction conflicted that many
	// blocks ago.
	Confirmations int32 `protobuf:"varint,3,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// bool generated = 4;
	// bool trusted = 5;
	BlockHash string `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// string block_height = 7;
	BlockIndex uint32                 `protobuf:"varint,8,opt,name=block_index,json=blockIndex,proto3" json:"block_index,omitempty"`
	BlockTime  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	Txid       string                 `protobuf:"bytes,10,opt,name=txid,proto3" json:"txid,omitempty"`
	// string witness_txid = 11;
	WalletConflicts []string `protobuf:"bytes,12,rep,name=wallet_conflicts,json=walletConflicts,proto3" json:"wallet_conflicts,omitempty"`
	ReplacedByTxid  string   `protobuf:"bytes,13,opt,name=replaced_by_txid,json=replacedByTxid,proto3" json:"replaced_by_txid,omitempty"`
	ReplacesTxid    string   `protobuf:"bytes,14,opt,name=replaces_txid,json=replacesTxid,proto3" json:"replaces_txid,omitempty"`
	// string comment = 15;
	// string to = 16;
	Time         *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=time,proto3" json:"time,omitempty"`
	TimeReceived *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=time_received,json=timeReceived,proto3" json:"time_received,omitempty"`
	// Whether this transaction signals BIP125 (Replace-by-fee, RBF) replaceability
	// or has an unconfirmed ancestor signaling BIP125 replaceability. May be unspecified
	// for unconfirmed transactions not in the mempool because their
	// unconfirmed ancestors are unknown.
	//
	// Note that this is always set to 'no' once the transaction is confirmed.
	Bip125Replaceable GetTransactionResponse_Replaceable `protobuf:"varint,19,opt,name=bip125_replaceable,json=bip125Replaceable,proto3,enum=bitcoin.bitcoind.v1alpha.GetTransactionResponse_Replaceable" json:"bip125_replaceable,omitempty"`
	Details           []*GetTransactionResponse_Details  `protobuf:"bytes,21,rep,name=details,proto3" json:"details,omitempty"`
	Hex               string                             `protobuf:"bytes,22,opt,name=hex,proto3" json:"hex,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetTransactionResponse) Reset() {
	*x = GetTransactionResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse) ProtoMessage() {}

func (x *GetTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{13}
}

func (x *GetTransactionResponse) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetTransactionResponse) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *GetTransactionResponse) GetConfirmations() int32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetTransactionResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetTransactionResponse) GetBlockIndex() uint32 {
	if x != nil {
		return x.BlockIndex
	}
	return 0
}

func (x *GetTransactionResponse) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *GetTransactionResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetTransactionResponse) GetWalletConflicts() []string {
	if x != nil {
		return x.WalletConflicts
	}
	return nil
}

func (x *GetTransactionResponse) GetReplacedByTxid() string {
	if x != nil {
		return x.ReplacedByTxid
	}
	return ""
}

func (x *GetTransactionResponse) GetReplacesTxid() string {
	if x != nil {
		return x.ReplacesTxid
	}
	return ""
}

func (x *GetTransactionResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GetTransactionResponse) GetTimeReceived() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeReceived
	}
	return nil
}

func (x *GetTransactionResponse) GetBip125Replaceable() GetTransactionResponse_Replaceable {
	if x != nil {
		return x.Bip125Replaceable
	}
	return GetTransactionResponse_REPLACEABLE_UNSPECIFIED
}

func (x *GetTransactionResponse) GetDetails() []*GetTransactionResponse_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GetTransactionResponse) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type GetRawTransactionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The transaction ID. Required.
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// If false, returns just the hex string. Otherwise, returns the complete object.
	Verbose       bool `protobuf:"varint,2,opt,name=verbose,proto3" json:"verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRawTransactionRequest) Reset() {
	*x = GetRawTransactionRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawTransactionRequest) ProtoMessage() {}

func (x *GetRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{14}
}

func (x *GetRawTransactionRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetRawTransactionRequest) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

type ScriptSig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Asm           string                 `protobuf:"bytes,1,opt,name=asm,proto3" json:"asm,omitempty"`
	Hex           string                 `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScriptSig) Reset() {
	*x = ScriptSig{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptSig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptSig) ProtoMessage() {}

func (x *ScriptSig) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptSig.ProtoReflect.Descriptor instead.
func (*ScriptSig) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{15}
}

func (x *ScriptSig) GetAsm() string {
	if x != nil {
		return x.Asm
	}
	return ""
}

func (x *ScriptSig) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type Input struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txid          string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout          uint32                 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	Coinbase      string                 `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	ScriptSig     *ScriptSig             `protobuf:"bytes,4,opt,name=script_sig,json=scriptSig,proto3" json:"script_sig,omitempty"`
	Sequence      uint32                 `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Witness       []string               `protobuf:"bytes,6,rep,name=witness,proto3" json:"witness,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Input) Reset() {
	*x = Input{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{16}
}

func (x *Input) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *Input) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *Input) GetCoinbase() string {
	if x != nil {
		return x.Coinbase
	}
	return ""
}

func (x *Input) GetScriptSig() *ScriptSig {
	if x != nil {
		return x.ScriptSig
	}
	return nil
}

func (x *Input) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Input) GetWitness() []string {
	if x != nil {
		return x.Witness
	}
	return nil
}

type ScriptPubKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Asm           string                 `protobuf:"bytes,3,opt,name=asm,proto3" json:"asm,omitempty"`
	Hex           string                 `protobuf:"bytes,4,opt,name=hex,proto3" json:"hex,omitempty"`
	Addresses     []string               `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	ReqSigs       uint32                 `protobuf:"varint,6,opt,name=req_sigs,json=reqSigs,proto3" json:"req_sigs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScriptPubKey) Reset() {
	*x = ScriptPubKey{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptPubKey) ProtoMessage() {}

func (x *ScriptPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptPubKey.ProtoReflect.Descriptor instead.
func (*ScriptPubKey) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{17}
}

func (x *ScriptPubKey) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ScriptPubKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ScriptPubKey) GetAsm() string {
	if x != nil {
		return x.Asm
	}
	return ""
}

func (x *ScriptPubKey) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *ScriptPubKey) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ScriptPubKey) GetReqSigs() uint32 {
	if x != nil {
		return x.ReqSigs
	}
	return 0
}

type Output struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        float64                `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Vout          uint32                 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	ScriptPubKey  *ScriptPubKey          `protobuf:"bytes,3,opt,name=script_pub_key,json=scriptPubKey,proto3" json:"script_pub_key,omitempty"`
	ScriptSig     *ScriptSig             `protobuf:"bytes,4,opt,name=script_sig,json=scriptSig,proto3" json:"script_sig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output) Reset() {
	*x = Output{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{18}
}

func (x *Output) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Output) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *Output) GetScriptPubKey() *ScriptPubKey {
	if x != nil {
		return x.ScriptPubKey
	}
	return nil
}

func (x *Output) GetScriptSig() *ScriptSig {
	if x != nil {
		return x.ScriptSig
	}
	return nil
}

type GetRawTransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            *RawTransaction        `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Txid          string                 `protobuf:"bytes,8,opt,name=txid,proto3" json:"txid,omitempty"`
	Hash          string                 `protobuf:"bytes,9,opt,name=hash,proto3" json:"hash,omitempty"`
	Size          int32                  `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`
	Vsize         int32                  `protobuf:"varint,11,opt,name=vsize,proto3" json:"vsize,omitempty"`
	Weight        int32                  `protobuf:"varint,12,opt,name=weight,proto3" json:"weight,omitempty"`
	Version       uint32                 `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
	Locktime      uint32                 `protobuf:"varint,14,opt,name=locktime,proto3" json:"locktime,omitempty"`
	Inputs        []*Input               `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs       []*Output              `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Blockhash     string                 `protobuf:"bytes,4,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Confirmations uint32                 `protobuf:"varint,5,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	Time          int64                  `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	Blocktime     int64                  `protobuf:"varint,7,opt,name=blocktime,proto3" json:"blocktime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRawTransactionResponse) Reset() {
	*x = GetRawTransactionResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawTransactionResponse) ProtoMessage() {}

func (x *GetRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{19}
}

func (x *GetRawTransactionResponse) GetTx() *RawTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *GetRawTransactionResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetRawTransactionResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetRawTransactionResponse) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetRawTransactionResponse) GetVsize() int32 {
	if x != nil {
		return x.Vsize
	}
	return 0
}

func (x *GetRawTransactionResponse) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *GetRawTransactionResponse) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetRawTransactionResponse) GetLocktime() uint32 {
	if x != nil {
		return x.Locktime
	}
	return 0
}

func (x *GetRawTransactionResponse) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *GetRawTransactionResponse) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *GetRawTransactionResponse) GetBlockhash() string {
	if x != nil {
		return x.Blockhash
	}
	return ""
}

func (x *GetRawTransactionResponse) GetConfirmations() uint32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetRawTransactionResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetRawTransactionResponse) GetBlocktime() int64 {
	if x != nil {
		return x.Blocktime
	}
	return 0
}

type SendRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// bitcoin address -> BTC amount
	Destinations map[string]float64 `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	// Confirmation target in blocks.
	ConfTarget uint32 `protobuf:"varint,2,opt,name=conf_target,json=confTarget,proto3" json:"conf_target,omitempty"`
	// Only needs to be set if dealing with multiple wallets at the same time.
	// TODO: better suited as a header?
	Wallet string `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
	// Include inputs that are not safe to spend (unconfirmed transactions from
	// outside keys and unconfirmed replacement transactions.
	IncludeUnsafe bool `protobuf:"varint,4,opt,name=include_unsafe,json=includeUnsafe,proto3" json:"include_unsafe,omitempty"`
	// Outouts to subtract the fee from, specified as as address from the
	// 'destinations' field. The fee will be equally deducted from the amount of
	// each specified output.
	SubtractFeeFromOutputs []string `protobuf:"bytes,5,rep,name=subtract_fee_from_outputs,json=subtractFeeFromOutputs,proto3" json:"subtract_fee_from_outputs,omitempty"`
	// When false, returns a serialized transaction which will not be added
	// to the wallet or broadcast.
	//
	// This is a 'bool value' instead of a plain bool. This is clunky to
	// work with, but the alternative would have been to either:
	//
	//  1. Have this be a bool with the default value as the opposite of
	//     Bitcoin Core
	//  2. Rename the parameter to something else.
	//
	// Both of these seem bad.
	AddToWallet *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=add_to_wallet,json=addToWallet,proto3" json:"add_to_wallet,omitempty"`
	// Satoshis per virtual byte (sat/vB).
	FeeRate       float64 `protobuf:"fixed64,7,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendRequest) Reset() {
	*x = SendRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRequest) ProtoMessage() {}

func (x *SendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRequest.ProtoReflect.Descriptor instead.
func (*SendRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{20}
}

func (x *SendRequest) GetDestinations() map[string]float64 {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *SendRequest) GetConfTarget() uint32 {
	if x != nil {
		return x.ConfTarget
	}
	return 0
}

func (x *SendRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *SendRequest) GetIncludeUnsafe() bool {
	if x != nil {
		return x.IncludeUnsafe
	}
	return false
}

func (x *SendRequest) GetSubtractFeeFromOutputs() []string {
	if x != nil {
		return x.SubtractFeeFromOutputs
	}
	return nil
}

func (x *SendRequest) GetAddToWallet() *wrapperspb.BoolValue {
	if x != nil {
		return x.AddToWallet
	}
	return nil
}

func (x *SendRequest) GetFeeRate() float64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

type SendResponse struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Txid     string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Complete bool                   `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
	// If 'add_to_wallet' is false, the raw transaction with signature(s)
	Tx            *RawTransaction `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendResponse) Reset() {
	*x = SendResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponse) ProtoMessage() {}

func (x *SendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponse.ProtoReflect.Descriptor instead.
func (*SendResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{21}
}

func (x *SendResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *SendResponse) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *SendResponse) GetTx() *RawTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type SendToAddressRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The bitcoin address to send to.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The amount in BTC to send. eg 0.1
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// A comment used to store what the transaction is for. Not part of the transaction, just kept in your wallet.
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// A comment to store the name of the person or organization to which you're sending the transaction. Not part of the transaction, just kept in your wallet.
	CommentTo string `protobuf:"bytes,4,opt,name=comment_to,json=commentTo,proto3" json:"comment_to,omitempty"`
	// Only needs to be set if dealing with multiple wallets at the same time.
	Wallet        string `protobuf:"bytes,5,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendToAddressRequest) Reset() {
	*x = SendToAddressRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendToAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendToAddressRequest) ProtoMessage() {}

func (x *SendToAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendToAddressRequest.ProtoReflect.Descriptor instead.
func (*SendToAddressRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{22}
}

func (x *SendToAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SendToAddressRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SendToAddressRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SendToAddressRequest) GetCommentTo() string {
	if x != nil {
		return x.CommentTo
	}
	return ""
}

func (x *SendToAddressRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type SendToAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txid          string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendToAddressResponse) Reset() {
	*x = SendToAddressResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendToAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendToAddressResponse) ProtoMessage() {}

func (x *SendToAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendToAddressResponse.ProtoReflect.Descriptor instead.
func (*SendToAddressResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{23}
}

func (x *SendToAddressResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type EstimateSmartFeeRequest struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	ConfTarget    int64                                `protobuf:"varint,1,opt,name=conf_target,json=confTarget,proto3" json:"conf_target,omitempty"`
	EstimateMode  EstimateSmartFeeRequest_EstimateMode `protobuf:"varint,2,opt,name=estimate_mode,json=estimateMode,proto3,enum=bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest_EstimateMode" json:"estimate_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EstimateSmartFeeRequest) Reset() {
	*x = EstimateSmartFeeRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EstimateSmartFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateSmartFeeRequest) ProtoMessage() {}

func (x *EstimateSmartFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateSmartFeeRequest.ProtoReflect.Descriptor instead.
func (*EstimateSmartFeeRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{24}
}

func (x *EstimateSmartFeeRequest) GetConfTarget() int64 {
	if x != nil {
		return x.ConfTarget
	}
	return 0
}

func (x *EstimateSmartFeeRequest) GetEstimateMode() EstimateSmartFeeRequest_EstimateMode {
	if x != nil {
		return x.EstimateMode
	}
	return EstimateSmartFeeRequest_ESTIMATE_MODE_UNSPECIFIED
}

type EstimateSmartFeeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Estimate fee rate in BTC/kvB (only present if no errors were encountered)
	FeeRate float64 `protobuf:"fixed64,1,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	// Errors encountered during processing (if there are any)
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// Block number where estimate was found.
	Blocks        int64 `protobuf:"varint,3,opt,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EstimateSmartFeeResponse) Reset() {
	*x = EstimateSmartFeeResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EstimateSmartFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateSmartFeeResponse) ProtoMessage() {}

func (x *EstimateSmartFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateSmartFeeResponse.ProtoReflect.Descriptor instead.
func (*EstimateSmartFeeResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{25}
}

func (x *EstimateSmartFeeResponse) GetFeeRate() float64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *EstimateSmartFeeResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *EstimateSmartFeeResponse) GetBlocks() int64 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

type DecodeRawTransactionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            *RawTransaction        `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeRawTransactionRequest) Reset() {
	*x = DecodeRawTransactionRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeRawTransactionRequest) ProtoMessage() {}

func (x *DecodeRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*DecodeRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{26}
}

func (x *DecodeRawTransactionRequest) GetTx() *RawTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type RawTransaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Raw transaction data
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Hex-encoded raw transaction data
	Hex           string `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawTransaction) Reset() {
	*x = RawTransaction{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawTransaction) ProtoMessage() {}

func (x *RawTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawTransaction.ProtoReflect.Descriptor instead.
func (*RawTransaction) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{27}
}

func (x *RawTransaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RawTransaction) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type DecodeRawTransactionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Txid  string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Hash  string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// The serialized transaction size
	Size uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// The virtual transaction size (differs from
	// 'size' for witness transactions).
	VirtualSize uint32 `protobuf:"varint,4,opt,name=virtual_size,json=virtualSize,proto3" json:"virtual_size,omitempty"`
	// The transaction's weight
	Weight        uint32    `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	Version       uint32    `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	Locktime      uint32    `protobuf:"varint,7,opt,name=locktime,proto3" json:"locktime,omitempty"`
	Inputs        []*Input  `protobuf:"bytes,8,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs       []*Output `protobuf:"bytes,9,rep,name=outputs,proto3" json:"outputs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeRawTransactionResponse) Reset() {
	*x = DecodeRawTransactionResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeRawTransactionResponse) ProtoMessage() {}

func (x *DecodeRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*DecodeRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{28}
}

func (x *DecodeRawTransactionResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *DecodeRawTransactionResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DecodeRawTransactionResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DecodeRawTransactionResponse) GetVirtualSize() uint32 {
	if x != nil {
		return x.VirtualSize
	}
	return 0
}

func (x *DecodeRawTransactionResponse) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *DecodeRawTransactionResponse) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DecodeRawTransactionResponse) GetLocktime() uint32 {
	if x != nil {
		return x.Locktime
	}
	return 0
}

func (x *DecodeRawTransactionResponse) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *DecodeRawTransactionResponse) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type ImportDescriptorsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Only needs to be set if dealing with multiple wallets at the same time.
	// TODO: better suited as a header?
	Wallet        string                              `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
	Requests      []*ImportDescriptorsRequest_Request `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportDescriptorsRequest) Reset() {
	*x = ImportDescriptorsRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportDescriptorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDescriptorsRequest) ProtoMessage() {}

func (x *ImportDescriptorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDescriptorsRequest.ProtoReflect.Descriptor instead.
func (*ImportDescriptorsRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{29}
}

func (x *ImportDescriptorsRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *ImportDescriptorsRequest) GetRequests() []*ImportDescriptorsRequest_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

type ImportDescriptorsResponse struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Responses     []*ImportDescriptorsResponse_Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportDescriptorsResponse) Reset() {
	*x = ImportDescriptorsResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportDescriptorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDescriptorsResponse) ProtoMessage() {}

func (x *ImportDescriptorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDescriptorsResponse.ProtoReflect.Descriptor instead.
func (*ImportDescriptorsResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{30}
}

func (x *ImportDescriptorsResponse) GetResponses() []*ImportDescriptorsResponse_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

type GetDescriptorInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Descriptor_   string                 `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDescriptorInfoRequest) Reset() {
	*x = GetDescriptorInfoRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDescriptorInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDescriptorInfoRequest) ProtoMessage() {}

func (x *GetDescriptorInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDescriptorInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDescriptorInfoRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{31}
}

func (x *GetDescriptorInfoRequest) GetDescriptor_() string {
	if x != nil {
		return x.Descriptor_
	}
	return ""
}

type GetDescriptorInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The descriptor in canonical form, without private keys.
	Descriptor_ string `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	// The checksum for the input descriptor
	Checksum       string `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	IsRange        bool   `protobuf:"varint,3,opt,name=is_range,json=isRange,proto3" json:"is_range,omitempty"`
	IsSolvable     bool   `protobuf:"varint,4,opt,name=is_solvable,json=isSolvable,proto3" json:"is_solvable,omitempty"`
	HasPrivateKeys bool   `protobuf:"varint,5,opt,name=has_private_keys,json=hasPrivateKeys,proto3" json:"has_private_keys,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetDescriptorInfoResponse) Reset() {
	*x = GetDescriptorInfoResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDescriptorInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDescriptorInfoResponse) ProtoMessage() {}

func (x *GetDescriptorInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDescriptorInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDescriptorInfoResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{32}
}

func (x *GetDescriptorInfoResponse) GetDescriptor_() string {
	if x != nil {
		return x.Descriptor_
	}
	return ""
}

func (x *GetDescriptorInfoResponse) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *GetDescriptorInfoResponse) GetIsRange() bool {
	if x != nil {
		return x.IsRange
	}
	return false
}

func (x *GetDescriptorInfoResponse) GetIsSolvable() bool {
	if x != nil {
		return x.IsSolvable
	}
	return false
}

func (x *GetDescriptorInfoResponse) GetHasPrivateKeys() bool {
	if x != nil {
		return x.HasPrivateKeys
	}
	return false
}

type GetBlockRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Hash          string                    `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height        *int32                    `protobuf:"varint,3,opt,name=height,proto3,oneof" json:"height,omitempty"`
	Verbosity     GetBlockRequest_Verbosity `protobuf:"varint,2,opt,name=verbosity,proto3,enum=bitcoin.bitcoind.v1alpha.GetBlockRequest_Verbosity" json:"verbosity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{33}
}

func (x *GetBlockRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetBlockRequest) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *GetBlockRequest) GetVerbosity() GetBlockRequest_Verbosity {
	if x != nil {
		return x.Verbosity
	}
	return GetBlockRequest_VERBOSITY_UNSPECIFIED
}

type GetBlockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hex           string                 `protobuf:"bytes,1,opt,name=hex,proto3" json:"hex,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Confirmations int32                  `protobuf:"varint,3,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	Height        uint32                 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Version       int32                  `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	VersionHex    string                 `protobuf:"bytes,6,opt,name=version_hex,json=versionHex,proto3" json:"version_hex,omitempty"`
	MerkleRoot    string                 `protobuf:"bytes,7,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"` // google.protobuf.Timestamp median_time = 8; // not in rpcclient
	Nonce         uint32                 `protobuf:"varint,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Bits          string                 `protobuf:"bytes,10,opt,name=bits,proto3" json:"bits,omitempty"`
	Difficulty    float64                `protobuf:"fixed64,11,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	// Expected number of hashes required to produce the chain up to this block (in hex)
	// string chainwork = 12; // not in rpcclient
	PreviousBlockHash string `protobuf:"bytes,12,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	NextBlockHash     string `protobuf:"bytes,13,opt,name=next_block_hash,json=nextBlockHash,proto3" json:"next_block_hash,omitempty"`
	StrippedSize      int32  `protobuf:"varint,14,opt,name=stripped_size,json=strippedSize,proto3" json:"stripped_size,omitempty"`
	Size              int32  `protobuf:"varint,15,opt,name=size,proto3" json:"size,omitempty"`
	Weight            int32  `protobuf:"varint,16,opt,name=weight,proto3" json:"weight,omitempty"`
	// List of transactions in the block, by TXID.
	Txids         []string `protobuf:"bytes,17,rep,name=txids,proto3" json:"txids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockResponse) Reset() {
	*x = GetBlockResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockResponse) ProtoMessage() {}

func (x *GetBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockResponse.ProtoReflect.Descriptor instead.
func (*GetBlockResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{34}
}

func (x *GetBlockResponse) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *GetBlockResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetBlockResponse) GetConfirmations() int32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetBlockResponse) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBlockResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetBlockResponse) GetVersionHex() string {
	if x != nil {
		return x.VersionHex
	}
	return ""
}

func (x *GetBlockResponse) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *GetBlockResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GetBlockResponse) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *GetBlockResponse) GetBits() string {
	if x != nil {
		return x.Bits
	}
	return ""
}

func (x *GetBlockResponse) GetDifficulty() float64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *GetBlockResponse) GetPreviousBlockHash() string {
	if x != nil {
		return x.PreviousBlockHash
	}
	return ""
}

func (x *GetBlockResponse) GetNextBlockHash() string {
	if x != nil {
		return x.NextBlockHash
	}
	return ""
}

func (x *GetBlockResponse) GetStrippedSize() int32 {
	if x != nil {
		return x.StrippedSize
	}
	return 0
}

func (x *GetBlockResponse) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetBlockResponse) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *GetBlockResponse) GetTxids() []string {
	if x != nil {
		return x.Txids
	}
	return nil
}

type BumpFeeRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Wallet string                 `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
	// The TXID to be bumped
	Txid          string `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BumpFeeRequest) Reset() {
	*x = BumpFeeRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BumpFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BumpFeeRequest) ProtoMessage() {}

func (x *BumpFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BumpFeeRequest.ProtoReflect.Descriptor instead.
func (*BumpFeeRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{35}
}

func (x *BumpFeeRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *BumpFeeRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type BumpFeeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txid          string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	OriginalFee   float64                `protobuf:"fixed64,2,opt,name=original_fee,json=originalFee,proto3" json:"original_fee,omitempty"`
	NewFee        float64                `protobuf:"fixed64,3,opt,name=new_fee,json=newFee,proto3" json:"new_fee,omitempty"`
	Errors        []string               `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BumpFeeResponse) Reset() {
	*x = BumpFeeResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BumpFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BumpFeeResponse) ProtoMessage() {}

func (x *BumpFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BumpFeeResponse.ProtoReflect.Descriptor instead.
func (*BumpFeeResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{36}
}

func (x *BumpFeeResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *BumpFeeResponse) GetOriginalFee() float64 {
	if x != nil {
		return x.OriginalFee
	}
	return 0
}

func (x *BumpFeeResponse) GetNewFee() float64 {
	if x != nil {
		return x.NewFee
	}
	return 0
}

func (x *BumpFeeResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ListSinceBlockRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Wallet string                 `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
	// If set, the block hash to list transactions since, otherwise list all transactions.
	Hash          string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSinceBlockRequest) Reset() {
	*x = ListSinceBlockRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSinceBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSinceBlockRequest) ProtoMessage() {}

func (x *ListSinceBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSinceBlockRequest.ProtoReflect.Descriptor instead.
func (*ListSinceBlockRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{37}
}

func (x *ListSinceBlockRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *ListSinceBlockRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type ListSinceBlockResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Transactions  []*GetTransactionResponse `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSinceBlockResponse) Reset() {
	*x = ListSinceBlockResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSinceBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSinceBlockResponse) ProtoMessage() {}

func (x *ListSinceBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSinceBlockResponse.ProtoReflect.Descriptor instead.
func (*ListSinceBlockResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{38}
}

func (x *ListSinceBlockResponse) GetTransactions() []*GetTransactionResponse {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type GetRawMempoolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Verbose       bool                   `protobuf:"varint,1,opt,name=verbose,proto3" json:"verbose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRawMempoolRequest) Reset() {
	*x = GetRawMempoolRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRawMempoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawMempoolRequest) ProtoMessage() {}

func (x *GetRawMempoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawMempoolRequest.ProtoReflect.Descriptor instead.
func (*GetRawMempoolRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{39}
}

func (x *GetRawMempoolRequest) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

type MempoolEntry struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	VirtualSize       uint32                 `protobuf:"varint,1,opt,name=virtual_size,json=virtualSize,proto3" json:"virtual_size,omitempty"`
	Weight            uint32                 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Time              *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	DescendantCount   uint32                 `protobuf:"varint,4,opt,name=descendant_count,json=descendantCount,proto3" json:"descendant_count,omitempty"`
	DescendantSize    uint32                 `protobuf:"varint,5,opt,name=descendant_size,json=descendantSize,proto3" json:"descendant_size,omitempty"`
	AncestorCount     uint32                 `protobuf:"varint,6,opt,name=ancestor_count,json=ancestorCount,proto3" json:"ancestor_count,omitempty"`
	AncestorSize      uint32                 `protobuf:"varint,7,opt,name=ancestor_size,json=ancestorSize,proto3" json:"ancestor_size,omitempty"`
	WitnessTxid       string                 `protobuf:"bytes,8,opt,name=witness_txid,json=witnessTxid,proto3" json:"witness_txid,omitempty"`
	Fees              *MempoolEntry_Fees     `protobuf:"bytes,9,opt,name=fees,proto3" json:"fees,omitempty"`
	Depends           []string               `protobuf:"bytes,10,rep,name=depends,proto3" json:"depends,omitempty"`
	SpentBy           []string               `protobuf:"bytes,11,rep,name=spent_by,json=spentBy,proto3" json:"spent_by,omitempty"`
	Bip125Replaceable bool                   `protobuf:"varint,12,opt,name=bip125_replaceable,json=bip125Replaceable,proto3" json:"bip125_replaceable,omitempty"`
	// A transaction is unbroadcast if initial broadcast not yet
	// acknowledged by any peers.
	Unbroadcast   bool `protobuf:"varint,13,opt,name=unbroadcast,proto3" json:"unbroadcast,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MempoolEntry) Reset() {
	*x = MempoolEntry{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MempoolEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MempoolEntry) ProtoMessage() {}

func (x *MempoolEntry) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MempoolEntry.ProtoReflect.Descriptor instead.
func (*MempoolEntry) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{40}
}

func (x *MempoolEntry) GetVirtualSize() uint32 {
	if x != nil {
		return x.VirtualSize
	}
	return 0
}

func (x *MempoolEntry) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *MempoolEntry) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MempoolEntry) GetDescendantCount() uint32 {
	if x != nil {
		return x.DescendantCount
	}
	return 0
}

func (x *MempoolEntry) GetDescendantSize() uint32 {
	if x != nil {
		return x.DescendantSize
	}
	return 0
}

func (x *MempoolEntry) GetAncestorCount() uint32 {
	if x != nil {
		return x.AncestorCount
	}
	return 0
}

func (x *MempoolEntry) GetAncestorSize() uint32 {
	if x != nil {
		return x.AncestorSize
	}
	return 0
}

func (x *MempoolEntry) GetWitnessTxid() string {
	if x != nil {
		return x.WitnessTxid
	}
	return ""
}

func (x *MempoolEntry) GetFees() *MempoolEntry_Fees {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *MempoolEntry) GetDepends() []string {
	if x != nil {
		return x.Depends
	}
	return nil
}

func (x *MempoolEntry) GetSpentBy() []string {
	if x != nil {
		return x.SpentBy
	}
	return nil
}

func (x *MempoolEntry) GetBip125Replaceable() bool {
	if x != nil {
		return x.Bip125Replaceable
	}
	return false
}

func (x *MempoolEntry) GetUnbroadcast() bool {
	if x != nil {
		return x.Unbroadcast
	}
	return false
}

type GetRawMempoolResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Only set if this is a non-verbose response
	Txids []string `protobuf:"bytes,1,rep,name=txids,proto3" json:"txids,omitempty"`
	// Only set if this is a verbose response
	Transactions  map[string]*MempoolEntry `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRawMempoolResponse) Reset() {
	*x = GetRawMempoolResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRawMempoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawMempoolResponse) ProtoMessage() {}

func (x *GetRawMempoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawMempoolResponse.ProtoReflect.Descriptor instead.
func (*GetRawMempoolResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{41}
}

func (x *GetRawMempoolResponse) GetTxids() []string {
	if x != nil {
		return x.Txids
	}
	return nil
}

func (x *GetRawMempoolResponse) GetTransactions() map[string]*MempoolEntry {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type GetBlockHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        uint32                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHashRequest) Reset() {
	*x = GetBlockHashRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHashRequest) ProtoMessage() {}

func (x *GetBlockHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHashRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHashRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{42}
}

func (x *GetBlockHashRequest) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetBlockHashResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHashResponse) Reset() {
	*x = GetBlockHashResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHashResponse) ProtoMessage() {}

func (x *GetBlockHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHashResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHashResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{43}
}

func (x *GetBlockHashResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type ListTransactionsRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Wallet string                 `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
	// Defaults to 10
	Count         uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Skip          uint32 `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransactionsRequest) Reset() {
	*x = ListTransactionsRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsRequest) ProtoMessage() {}

func (x *ListTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{44}
}

func (x *ListTransactionsRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *ListTransactionsRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListTransactionsRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type ListTransactionsResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Transactions  []*GetTransactionResponse `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransactionsResponse) Reset() {
	*x = ListTransactionsResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsResponse) ProtoMessage() {}

func (x *ListTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{45}
}

func (x *ListTransactionsResponse) GetTransactions() []*GetTransactionResponse {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type ListWalletsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wallets       []string               `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWalletsResponse) Reset() {
	*x = ListWalletsResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsResponse) ProtoMessage() {}

func (x *ListWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletsResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{46}
}

func (x *ListWalletsResponse) GetWallets() []string {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type GetAddressInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Wallet        string                 `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressInfoRequest) Reset() {
	*x = GetAddressInfoRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressInfoRequest) ProtoMessage() {}

func (x *GetAddressInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAddressInfoRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{47}
}

func (x *GetAddressInfoRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetAddressInfoRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type GetAddressInfoResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Address string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Hex-encoded script pub key
	ScriptPubKey string `protobuf:"bytes,2,opt,name=script_pub_key,json=scriptPubKey,proto3" json:"script_pub_key,omitempty"`
	IsMine       bool   `protobuf:"varint,3,opt,name=is_mine,json=isMine,proto3" json:"is_mine,omitempty"`
	IsWatchOnly  bool   `protobuf:"varint,4,opt,name=is_watch_only,json=isWatchOnly,proto3" json:"is_watch_only,omitempty"`
	// If Core knows how to spend coins sent to this address, ignoring
	// possible lack of private keys.
	Solvable       bool   `protobuf:"varint,5,opt,name=solvable,proto3" json:"solvable,omitempty"`
	IsScript       bool   `protobuf:"varint,6,opt,name=is_script,json=isScript,proto3" json:"is_script,omitempty"`
	IsChange       bool   `protobuf:"varint,7,opt,name=is_change,json=isChange,proto3" json:"is_change,omitempty"`
	IsWitness      bool   `protobuf:"varint,8,opt,name=is_witness,json=isWitness,proto3" json:"is_witness,omitempty"`
	WitnessVersion uint32 `protobuf:"varint,9,opt,name=witness_version,json=witnessVersion,proto3" json:"witness_version,omitempty"`
	// Hex-encoded
	WitnessProgram string `protobuf:"bytes,10,opt,name=witness_program,json=witnessProgram,proto3" json:"witness_program,omitempty"`
	ScriptType     string `protobuf:"bytes,11,opt,name=script_type,json=scriptType,proto3" json:"script_type,omitempty"`
	IsCompressed   bool   `protobuf:"varint,12,opt,name=is_compressed,json=isCompressed,proto3" json:"is_compressed,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetAddressInfoResponse) Reset() {
	*x = GetAddressInfoResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressInfoResponse) ProtoMessage() {}

func (x *GetAddressInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressInfoResponse.ProtoReflect.Descriptor instead.
func (*GetAddressInfoResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{48}
}

func (x *GetAddressInfoResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetAddressInfoResponse) GetScriptPubKey() string {
	if x != nil {
		return x.ScriptPubKey
	}
	return ""
}

func (x *GetAddressInfoResponse) GetIsMine() bool {
	if x != nil {
		return x.IsMine
	}
	return false
}

func (x *GetAddressInfoResponse) GetIsWatchOnly() bool {
	if x != nil {
		return x.IsWatchOnly
	}
	return false
}

func (x *GetAddressInfoResponse) GetSolvable() bool {
	if x != nil {
		return x.Solvable
	}
	return false
}

func (x *GetAddressInfoResponse) GetIsScript() bool {
	if x != nil {
		return x.IsScript
	}
	return false
}

func (x *GetAddressInfoResponse) GetIsChange() bool {
	if x != nil {
		return x.IsChange
	}
	return false
}

func (x *GetAddressInfoResponse) GetIsWitness() bool {
	if x != nil {
		return x.IsWitness
	}
	return false
}

func (x *GetAddressInfoResponse) GetWitnessVersion() uint32 {
	if x != nil {
		return x.WitnessVersion
	}
	return 0
}

func (x *GetAddressInfoResponse) GetWitnessProgram() string {
	if x != nil {
		return x.WitnessProgram
	}
	return ""
}

func (x *GetAddressInfoResponse) GetScriptType() string {
	if x != nil {
		return x.ScriptType
	}
	return ""
}

func (x *GetAddressInfoResponse) GetIsCompressed() bool {
	if x != nil {
		return x.IsCompressed
	}
	return false
}

// Request/Response messages for new endpoints
type CreateWalletRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisablePrivateKeys bool                   `protobuf:"varint,2,opt,name=disable_private_keys,json=disablePrivateKeys,proto3" json:"disable_private_keys,omitempty"`
	Blank              bool                   `protobuf:"varint,3,opt,name=blank,proto3" json:"blank,omitempty"`
	Passphrase         string                 `protobuf:"bytes,4,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	AvoidReuse         bool                   `protobuf:"varint,5,opt,name=avoid_reuse,json=avoidReuse,proto3" json:"avoid_reuse,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{49}
}

func (x *CreateWalletRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWalletRequest) GetDisablePrivateKeys() bool {
	if x != nil {
		return x.DisablePrivateKeys
	}
	return false
}

func (x *CreateWalletRequest) GetBlank() bool {
	if x != nil {
		return x.Blank
	}
	return false
}

func (x *CreateWalletRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *CreateWalletRequest) GetAvoidReuse() bool {
	if x != nil {
		return x.AvoidReuse
	}
	return false
}

type CreateWalletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Warning       string                 `protobuf:"bytes,2,opt,name=warning,proto3" json:"warning,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateWalletResponse) Reset() {
	*x = CreateWalletResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletResponse) ProtoMessage() {}

func (x *CreateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateWalletResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{50}
}

func (x *CreateWalletResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWalletResponse) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

type BackupWalletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Destination   string                 `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Wallet        string                 `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupWalletRequest) Reset() {
	*x = BackupWalletRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupWalletRequest) ProtoMessage() {}

func (x *BackupWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupWalletRequest.ProtoReflect.Descriptor instead.
func (*BackupWalletRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{51}
}

func (x *BackupWalletRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *BackupWalletRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type BackupWalletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupWalletResponse) Reset() {
	*x = BackupWalletResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupWalletResponse) ProtoMessage() {}

func (x *BackupWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupWalletResponse.ProtoReflect.Descriptor instead.
func (*BackupWalletResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{52}
}

type DumpWalletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Wallet        string                 `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DumpWalletRequest) Reset() {
	*x = DumpWalletRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DumpWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpWalletRequest) ProtoMessage() {}

func (x *DumpWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpWalletRequest.ProtoReflect.Descriptor instead.
func (*DumpWalletRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{53}
}

func (x *DumpWalletRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DumpWalletRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type DumpWalletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DumpWalletResponse) Reset() {
	*x = DumpWalletResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DumpWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpWalletResponse) ProtoMessage() {}

func (x *DumpWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpWalletResponse.ProtoReflect.Descriptor instead.
func (*DumpWalletResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{54}
}

func (x *DumpWalletResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type ImportWalletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Wallet        string                 `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportWalletRequest) Reset() {
	*x = ImportWalletRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportWalletRequest) ProtoMessage() {}

func (x *ImportWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportWalletRequest.ProtoReflect.Descriptor instead.
func (*ImportWalletRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{55}
}

func (x *ImportWalletRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ImportWalletRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type ImportWalletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportWalletResponse) Reset() {
	*x = ImportWalletResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportWalletResponse) ProtoMessage() {}

func (x *ImportWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportWalletResponse.ProtoReflect.Descriptor instead.
func (*ImportWalletResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{56}
}

type UnloadWalletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WalletName    string                 `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	Wallet        string                 `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnloadWalletRequest) Reset() {
	*x = UnloadWalletRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnloadWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnloadWalletRequest) ProtoMessage() {}

func (x *UnloadWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnloadWalletRequest.ProtoReflect.Descriptor instead.
func (*UnloadWalletRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{57}
}

func (x *UnloadWalletRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *UnloadWalletRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type UnloadWalletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnloadWalletResponse) Reset() {
	*x = UnloadWalletResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnloadWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnloadWalletResponse) ProtoMessage() {}

func (x *UnloadWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnloadWalletResponse.ProtoReflect.Descriptor instead.
func (*UnloadWalletResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{58}
}

type DumpPrivKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Wallet        string                 `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DumpPrivKeyRequest) Reset() {
	*x = DumpPrivKeyRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DumpPrivKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpPrivKeyRequest) ProtoMessage() {}

func (x *DumpPrivKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpPrivKeyRequest.ProtoReflect.Descriptor instead.
func (*DumpPrivKeyRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{59}
}

func (x *DumpPrivKeyRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DumpPrivKeyRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type DumpPrivKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrivateKey    string                 `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DumpPrivKeyResponse) Reset() {
	*x = DumpPrivKeyResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DumpPrivKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpPrivKeyResponse) ProtoMessage() {}

func (x *DumpPrivKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpPrivKeyResponse.ProtoReflect.Descriptor instead.
func (*DumpPrivKeyResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{60}
}

func (x *DumpPrivKeyResponse) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type ImportPrivKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrivateKey    string                 `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Label         string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Rescan        bool                   `protobuf:"varint,3,opt,name=rescan,proto3" json:"rescan,omitempty"`
	Wallet        string                 `protobuf:"bytes,4,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportPrivKeyRequest) Reset() {
	*x = ImportPrivKeyRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportPrivKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPrivKeyRequest) ProtoMessage() {}

func (x *ImportPrivKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPrivKeyRequest.ProtoReflect.Descriptor instead.
func (*ImportPrivKeyRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{61}
}

func (x *ImportPrivKeyRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *ImportPrivKeyRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ImportPrivKeyRequest) GetRescan() bool {
	if x != nil {
		return x.Rescan
	}
	return false
}

func (x *ImportPrivKeyRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type ImportPrivKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportPrivKeyResponse) Reset() {
	*x = ImportPrivKeyResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportPrivKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPrivKeyResponse) ProtoMessage() {}

func (x *ImportPrivKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPrivKeyResponse.ProtoReflect.Descriptor instead.
func (*ImportPrivKeyResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{62}
}

type ImportAddressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Label         string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Rescan        bool                   `protobuf:"varint,3,opt,name=rescan,proto3" json:"rescan,omitempty"`
	Wallet        string                 `protobuf:"bytes,4,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportAddressRequest) Reset() {
	*x = ImportAddressRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAddressRequest) ProtoMessage() {}

func (x *ImportAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAddressRequest.ProtoReflect.Descriptor instead.
func (*ImportAddressRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{63}
}

func (x *ImportAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ImportAddressRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ImportAddressRequest) GetRescan() bool {
	if x != nil {
		return x.Rescan
	}
	return false
}

func (x *ImportAddressRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type ImportAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportAddressResponse) Reset() {
	*x = ImportAddressResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAddressResponse) ProtoMessage() {}

func (x *ImportAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAddressResponse.ProtoReflect.Descriptor instead.
func (*ImportAddressResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{64}
}

type ImportPubKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pubkey        string                 `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Rescan        bool                   `protobuf:"varint,2,opt,name=rescan,proto3" json:"rescan,omitempty"`
	Wallet        string                 `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportPubKeyRequest) Reset() {
	*x = ImportPubKeyRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportPubKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPubKeyRequest) ProtoMessage() {}

func (x *ImportPubKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPubKeyRequest.ProtoReflect.Descriptor instead.
func (*ImportPubKeyRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{65}
}

func (x *ImportPubKeyRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *ImportPubKeyRequest) GetRescan() bool {
	if x != nil {
		return x.Rescan
	}
	return false
}

func (x *ImportPubKeyRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type ImportPubKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportPubKeyResponse) Reset() {
	*x = ImportPubKeyResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportPubKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPubKeyResponse) ProtoMessage() {}

func (x *ImportPubKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPubKeyResponse.ProtoReflect.Descriptor instead.
func (*ImportPubKeyResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{66}
}

type KeyPoolRefillRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NewSize       uint32                 `protobuf:"varint,1,opt,name=new_size,json=newSize,proto3" json:"new_size,omitempty"`
	Wallet        string                 `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyPoolRefillRequest) Reset() {
	*x = KeyPoolRefillRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyPoolRefillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPoolRefillRequest) ProtoMessage() {}

func (x *KeyPoolRefillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPoolRefillRequest.ProtoReflect.Descriptor instead.
func (*KeyPoolRefillRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{67}
}

func (x *KeyPoolRefillRequest) GetNewSize() uint32 {
	if x != nil {
		return x.NewSize
	}
	return 0
}

func (x *KeyPoolRefillRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type KeyPoolRefillResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyPoolRefillResponse) Reset() {
	*x = KeyPoolRefillResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyPoolRefillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPoolRefillResponse) ProtoMessage() {}

func (x *KeyPoolRefillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPoolRefillResponse.ProtoReflect.Descriptor instead.
func (*KeyPoolRefillResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{68}
}

type GetAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Wallet        string                 `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{69}
}

func (x *GetAccountRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetAccountRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type GetAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountResponse) Reset() {
	*x = GetAccountResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountResponse) ProtoMessage() {}

func (x *GetAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountResponse.ProtoReflect.Descriptor instead.
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{70}
}

func (x *GetAccountResponse) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type SetAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Account       string                 `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Wallet        string                 `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAccountRequest) Reset() {
	*x = SetAccountRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAccountRequest) ProtoMessage() {}

func (x *SetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAccountRequest.ProtoReflect.Descriptor instead.
func (*SetAccountRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{71}
}

func (x *SetAccountRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SetAccountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SetAccountRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type SetAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAccountResponse) Reset() {
	*x = SetAccountResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAccountResponse) ProtoMessage() {}

func (x *SetAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAccountResponse.ProtoReflect.Descriptor instead.
func (*SetAccountResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{72}
}

type GetAddressesByAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Wallet        string                 `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressesByAccountRequest) Reset() {
	*x = GetAddressesByAccountRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressesByAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressesByAccountRequest) ProtoMessage() {}

func (x *GetAddressesByAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressesByAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAddressesByAccountRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{73}
}

func (x *GetAddressesByAccountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GetAddressesByAccountRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type GetAddressesByAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []string               `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressesByAccountResponse) Reset() {
	*x = GetAddressesByAccountResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressesByAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressesByAccountResponse) ProtoMessage() {}

func (x *GetAddressesByAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressesByAccountResponse.ProtoReflect.Descriptor instead.
func (*GetAddressesByAccountResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{74}
}

func (x *GetAddressesByAccountResponse) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type ListAccountsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinConf       int32                  `protobuf:"varint,1,opt,name=min_conf,json=minConf,proto3" json:"min_conf,omitempty"`
	Wallet        string                 `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccountsRequest) Reset() {
	*x = ListAccountsRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsRequest) ProtoMessage() {}

func (x *ListAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{75}
}

func (x *ListAccountsRequest) GetMinConf() int32 {
	if x != nil {
		return x.MinConf
	}
	return 0
}

func (x *ListAccountsRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type ListAccountsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accounts      map[string]float64     `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccountsResponse) Reset() {
	*x = ListAccountsResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsResponse) ProtoMessage() {}

func (x *ListAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{76}
}

func (x *ListAccountsResponse) GetAccounts() map[string]float64 {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type AddMultisigAddressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequiredSigs  int32                  `protobuf:"varint,1,opt,name=required_sigs,json=requiredSigs,proto3" json:"required_sigs,omitempty"`
	Keys          []string               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Label         string                 `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Wallet        string                 `protobuf:"bytes,4,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddMultisigAddressRequest) Reset() {
	*x = AddMultisigAddressRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMultisigAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMultisigAddressRequest) ProtoMessage() {}

func (x *AddMultisigAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMultisigAddressRequest.ProtoReflect.Descriptor instead.
func (*AddMultisigAddressRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{77}
}

func (x *AddMultisigAddressRequest) GetRequiredSigs() int32 {
	if x != nil {
		return x.RequiredSigs
	}
	return 0
}

func (x *AddMultisigAddressRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *AddMultisigAddressRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AddMultisigAddressRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type AddMultisigAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddMultisigAddressResponse) Reset() {
	*x = AddMultisigAddressResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMultisigAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMultisigAddressResponse) ProtoMessage() {}

func (x *AddMultisigAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMultisigAddressResponse.ProtoReflect.Descriptor instead.
func (*AddMultisigAddressResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{78}
}

func (x *AddMultisigAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreateMultisigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequiredSigs  int32                  `protobuf:"varint,1,opt,name=required_sigs,json=requiredSigs,proto3" json:"required_sigs,omitempty"`
	Keys          []string               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMultisigRequest) Reset() {
	*x = CreateMultisigRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMultisigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultisigRequest) ProtoMessage() {}

func (x *CreateMultisigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultisigRequest.ProtoReflect.Descriptor instead.
func (*CreateMultisigRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{79}
}

func (x *CreateMultisigRequest) GetRequiredSigs() int32 {
	if x != nil {
		return x.RequiredSigs
	}
	return 0
}

func (x *CreateMultisigRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type CreateMultisigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	RedeemScript  string                 `protobuf:"bytes,2,opt,name=redeem_script,json=redeemScript,proto3" json:"redeem_script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMultisigResponse) Reset() {
	*x = CreateMultisigResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMultisigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultisigResponse) ProtoMessage() {}

func (x *CreateMultisigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultisigResponse.ProtoReflect.Descriptor instead.
func (*CreateMultisigResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{80}
}

func (x *CreateMultisigResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateMultisigResponse) GetRedeemScript() string {
	if x != nil {
		return x.RedeemScript
	}
	return ""
}

// Transaction creation messages
type CreateRawTransactionRequest struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Inputs        []*CreateRawTransactionRequest_Input `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs       map[string]float64                   `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"` // address -> amount
	Locktime      uint32                               `protobuf:"varint,3,opt,name=locktime,proto3" json:"locktime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRawTransactionRequest) Reset() {
	*x = CreateRawTransactionRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRawTransactionRequest) ProtoMessage() {}

func (x *CreateRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{81}
}

func (x *CreateRawTransactionRequest) GetInputs() []*CreateRawTransactionRequest_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *CreateRawTransactionRequest) GetOutputs() map[string]float64 {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *CreateRawTransactionRequest) GetLocktime() uint32 {
	if x != nil {
		return x.Locktime
	}
	return 0
}

type CreateRawTransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            *RawTransaction        `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRawTransactionResponse) Reset() {
	*x = CreateRawTransactionResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRawTransactionResponse) ProtoMessage() {}

func (x *CreateRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{82}
}

func (x *CreateRawTransactionResponse) GetTx() *RawTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type CreatePsbtRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Inputs        []*CreatePsbtRequest_Input `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs       map[string]float64         `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"` // address -> amount
	Locktime      uint32                     `protobuf:"varint,3,opt,name=locktime,proto3" json:"locktime,omitempty"`
	Replaceable   bool                       `protobuf:"varint,4,opt,name=replaceable,proto3" json:"replaceable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePsbtRequest) Reset() {
	*x = CreatePsbtRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePsbtRequest) ProtoMessage() {}

func (x *CreatePsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePsbtRequest.ProtoReflect.Descriptor instead.
func (*CreatePsbtRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{83}
}

func (x *CreatePsbtRequest) GetInputs() []*CreatePsbtRequest_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *CreatePsbtRequest) GetOutputs() map[string]float64 {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *CreatePsbtRequest) GetLocktime() uint32 {
	if x != nil {
		return x.Locktime
	}
	return 0
}

func (x *CreatePsbtRequest) GetReplaceable() bool {
	if x != nil {
		return x.Replaceable
	}
	return false
}

type CreatePsbtResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Psbt          string                 `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"` // Base64 encoded PSBT
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePsbtResponse) Reset() {
	*x = CreatePsbtResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePsbtResponse) ProtoMessage() {}

func (x *CreatePsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePsbtResponse.ProtoReflect.Descriptor instead.
func (*CreatePsbtResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{84}
}

func (x *CreatePsbtResponse) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

type DecodePsbtRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Psbt          string                 `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"` // Base64 encoded PSBT
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodePsbtRequest) Reset() {
	*x = DecodePsbtRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodePsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodePsbtRequest) ProtoMessage() {}

func (x *DecodePsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodePsbtRequest.ProtoReflect.Descriptor instead.
func (*DecodePsbtRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{85}
}

func (x *DecodePsbtRequest) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

type DecodePsbtResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Tx            *DecodeRawTransactionResponse `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Unknown       map[string]string             `protobuf:"bytes,2,rep,name=unknown,proto3" json:"unknown,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Inputs        []*DecodePsbtResponse_Input   `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs       []*DecodePsbtResponse_Output  `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Fee           float64                       `protobuf:"fixed64,5,opt,name=fee,proto3" json:"fee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodePsbtResponse) Reset() {
	*x = DecodePsbtResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodePsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodePsbtResponse) ProtoMessage() {}

func (x *DecodePsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodePsbtResponse.ProtoReflect.Descriptor instead.
func (*DecodePsbtResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{86}
}

func (x *DecodePsbtResponse) GetTx() *DecodeRawTransactionResponse {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *DecodePsbtResponse) GetUnknown() map[string]string {
	if x != nil {
		return x.Unknown
	}
	return nil
}

func (x *DecodePsbtResponse) GetInputs() []*DecodePsbtResponse_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *DecodePsbtResponse) GetOutputs() []*DecodePsbtResponse_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *DecodePsbtResponse) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type AnalyzePsbtRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Psbt          string                 `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"` // Base64 encoded PSBT
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzePsbtRequest) Reset() {
	*x = AnalyzePsbtRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzePsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzePsbtRequest) ProtoMessage() {}

func (x *AnalyzePsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzePsbtRequest.ProtoReflect.Descriptor instead.
func (*AnalyzePsbtRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{87}
}

func (x *AnalyzePsbtRequest) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

type AnalyzePsbtResponse struct {
	state            protoimpl.MessageState       `protogen:"open.v1"`
	Inputs           []*AnalyzePsbtResponse_Input `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	EstimatedVsize   float64                      `protobuf:"fixed64,2,opt,name=estimated_vsize,json=estimatedVsize,proto3" json:"estimated_vsize,omitempty"`
	EstimatedFeerate float64                      `protobuf:"fixed64,3,opt,name=estimated_feerate,json=estimatedFeerate,proto3" json:"estimated_feerate,omitempty"`
	Fee              float64                      `protobuf:"fixed64,4,opt,name=fee,proto3" json:"fee,omitempty"`
	Next             string                       `protobuf:"bytes,5,opt,name=next,proto3" json:"next,omitempty"`
	Error            string                       `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AnalyzePsbtResponse) Reset() {
	*x = AnalyzePsbtResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzePsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzePsbtResponse) ProtoMessage() {}

func (x *AnalyzePsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzePsbtResponse.ProtoReflect.Descriptor instead.
func (*AnalyzePsbtResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{88}
}

func (x *AnalyzePsbtResponse) GetInputs() []*AnalyzePsbtResponse_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *AnalyzePsbtResponse) GetEstimatedVsize() float64 {
	if x != nil {
		return x.EstimatedVsize
	}
	return 0
}

func (x *AnalyzePsbtResponse) GetEstimatedFeerate() float64 {
	if x != nil {
		return x.EstimatedFeerate
	}
	return 0
}

func (x *AnalyzePsbtResponse) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *AnalyzePsbtResponse) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *AnalyzePsbtResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CombinePsbtRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Psbts         []string               `protobuf:"bytes,1,rep,name=psbts,proto3" json:"psbts,omitempty"` // Array of base64 encoded PSBTs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CombinePsbtRequest) Reset() {
	*x = CombinePsbtRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CombinePsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinePsbtRequest) ProtoMessage() {}

func (x *CombinePsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinePsbtRequest.ProtoReflect.Descriptor instead.
func (*CombinePsbtRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{89}
}

func (x *CombinePsbtRequest) GetPsbts() []string {
	if x != nil {
		return x.Psbts
	}
	return nil
}

type CombinePsbtResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Psbt          string                 `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"` // Combined base64 encoded PSBT
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CombinePsbtResponse) Reset() {
	*x = CombinePsbtResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CombinePsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinePsbtResponse) ProtoMessage() {}

func (x *CombinePsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinePsbtResponse.ProtoReflect.Descriptor instead.
func (*CombinePsbtResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{90}
}

func (x *CombinePsbtResponse) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

type UtxoUpdatePsbtRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Psbt          string                 `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"`               // Base64 encoded PSBT
	Descriptors   []*Descriptor          `protobuf:"bytes,2,rep,name=descriptors,proto3" json:"descriptors,omitempty"` // Array of descriptors
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UtxoUpdatePsbtRequest) Reset() {
	*x = UtxoUpdatePsbtRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UtxoUpdatePsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoUpdatePsbtRequest) ProtoMessage() {}

func (x *UtxoUpdatePsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoUpdatePsbtRequest.ProtoReflect.Descriptor instead.
func (*UtxoUpdatePsbtRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{91}
}

func (x *UtxoUpdatePsbtRequest) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

func (x *UtxoUpdatePsbtRequest) GetDescriptors() []*Descriptor {
	if x != nil {
		return x.Descriptors
	}
	return nil
}

type UtxoUpdatePsbtResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Psbt          string                 `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"` // Updated base64 encoded PSBT
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UtxoUpdatePsbtResponse) Reset() {
	*x = UtxoUpdatePsbtResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UtxoUpdatePsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoUpdatePsbtResponse) ProtoMessage() {}

func (x *UtxoUpdatePsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoUpdatePsbtResponse.ProtoReflect.Descriptor instead.
func (*UtxoUpdatePsbtResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{92}
}

func (x *UtxoUpdatePsbtResponse) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

type JoinPsbtsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Psbts         []string               `protobuf:"bytes,1,rep,name=psbts,proto3" json:"psbts,omitempty"` // Array of base64 encoded PSBTs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinPsbtsRequest) Reset() {
	*x = JoinPsbtsRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinPsbtsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPsbtsRequest) ProtoMessage() {}

func (x *JoinPsbtsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPsbtsRequest.ProtoReflect.Descriptor instead.
func (*JoinPsbtsRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{93}
}

func (x *JoinPsbtsRequest) GetPsbts() []string {
	if x != nil {
		return x.Psbts
	}
	return nil
}

type JoinPsbtsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Psbt          string                 `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"` // Joined base64 encoded PSBT
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinPsbtsResponse) Reset() {
	*x = JoinPsbtsResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinPsbtsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPsbtsResponse) ProtoMessage() {}

func (x *JoinPsbtsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPsbtsResponse.ProtoReflect.Descriptor instead.
func (*JoinPsbtsResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{94}
}

func (x *JoinPsbtsResponse) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

type TestMempoolAcceptRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rawtxs        []string               `protobuf:"bytes,1,rep,name=rawtxs,proto3" json:"rawtxs,omitempty"`
	MaxFeeRate    float64                `protobuf:"fixed64,2,opt,name=max_fee_rate,json=maxFeeRate,proto3" json:"max_fee_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMempoolAcceptRequest) Reset() {
	*x = TestMempoolAcceptRequest{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMempoolAcceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMempoolAcceptRequest) ProtoMessage() {}

func (x *TestMempoolAcceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMempoolAcceptRequest.ProtoReflect.Descriptor instead.
func (*TestMempoolAcceptRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{95}
}

func (x *TestMempoolAcceptRequest) GetRawtxs() []string {
	if x != nil {
		return x.Rawtxs
	}
	return nil
}

func (x *TestMempoolAcceptRequest) GetMaxFeeRate() float64 {
	if x != nil {
		return x.MaxFeeRate
	}
	return 0
}

type TestMempoolAcceptResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Results       []*TestMempoolAcceptResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMempoolAcceptResponse) Reset() {
	*x = TestMempoolAcceptResponse{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMempoolAcceptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMempoolAcceptResponse) ProtoMessage() {}

func (x *TestMempoolAcceptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMempoolAcceptResponse.ProtoReflect.Descriptor instead.
func (*TestMempoolAcceptResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{96}
}

func (x *TestMempoolAcceptResponse) GetResults() []*TestMempoolAcceptResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

// Add a new message for descriptor range
type DescriptorRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RangeType:
	//
	//	*DescriptorRange_End
	//	*DescriptorRange_Range
	RangeType     isDescriptorRange_RangeType `protobuf_oneof:"range_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescriptorRange) Reset() {
	*x = DescriptorRange{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescriptorRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescriptorRange) ProtoMessage() {}

func (x *DescriptorRange) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescriptorRange.ProtoReflect.Descriptor instead.
func (*DescriptorRange) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{97}
}

func (x *DescriptorRange) GetRangeType() isDescriptorRange_RangeType {
	if x != nil {
		return x.RangeType
	}
	return nil
}

func (x *DescriptorRange) GetEnd() int32 {
	if x != nil {
		if x, ok := x.RangeType.(*DescriptorRange_End); ok {
			return x.End
		}
	}
	return 0
}

func (x *DescriptorRange) GetRange() *Range {
	if x != nil {
		if x, ok := x.RangeType.(*DescriptorRange_Range); ok {
			return x.Range
		}
	}
	return nil
}

type isDescriptorRange_RangeType interface {
	isDescriptorRange_RangeType()
}

type DescriptorRange_End struct {
	End int32 `protobuf:"varint,1,opt,name=end,proto3,oneof"` // Single number for end (begin defaults to 0)
}

type DescriptorRange_Range struct {
	Range *Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"` // Begin and end range
}

func (*DescriptorRange_End) isDescriptorRange_RangeType() {}

func (*DescriptorRange_Range) isDescriptorRange_RangeType() {}

// Add a new message for begin/end range
type Range struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Begin         int32                  `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End           int32                  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Range) Reset() {
	*x = Range{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{98}
}

func (x *Range) GetBegin() int32 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *Range) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

// Add a new message for descriptor
type Descriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Descriptor_:
	//
	//	*Descriptor_StringDescriptor
	//	*Descriptor_ObjectDescriptor
	Descriptor_   isDescriptor_Descriptor_ `protobuf_oneof:"descriptor"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Descriptor) Reset() {
	*x = Descriptor{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Descriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Descriptor) ProtoMessage() {}

func (x *Descriptor) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Descriptor.ProtoReflect.Descriptor instead.
func (*Descriptor) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{99}
}

func (x *Descriptor) GetDescriptor_() isDescriptor_Descriptor_ {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *Descriptor) GetStringDescriptor() string {
	if x != nil {
		if x, ok := x.Descriptor_.(*Descriptor_StringDescriptor); ok {
			return x.StringDescriptor
		}
	}
	return ""
}

func (x *Descriptor) GetObjectDescriptor() *DescriptorObject {
	if x != nil {
		if x, ok := x.Descriptor_.(*Descriptor_ObjectDescriptor); ok {
			return x.ObjectDescriptor
		}
	}
	return nil
}

type isDescriptor_Descriptor_ interface {
	isDescriptor_Descriptor_()
}

type Descriptor_StringDescriptor struct {
	StringDescriptor string `protobuf:"bytes,1,opt,name=string_descriptor,json=stringDescriptor,proto3,oneof"` // Plain string descriptor
}

type Descriptor_ObjectDescriptor struct {
	ObjectDescriptor *DescriptorObject `protobuf:"bytes,2,opt,name=object_descriptor,json=objectDescriptor,proto3,oneof"` // Descriptor object with range
}

func (*Descriptor_StringDescriptor) isDescriptor_Descriptor_() {}

func (*Descriptor_ObjectDescriptor) isDescriptor_Descriptor_() {}

// Add a new message for descriptor objects
type DescriptorObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Desc          string                 `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`   // The output descriptor
	Range         *DescriptorRange       `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"` // Optional range, defaults to 1000 if not specified
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescriptorObject) Reset() {
	*x = DescriptorObject{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescriptorObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescriptorObject) ProtoMessage() {}

func (x *DescriptorObject) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescriptorObject.ProtoReflect.Descriptor instead.
func (*DescriptorObject) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{100}
}

func (x *DescriptorObject) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DescriptorObject) GetRange() *DescriptorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

// balances from outputs that the wallet can sign
type GetBalancesResponse_Mine struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// trusted balance (outputs created by the wallet or confirmed outputs)
	Trusted float64 `protobuf:"fixed64,1,opt,name=trusted,proto3" json:"trusted,omitempty"`
	// untrusted pending balance (outputs created by others that are in the mempool)
	UntrustedPending float64 `protobuf:"fixed64,2,opt,name=untrusted_pending,json=untrustedPending,proto3" json:"untrusted_pending,omitempty"`
	// balance from immature coinbase outputs
	Immature float64 `protobuf:"fixed64,3,opt,name=immature,proto3" json:"immature,omitempty"`
	// only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating
	Used          float64 `protobuf:"fixed64,4,opt,name=used,proto3" json:"used,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalancesResponse_Mine) Reset() {
	*x = GetBalancesResponse_Mine{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalancesResponse_Mine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesResponse_Mine) ProtoMessage() {}

func (x *GetBalancesResponse_Mine) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesResponse_Mine.ProtoReflect.Descriptor instead.
func (*GetBalancesResponse_Mine) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{10, 0}
}

func (x *GetBalancesResponse_Mine) GetTrusted() float64 {
	if x != nil {
		return x.Trusted
	}
	return 0
}

func (x *GetBalancesResponse_Mine) GetUntrustedPending() float64 {
	if x != nil {
		return x.UntrustedPending
	}
	return 0
}

func (x *GetBalancesResponse_Mine) GetImmature() float64 {
	if x != nil {
		return x.Immature
	}
	return 0
}

func (x *GetBalancesResponse_Mine) GetUsed() float64 {
	if x != nil {
		return x.Used
	}
	return 0
}

// watchonly balances (not present if wallet does not watch anything)
type GetBalancesResponse_Watchonly struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// trusted balance (outputs created by the wallet or confirmed outputs)
	Trusted float64 `protobuf:"fixed64,1,opt,name=trusted,proto3" json:"trusted,omitempty"`
	// untrusted pending balance (outputs created by others that are in the mempool)
	UntrustedPending float64 `protobuf:"fixed64,2,opt,name=untrusted_pending,json=untrustedPending,proto3" json:"untrusted_pending,omitempty"`
	// balance from immature coinbase outputs
	Immature      float64 `protobuf:"fixed64,3,opt,name=immature,proto3" json:"immature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalancesResponse_Watchonly) Reset() {
	*x = GetBalancesResponse_Watchonly{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalancesResponse_Watchonly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesResponse_Watchonly) ProtoMessage() {}

func (x *GetBalancesResponse_Watchonly) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesResponse_Watchonly.ProtoReflect.Descriptor instead.
func (*GetBalancesResponse_Watchonly) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{10, 1}
}

func (x *GetBalancesResponse_Watchonly) GetTrusted() float64 {
	if x != nil {
		return x.Trusted
	}
	return 0
}

func (x *GetBalancesResponse_Watchonly) GetUntrustedPending() float64 {
	if x != nil {
		return x.UntrustedPending
	}
	return 0
}

func (x *GetBalancesResponse_Watchonly) GetImmature() float64 {
	if x != nil {
		return x.Immature
	}
	return 0
}

type GetTransactionResponse_Details struct {
	state             protoimpl.MessageState          `protogen:"open.v1"`
	InvolvesWatchOnly bool                            `protobuf:"varint,1,opt,name=involves_watch_only,json=involvesWatchOnly,proto3" json:"involves_watch_only,omitempty"`
	Address           string                          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Category          GetTransactionResponse_Category `protobuf:"varint,3,opt,name=category,proto3,enum=bitcoin.bitcoind.v1alpha.GetTransactionResponse_Category" json:"category,omitempty"`
	Amount            float64                         `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// string label = 5;
	Vout          uint32  `protobuf:"varint,6,opt,name=vout,proto3" json:"vout,omitempty"`
	Fee           float64 `protobuf:"fixed64,7,opt,name=fee,proto3" json:"fee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionResponse_Details) Reset() {
	*x = GetTransactionResponse_Details{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionResponse_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse_Details) ProtoMessage() {}

func (x *GetTransactionResponse_Details) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse_Details.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse_Details) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{13, 0}
}

func (x *GetTransactionResponse_Details) GetInvolvesWatchOnly() bool {
	if x != nil {
		return x.InvolvesWatchOnly
	}
	return false
}

func (x *GetTransactionResponse_Details) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetTransactionResponse_Details) GetCategory() GetTransactionResponse_Category {
	if x != nil {
		return x.Category
	}
	return GetTransactionResponse_CATEGORY_UNSPECIFIED
}

func (x *GetTransactionResponse_Details) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetTransactionResponse_Details) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *GetTransactionResponse_Details) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type ImportDescriptorsRequest_Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Descriptor to import
	Descriptor_ string `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	// Set this descriptor to be the active descriptor for the corresponding type/externality.
	Active     bool   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	RangeStart uint32 `protobuf:"varint,3,opt,name=range_start,json=rangeStart,proto3" json:"range_start,omitempty"`
	RangeEnd   uint32 `protobuf:"varint,4,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
	// Nil passes 'now' to Bitcoin Core, which bypasses scanning.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Whether matching outputs should be treated as not incoming payments (e.g. change)
	Internal bool `protobuf:"varint,6,opt,name=internal,proto3" json:"internal,omitempty"`
	// Label to assign to the address, only allowed with internal = false. Disabled for ranged descriptors.
	Label         string `protobuf:"bytes,7,opt,name=label,proto3" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportDescriptorsRequest_Request) Reset() {
	*x = ImportDescriptorsRequest_Request{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportDescriptorsRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDescriptorsRequest_Request) ProtoMessage() {}

func (x *ImportDescriptorsRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDescriptorsRequest_Request.ProtoReflect.Descriptor instead.
func (*ImportDescriptorsRequest_Request) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{29, 0}
}

func (x *ImportDescriptorsRequest_Request) GetDescriptor_() string {
	if x != nil {
		return x.Descriptor_
	}
	return ""
}

func (x *ImportDescriptorsRequest_Request) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ImportDescriptorsRequest_Request) GetRangeStart() uint32 {
	if x != nil {
		return x.RangeStart
	}
	return 0
}

func (x *ImportDescriptorsRequest_Request) GetRangeEnd() uint32 {
	if x != nil {
		return x.RangeEnd
	}
	return 0
}

func (x *ImportDescriptorsRequest_Request) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ImportDescriptorsRequest_Request) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *ImportDescriptorsRequest_Request) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type ImportDescriptorsResponse_Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportDescriptorsResponse_Error) Reset() {
	*x = ImportDescriptorsResponse_Error{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportDescriptorsResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDescriptorsResponse_Error) ProtoMessage() {}

func (x *ImportDescriptorsResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDescriptorsResponse_Error.ProtoReflect.Descriptor instead.
func (*ImportDescriptorsResponse_Error) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{30, 0}
}

func (x *ImportDescriptorsResponse_Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ImportDescriptorsResponse_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ImportDescriptorsResponse_Response struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Success       bool                             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Warnings      []string                         `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Error         *ImportDescriptorsResponse_Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportDescriptorsResponse_Response) Reset() {
	*x = ImportDescriptorsResponse_Response{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportDescriptorsResponse_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDescriptorsResponse_Response) ProtoMessage() {}

func (x *ImportDescriptorsResponse_Response) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDescriptorsResponse_Response.ProtoReflect.Descriptor instead.
func (*ImportDescriptorsResponse_Response) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{30, 1}
}

func (x *ImportDescriptorsResponse_Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ImportDescriptorsResponse_Response) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ImportDescriptorsResponse_Response) GetError() *ImportDescriptorsResponse_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// All values are in whole bitcoins
type MempoolEntry_Fees struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          float64                `protobuf:"fixed64,1,opt,name=base,proto3" json:"base,omitempty"`
	Modified      float64                `protobuf:"fixed64,2,opt,name=modified,proto3" json:"modified,omitempty"`
	Ancestor      float64                `protobuf:"fixed64,3,opt,name=ancestor,proto3" json:"ancestor,omitempty"`
	Descendant    float64                `protobuf:"fixed64,4,opt,name=descendant,proto3" json:"descendant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MempoolEntry_Fees) Reset() {
	*x = MempoolEntry_Fees{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MempoolEntry_Fees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MempoolEntry_Fees) ProtoMessage() {}

func (x *MempoolEntry_Fees) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MempoolEntry_Fees.ProtoReflect.Descriptor instead.
func (*MempoolEntry_Fees) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{40, 0}
}

func (x *MempoolEntry_Fees) GetBase() float64 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *MempoolEntry_Fees) GetModified() float64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *MempoolEntry_Fees) GetAncestor() float64 {
	if x != nil {
		return x.Ancestor
	}
	return 0
}

func (x *MempoolEntry_Fees) GetDescendant() float64 {
	if x != nil {
		return x.Descendant
	}
	return 0
}

type CreateRawTransactionRequest_Input struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txid          string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout          uint32                 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	Sequence      uint32                 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRawTransactionRequest_Input) Reset() {
	*x = CreateRawTransactionRequest_Input{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRawTransactionRequest_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRawTransactionRequest_Input) ProtoMessage() {}

func (x *CreateRawTransactionRequest_Input) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRawTransactionRequest_Input.ProtoReflect.Descriptor instead.
func (*CreateRawTransactionRequest_Input) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{81, 0}
}

func (x *CreateRawTransactionRequest_Input) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *CreateRawTransactionRequest_Input) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *CreateRawTransactionRequest_Input) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type CreatePsbtRequest_Input struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txid          string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout          uint32                 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	Sequence      uint32                 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePsbtRequest_Input) Reset() {
	*x = CreatePsbtRequest_Input{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePsbtRequest_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePsbtRequest_Input) ProtoMessage() {}

func (x *CreatePsbtRequest_Input) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePsbtRequest_Input.ProtoReflect.Descriptor instead.
func (*CreatePsbtRequest_Input) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{83, 0}
}

func (x *CreatePsbtRequest_Input) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *CreatePsbtRequest_Input) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *CreatePsbtRequest_Input) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type DecodePsbtResponse_WitnessUtxo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        float64                `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	ScriptPubKey  *ScriptPubKey          `protobuf:"bytes,2,opt,name=script_pub_key,json=scriptPubKey,proto3" json:"script_pub_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodePsbtResponse_WitnessUtxo) Reset() {
	*x = DecodePsbtResponse_WitnessUtxo{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodePsbtResponse_WitnessUtxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodePsbtResponse_WitnessUtxo) ProtoMessage() {}

func (x *DecodePsbtResponse_WitnessUtxo) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodePsbtResponse_WitnessUtxo.ProtoReflect.Descriptor instead.
func (*DecodePsbtResponse_WitnessUtxo) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{86, 0}
}

func (x *DecodePsbtResponse_WitnessUtxo) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DecodePsbtResponse_WitnessUtxo) GetScriptPubKey() *ScriptPubKey {
	if x != nil {
		return x.ScriptPubKey
	}
	return nil
}

type DecodePsbtResponse_RedeemScript struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Asm           string                 `protobuf:"bytes,1,opt,name=asm,proto3" json:"asm,omitempty"`
	Hex           string                 `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodePsbtResponse_RedeemScript) Reset() {
	*x = DecodePsbtResponse_RedeemScript{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodePsbtResponse_RedeemScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodePsbtResponse_RedeemScript) ProtoMessage() {}

func (x *DecodePsbtResponse_RedeemScript) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodePsbtResponse_RedeemScript.ProtoReflect.Descriptor instead.
func (*DecodePsbtResponse_RedeemScript) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{86, 1}
}

func (x *DecodePsbtResponse_RedeemScript) GetAsm() string {
	if x != nil {
		return x.Asm
	}
	return ""
}

func (x *DecodePsbtResponse_RedeemScript) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *DecodePsbtResponse_RedeemScript) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DecodePsbtResponse_Bip32Deriv struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Pubkey            string                 `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	MasterFingerprint string                 `protobuf:"bytes,2,opt,name=master_fingerprint,json=masterFingerprint,proto3" json:"master_fingerprint,omitempty"`
	Path              string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DecodePsbtResponse_Bip32Deriv) Reset() {
	*x = DecodePsbtResponse_Bip32Deriv{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodePsbtResponse_Bip32Deriv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodePsbtResponse_Bip32Deriv) ProtoMessage() {}

func (x *DecodePsbtResponse_Bip32Deriv) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodePsbtResponse_Bip32Deriv.ProtoReflect.Descriptor instead.
func (*DecodePsbtResponse_Bip32Deriv) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{86, 2}
}

func (x *DecodePsbtResponse_Bip32Deriv) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *DecodePsbtResponse_Bip32Deriv) GetMasterFingerprint() string {
	if x != nil {
		return x.MasterFingerprint
	}
	return ""
}

func (x *DecodePsbtResponse_Bip32Deriv) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DecodePsbtResponse_Input struct {
	state              protoimpl.MessageState           `protogen:"open.v1"`
	NonWitnessUtxo     *DecodeRawTransactionResponse    `protobuf:"bytes,1,opt,name=non_witness_utxo,json=nonWitnessUtxo,proto3" json:"non_witness_utxo,omitempty"`
	WitnessUtxo        *DecodePsbtResponse_WitnessUtxo  `protobuf:"bytes,2,opt,name=witness_utxo,json=witnessUtxo,proto3" json:"witness_utxo,omitempty"`
	PartialSignatures  map[string]string                `protobuf:"bytes,3,rep,name=partial_signatures,json=partialSignatures,proto3" json:"partial_signatures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sighash            string                           `protobuf:"bytes,4,opt,name=sighash,proto3" json:"sighash,omitempty"`
	RedeemScript       *DecodePsbtResponse_RedeemScript `protobuf:"bytes,5,opt,name=redeem_script,json=redeemScript,proto3" json:"redeem_script,omitempty"`
	WitnessScript      *DecodePsbtResponse_RedeemScript `protobuf:"bytes,6,opt,name=witness_script,json=witnessScript,proto3" json:"witness_script,omitempty"`
	Bip32Derivs        []*DecodePsbtResponse_Bip32Deriv `protobuf:"bytes,7,rep,name=bip32_derivs,json=bip32Derivs,proto3" json:"bip32_derivs,omitempty"`
	FinalScriptsig     *ScriptSig                       `protobuf:"bytes,8,opt,name=final_scriptsig,json=finalScriptsig,proto3" json:"final_scriptsig,omitempty"`
	FinalScriptwitness []string                         `protobuf:"bytes,9,rep,name=final_scriptwitness,json=finalScriptwitness,proto3" json:"final_scriptwitness,omitempty"`
	Unknown            map[string]string                `protobuf:"bytes,10,rep,name=unknown,proto3" json:"unknown,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DecodePsbtResponse_Input) Reset() {
	*x = DecodePsbtResponse_Input{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodePsbtResponse_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodePsbtResponse_Input) ProtoMessage() {}

func (x *DecodePsbtResponse_Input) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodePsbtResponse_Input.ProtoReflect.Descriptor instead.
func (*DecodePsbtResponse_Input) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{86, 3}
}

func (x *DecodePsbtResponse_Input) GetNonWitnessUtxo() *DecodeRawTransactionResponse {
	if x != nil {
		return x.NonWitnessUtxo
	}
	return nil
}

func (x *DecodePsbtResponse_Input) GetWitnessUtxo() *DecodePsbtResponse_WitnessUtxo {
	if x != nil {
		return x.WitnessUtxo
	}
	return nil
}

func (x *DecodePsbtResponse_Input) GetPartialSignatures() map[string]string {
	if x != nil {
		return x.PartialSignatures
	}
	return nil
}

func (x *DecodePsbtResponse_Input) GetSighash() string {
	if x != nil {
		return x.Sighash
	}
	return ""
}

func (x *DecodePsbtResponse_Input) GetRedeemScript() *DecodePsbtResponse_RedeemScript {
	if x != nil {
		return x.RedeemScript
	}
	return nil
}

func (x *DecodePsbtResponse_Input) GetWitnessScript() *DecodePsbtResponse_RedeemScript {
	if x != nil {
		return x.WitnessScript
	}
	return nil
}

func (x *DecodePsbtResponse_Input) GetBip32Derivs() []*DecodePsbtResponse_Bip32Deriv {
	if x != nil {
		return x.Bip32Derivs
	}
	return nil
}

func (x *DecodePsbtResponse_Input) GetFinalScriptsig() *ScriptSig {
	if x != nil {
		return x.FinalScriptsig
	}
	return nil
}

func (x *DecodePsbtResponse_Input) GetFinalScriptwitness() []string {
	if x != nil {
		return x.FinalScriptwitness
	}
	return nil
}

func (x *DecodePsbtResponse_Input) GetUnknown() map[string]string {
	if x != nil {
		return x.Unknown
	}
	return nil
}

type DecodePsbtResponse_Output struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	RedeemScript  *DecodePsbtResponse_RedeemScript `protobuf:"bytes,1,opt,name=redeem_script,json=redeemScript,proto3" json:"redeem_script,omitempty"`
	WitnessScript *DecodePsbtResponse_RedeemScript `protobuf:"bytes,2,opt,name=witness_script,json=witnessScript,proto3" json:"witness_script,omitempty"`
	Bip32Derivs   []*DecodePsbtResponse_Bip32Deriv `protobuf:"bytes,3,rep,name=bip32_derivs,json=bip32Derivs,proto3" json:"bip32_derivs,omitempty"`
	Unknown       map[string]string                `protobuf:"bytes,4,rep,name=unknown,proto3" json:"unknown,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodePsbtResponse_Output) Reset() {
	*x = DecodePsbtResponse_Output{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodePsbtResponse_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodePsbtResponse_Output) ProtoMessage() {}

func (x *DecodePsbtResponse_Output) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodePsbtResponse_Output.ProtoReflect.Descriptor instead.
func (*DecodePsbtResponse_Output) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{86, 4}
}

func (x *DecodePsbtResponse_Output) GetRedeemScript() *DecodePsbtResponse_RedeemScript {
	if x != nil {
		return x.RedeemScript
	}
	return nil
}

func (x *DecodePsbtResponse_Output) GetWitnessScript() *DecodePsbtResponse_RedeemScript {
	if x != nil {
		return x.WitnessScript
	}
	return nil
}

func (x *DecodePsbtResponse_Output) GetBip32Derivs() []*DecodePsbtResponse_Bip32Deriv {
	if x != nil {
		return x.Bip32Derivs
	}
	return nil
}

func (x *DecodePsbtResponse_Output) GetUnknown() map[string]string {
	if x != nil {
		return x.Unknown
	}
	return nil
}

type AnalyzePsbtResponse_Input struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	HasUtxo       bool                               `protobuf:"varint,1,opt,name=has_utxo,json=hasUtxo,proto3" json:"has_utxo,omitempty"`
	IsFinal       bool                               `protobuf:"varint,2,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	Missing       *AnalyzePsbtResponse_Input_Missing `protobuf:"bytes,3,opt,name=missing,proto3" json:"missing,omitempty"`
	Next          string                             `protobuf:"bytes,4,opt,name=next,proto3" json:"next,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzePsbtResponse_Input) Reset() {
	*x = AnalyzePsbtResponse_Input{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzePsbtResponse_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzePsbtResponse_Input) ProtoMessage() {}

func (x *AnalyzePsbtResponse_Input) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzePsbtResponse_Input.ProtoReflect.Descriptor instead.
func (*AnalyzePsbtResponse_Input) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{88, 0}
}

func (x *AnalyzePsbtResponse_Input) GetHasUtxo() bool {
	if x != nil {
		return x.HasUtxo
	}
	return false
}

func (x *AnalyzePsbtResponse_Input) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *AnalyzePsbtResponse_Input) GetMissing() *AnalyzePsbtResponse_Input_Missing {
	if x != nil {
		return x.Missing
	}
	return nil
}

func (x *AnalyzePsbtResponse_Input) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

type AnalyzePsbtResponse_Input_Missing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pubkeys       []string               `protobuf:"bytes,1,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	Signatures    []string               `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	RedeemScript  string                 `protobuf:"bytes,3,opt,name=redeem_script,json=redeemScript,proto3" json:"redeem_script,omitempty"`
	WitnessScript string                 `protobuf:"bytes,4,opt,name=witness_script,json=witnessScript,proto3" json:"witness_script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzePsbtResponse_Input_Missing) Reset() {
	*x = AnalyzePsbtResponse_Input_Missing{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzePsbtResponse_Input_Missing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzePsbtResponse_Input_Missing) ProtoMessage() {}

func (x *AnalyzePsbtResponse_Input_Missing) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzePsbtResponse_Input_Missing.ProtoReflect.Descriptor instead.
func (*AnalyzePsbtResponse_Input_Missing) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{88, 0, 0}
}

func (x *AnalyzePsbtResponse_Input_Missing) GetPubkeys() []string {
	if x != nil {
		return x.Pubkeys
	}
	return nil
}

func (x *AnalyzePsbtResponse_Input_Missing) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *AnalyzePsbtResponse_Input_Missing) GetRedeemScript() string {
	if x != nil {
		return x.RedeemScript
	}
	return ""
}

func (x *AnalyzePsbtResponse_Input_Missing) GetWitnessScript() string {
	if x != nil {
		return x.WitnessScript
	}
	return ""
}

type TestMempoolAcceptResponse_Result struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txid          string                 `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Allowed       bool                   `protobuf:"varint,2,opt,name=allowed,proto3" json:"allowed,omitempty"`
	RejectReason  string                 `protobuf:"bytes,3,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Vsize         uint32                 `protobuf:"varint,4,opt,name=vsize,proto3" json:"vsize,omitempty"`
	Fees          float64                `protobuf:"fixed64,5,opt,name=fees,proto3" json:"fees,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMempoolAcceptResponse_Result) Reset() {
	*x = TestMempoolAcceptResponse_Result{}
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMempoolAcceptResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMempoolAcceptResponse_Result) ProtoMessage() {}

func (x *TestMempoolAcceptResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMempoolAcceptResponse_Result.ProtoReflect.Descriptor instead.
func (*TestMempoolAcceptResponse_Result) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{96, 0}
}

func (x *TestMempoolAcceptResponse_Result) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *TestMempoolAcceptResponse_Result) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *TestMempoolAcceptResponse_Result) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *TestMempoolAcceptResponse_Result) GetVsize() uint32 {
	if x != nil {
		return x.Vsize
	}
	return 0
}

func (x *TestMempoolAcceptResponse_Result) GetFees() float64 {
	if x != nil {
		return x.Fees
	}
	return 0
}

var File_bitcoin_bitcoind_v1alpha_bitcoin_proto protoreflect.FileDescriptor

const file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDesc = "" +
	"\n" +
	"&bitcoin/bitcoind/v1alpha/bitcoin.proto\x12\x18bitcoin.bitcoind.v1alpha\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\x1a\n" +
	"\x18GetBlockchainInfoRequest\"\x95\x02\n" +
	"\x19GetBlockchainInfoResponse\x12&\n" +
	"\x0fbest_block_hash\x18\x01 \x01(\tR\rbestBlockHash\x12\x16\n" +
	"\x06blocks\x18\x05 \x01(\rR\x06blocks\x12\x18\n" +
	"\aheaders\x18\x06 \x01(\rR\aheaders\x12\x14\n" +
	"\x05chain\x18\x02 \x01(\tR\x05chain\x12\x1d\n" +
	"\n" +
	"chain_work\x18\x03 \x01(\tR\tchainWork\x124\n" +
	"\x16initial_block_download\x18\x04 \x01(\bR\x14initialBlockDownload\x123\n" +
	"\x15verification_progress\x18\a \x01(\x01R\x14verificationProgress\"\x14\n" +
	"\x12GetPeerInfoRequest\"\xa2\x14\n" +
	"\x04Peer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x1b\n" +
	"\taddr_bind\x18\x03 \x01(\tR\baddrBind\x12\x1d\n" +
	"\n" +
	"addr_local\x18\x04 \x01(\tR\taddrLocal\x12@\n" +
	"\anetwork\x18\x05 \x01(\x0e2&.bitcoin.bitcoind.v1alpha.Peer.NetworkR\anetwork\x12\x1b\n" +
	"\tmapped_as\x18\x06 \x01(\x03R\bmappedAs\x12\x1a\n" +
	"\bservices\x18\a \x01(\tR\bservices\x12%\n" +
	"\x0eservices_names\x18\b \x03(\tR\rservicesNames\x12-\n" +
	"\x12relay_transactions\x18\t \x01(\bR\x11relayTransactions\x12<\n" +
	"\flast_send_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"lastSendAt\x12<\n" +
	"\flast_recv_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"lastRecvAt\x12J\n" +
	"\x13last_transaction_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\x11lastTransactionAt\x12>\n" +
	"\rlast_block_at\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\vlastBlockAt\x12\x1d\n" +
	"\n" +
	"bytes_sent\x18\x0e \x01(\x04R\tbytesSent\x12%\n" +
	"\x0ebytes_received\x18\x0f \x01(\x04R\rbytesReceived\x12=\n" +
	"\fconnected_at\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\vconnectedAt\x12:\n" +
	"\vtime_offset\x18\x11 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"timeOffset\x126\n" +
	"\tping_time\x18\x12 \x01(\v2\x19.google.protobuf.DurationR\bpingTime\x124\n" +
	"\bmin_ping\x18\x13 \x01(\v2\x19.google.protobuf.DurationR\aminPing\x126\n" +
	"\tping_wait\x18\x14 \x01(\v2\x19.google.protobuf.DurationR\bpingWait\x12\x18\n" +
	"\aversion\x18\x15 \x01(\rR\aversion\x12\x16\n" +
	"\x06subver\x18\x16 \x01(\tR\x06subver\x12\x18\n" +
	"\ainbound\x18\x17 \x01(\bR\ainbound\x12 \n" +
	"\fbip152_hb_to\x18\x18 \x01(\bR\n" +
	"bip152HbTo\x12$\n" +
	"\x0ebip152_hb_from\x18\x19 \x01(\bR\fbip152HbFrom\x12'\n" +
	"\x0fstarting_height\x18\x1a \x01(\x05R\x0estartingHeight\x12+\n" +
	"\x11presynced_headers\x18\x1b \x01(\x05R\x10presyncedHeaders\x12%\n" +
	"\x0esynced_headers\x18\x1c \x01(\x05R\rsyncedHeaders\x12#\n" +
	"\rsynced_blocks\x18\x1d \x01(\x05R\fsyncedBlocks\x12\x1a\n" +
	"\binflight\x18\x1e \x03(\x05R\binflight\x12,\n" +
	"\x12addr_relay_enabled\x18\x1f \x01(\bR\x10addrRelayEnabled\x12%\n" +
	"\x0eaddr_processed\x18  \x01(\x03R\raddrProcessed\x12*\n" +
	"\x11addr_rate_limited\x18! \x01(\x03R\x0faddrRateLimited\x12 \n" +
	"\vpermissions\x18\" \x03(\tR\vpermissions\x12$\n" +
	"\x0emin_fee_filter\x18# \x01(\x01R\fminFeeFilter\x12`\n" +
	"\x12bytes_sent_per_msg\x18$ \x03(\v23.bitcoin.bitcoind.v1alpha.Peer.BytesSentPerMsgEntryR\x0fbytesSentPerMsg\x12l\n" +
	"\x16bytes_received_per_msg\x18% \x03(\v27.bitcoin.bitcoind.v1alpha.Peer.BytesReceivedPerMsgEntryR\x13bytesReceivedPerMsg\x12V\n" +
	"\x0fconnection_type\x18& \x01(\x0e2-.bitcoin.bitcoind.v1alpha.Peer.ConnectionTypeR\x0econnectionType\x12_\n" +
	"\x12transport_protocol\x18' \x01(\x0e20.bitcoin.bitcoind.v1alpha.Peer.TransportProtocolR\x11transportProtocol\x12\x1d\n" +
	"\n" +
	"session_id\x18( \x01(\tR\tsessionId\x1aB\n" +
	"\x14BytesSentPerMsgEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1aF\n" +
	"\x18BytesReceivedPerMsgEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xa0\x01\n" +
	"\aNetwork\x12\x17\n" +
	"\x13NETWORK_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fNETWORK_IPV4\x10\x01\x12\x10\n" +
	"\fNETWORK_IPV6\x10\x02\x12\x11\n" +
	"\rNETWORK_ONION\x10\x03\x12\x0f\n" +
	"\vNETWORK_I2P\x10\x04\x12\x11\n" +
	"\rNETWORK_CJDNS\x10\x05\x12!\n" +
	"\x1dNETWORK_NOT_PUBLICLY_ROUTABLE\x10\x06\"\xf5\x01\n" +
	"\x0eConnectionType\x12\x1f\n" +
	"\x1bCONNECTION_TYPE_UNSPECIFIED\x10\x00\x12'\n" +
	"#CONNECTION_TYPE_OUTBOUND_FULL_RELAY\x10\x01\x12$\n" +
	" CONNECTION_TYPE_BLOCK_RELAY_ONLY\x10\x02\x12\x1b\n" +
	"\x17CONNECTION_TYPE_INBOUND\x10\x03\x12\x1a\n" +
	"\x16CONNECTION_TYPE_MANUAL\x10\x04\x12\x1e\n" +
	"\x1aCONNECTION_TYPE_ADDR_FETCH\x10\x05\x12\x1a\n" +
	"\x16CONNECTION_TYPE_FEEDER\x10\x06\"\x8f\x01\n" +
	"\x11TransportProtocol\x12\"\n" +
	"\x1eTRANSPORT_PROTOCOL_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cTRANSPORT_PROTOCOL_DETECTING\x10\x01\x12\x19\n" +
	"\x15TRANSPORT_PROTOCOL_V1\x10\x02\x12\x19\n" +
	"\x15TRANSPORT_PROTOCOL_V2\x10\x03\"K\n" +
	"\x13GetPeerInfoResponse\x124\n" +
	"\x05peers\x18\x01 \x03(\v2\x1e.bitcoin.bitcoind.v1alpha.PeerR\x05peers\"g\n" +
	"\x14GetNewAddressRequest\x12\x14\n" +
	"\x05label\x18\x01 \x01(\tR\x05label\x12!\n" +
	"\faddress_type\x18\x02 \x01(\tR\vaddressType\x12\x16\n" +
	"\x06wallet\x18\x03 \x01(\tR\x06wallet\"1\n" +
	"\x15GetNewAddressResponse\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\".\n" +
	"\x14GetWalletInfoRequest\x12\x16\n" +
	"\x06wallet\x18\x01 \x01(\tR\x06wallet\"\xee\x03\n" +
	"\x15GetWalletInfoResponse\x12\x1f\n" +
	"\vwallet_name\x18\x01 \x01(\tR\n" +
	"walletName\x12%\n" +
	"\x0ewallet_version\x18\x02 \x01(\x03R\rwalletVersion\x12\x16\n" +
	"\x06format\x18\x03 \x01(\tR\x06format\x12\x19\n" +
	"\btx_count\x18\a \x01(\x03R\atxCount\x12\"\n" +
	"\rkey_pool_size\x18\b \x01(\x03R\vkeyPoolSize\x128\n" +
	"\x19key_pool_size_hd_internal\x18\t \x01(\x03R\x15keyPoolSizeHdInternal\x12\x1c\n" +
	"\n" +
	"pay_tx_fee\x18\n" +
	" \x01(\x01R\bpayTxFee\x120\n" +
	"\x14private_keys_enabled\x18\v \x01(\bR\x12privateKeysEnabled\x12\x1f\n" +
	"\vavoid_reuse\x18\f \x01(\bR\n" +
	"avoidReuse\x12@\n" +
	"\bscanning\x18\r \x01(\v2$.bitcoin.bitcoind.v1alpha.WalletScanR\bscanning\x12 \n" +
	"\vdescriptors\x18\x0e \x01(\bR\vdescriptors\x12'\n" +
	"\x0fexternal_signer\x18\x0f \x01(\bR\x0eexternalSigner\",\n" +
	"\x12GetBalancesRequest\x12\x16\n" +
	"\x06wallet\x18\x01 \x01(\tR\x06wallet\"\xa3\x03\n" +
	"\x13GetBalancesResponse\x12F\n" +
	"\x04mine\x18\x01 \x01(\v22.bitcoin.bitcoind.v1alpha.GetBalancesResponse.MineR\x04mine\x12U\n" +
	"\twatchonly\x18\x02 \x01(\v27.bitcoin.bitcoind.v1alpha.GetBalancesResponse.WatchonlyR\twatchonly\x1a}\n" +
	"\x04Mine\x12\x18\n" +
	"\atrusted\x18\x01 \x01(\x01R\atrusted\x12+\n" +
	"\x11untrusted_pending\x18\x02 \x01(\x01R\x10untrustedPending\x12\x1a\n" +
	"\bimmature\x18\x03 \x01(\x01R\bimmature\x12\x12\n" +
	"\x04used\x18\x04 \x01(\x01R\x04used\x1an\n" +
	"\tWatchonly\x12\x18\n" +
	"\atrusted\x18\x01 \x01(\x01R\atrusted\x12+\n" +
	"\x11untrusted_pending\x18\x02 \x01(\x01R\x10untrustedPending\x12\x1a\n" +
	"\bimmature\x18\x03 \x01(\x01R\bimmature\"D\n" +
	"\n" +
	"WalletScan\x12\x1a\n" +
	"\bduration\x18\x01 \x01(\x03R\bduration\x12\x1a\n" +
	"\bprogress\x18\x02 \x01(\x01R\bprogress\"\x8a\x01\n" +
	"\x15GetTransactionRequest\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12+\n" +
	"\x11include_watchonly\x18\x02 \x01(\bR\x10includeWatchonly\x12\x18\n" +
	"\averbose\x18\x03 \x01(\bR\averbose\x12\x16\n" +
	"\x06wallet\x18\x04 \x01(\tR\x06wallet\"\x88\t\n" +
	"\x16GetTransactionResponse\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\x01R\x06amount\x12\x10\n" +
	"\x03fee\x18\x02 \x01(\x01R\x03fee\x12$\n" +
	"\rconfirmations\x18\x03 \x01(\x05R\rconfirmations\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x06 \x01(\tR\tblockHash\x12\x1f\n" +
	"\vblock_index\x18\b \x01(\rR\n" +
	"blockIndex\x129\n" +
	"\n" +
	"block_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tblockTime\x12\x12\n" +
	"\x04txid\x18\n" +
	" \x01(\tR\x04txid\x12)\n" +
	"\x10wallet_conflicts\x18\f \x03(\tR\x0fwalletConflicts\x12(\n" +
	"\x10replaced_by_txid\x18\r \x01(\tR\x0ereplacedByTxid\x12#\n" +
	"\rreplaces_txid\x18\x0e \x01(\tR\freplacesTxid\x12.\n" +
	"\x04time\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12?\n" +
	"\rtime_received\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampR\ftimeReceived\x12k\n" +
	"\x12bip125_replaceable\x18\x13 \x01(\x0e2<.bitcoin.bitcoind.v1alpha.GetTransactionResponse.ReplaceableR\x11bip125Replaceable\x12R\n" +
	"\adetails\x18\x15 \x03(\v28.bitcoin.bitcoind.v1alpha.GetTransactionResponse.DetailsR\adetails\x12\x10\n" +
	"\x03hex\x18\x16 \x01(\tR\x03hex\x1a\xe8\x01\n" +
	"\aDetails\x12.\n" +
	"\x13involves_watch_only\x18\x01 \x01(\bR\x11involvesWatchOnly\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12U\n" +
	"\bcategory\x18\x03 \x01(\x0e29.bitcoin.bitcoind.v1alpha.GetTransactionResponse.CategoryR\bcategory\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x01R\x06amount\x12\x12\n" +
	"\x04vout\x18\x06 \x01(\rR\x04vout\x12\x10\n" +
	"\x03fee\x18\a \x01(\x01R\x03fee\"S\n" +
	"\vReplaceable\x12\x1b\n" +
	"\x17REPLACEABLE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fREPLACEABLE_YES\x10\x01\x12\x12\n" +
	"\x0eREPLACEABLE_NO\x10\x02\"\x90\x01\n" +
	"\bCategory\x12\x18\n" +
	"\x14CATEGORY_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rCATEGORY_SEND\x10\x01\x12\x14\n" +
	"\x10CATEGORY_RECEIVE\x10\x02\x12\x15\n" +
	"\x11CATEGORY_GENERATE\x10\x03\x12\x15\n" +
	"\x11CATEGORY_IMMATURE\x10\x04\x12\x13\n" +
	"\x0fCATEGORY_ORPHAN\x10\x05\"H\n" +
	"\x18GetRawTransactionRequest\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12\x18\n" +
	"\averbose\x18\x02 \x01(\bR\averbose\"/\n" +
	"\tScriptSig\x12\x10\n" +
	"\x03asm\x18\x01 \x01(\tR\x03asm\x12\x10\n" +
	"\x03hex\x18\x02 \x01(\tR\x03hex\"\xc5\x01\n" +
	"\x05Input\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12\x12\n" +
	"\x04vout\x18\x02 \x01(\rR\x04vout\x12\x1a\n" +
	"\bcoinbase\x18\x03 \x01(\tR\bcoinbase\x12B\n" +
	"\n" +
	"script_sig\x18\x04 \x01(\v2#.bitcoin.bitcoind.v1alpha.ScriptSigR\tscriptSig\x12\x1a\n" +
	"\bsequence\x18\x05 \x01(\rR\bsequence\x12\x18\n" +
	"\awitness\x18\x06 \x03(\tR\awitness\"\x99\x01\n" +
	"\fScriptPubKey\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x10\n" +
	"\x03asm\x18\x03 \x01(\tR\x03asm\x12\x10\n" +
	"\x03hex\x18\x04 \x01(\tR\x03hex\x12\x1c\n" +
	"\taddresses\x18\x05 \x03(\tR\taddresses\x12\x19\n" +
	"\breq_sigs\x18\x06 \x01(\rR\areqSigs\"\xc6\x01\n" +
	"\x06Output\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\x01R\x06amount\x12\x12\n" +
	"\x04vout\x18\x02 \x01(\rR\x04vout\x12L\n" +
	"\x0escript_pub_key\x18\x03 \x01(\v2&.bitcoin.bitcoind.v1alpha.ScriptPubKeyR\fscriptPubKey\x12B\n" +
	"\n" +
	"script_sig\x18\x04 \x01(\v2#.bitcoin.bitcoind.v1alpha.ScriptSigR\tscriptSig\"\xe0\x03\n" +
	"\x19GetRawTransactionResponse\x128\n" +
	"\x02tx\x18\x01 \x01(\v2(.bitcoin.bitcoind.v1alpha.RawTransactionR\x02tx\x12\x12\n" +
	"\x04txid\x18\b \x01(\tR\x04txid\x12\x12\n" +
	"\x04hash\x18\t \x01(\tR\x04hash\x12\x12\n" +
	"\x04size\x18\n" +
	" \x01(\x05R\x04size\x12\x14\n" +
	"\x05vsize\x18\v \x01(\x05R\x05vsize\x12\x16\n" +
	"\x06weight\x18\f \x01(\x05R\x06weight\x12\x18\n" +
	"\aversion\x18\r \x01(\rR\aversion\x12\x1a\n" +
	"\blocktime\x18\x0e \x01(\rR\blocktime\x127\n" +
	"\x06inputs\x18\x02 \x03(\v2\x1f.bitcoin.bitcoind.v1alpha.InputR\x06inputs\x12:\n" +
	"\aoutputs\x18\x03 \x03(\v2 .bitcoin.bitcoind.v1alpha.OutputR\aoutputs\x12\x1c\n" +
	"\tblockhash\x18\x04 \x01(\tR\tblockhash\x12$\n" +
	"\rconfirmations\x18\x05 \x01(\rR\rconfirmations\x12\x12\n" +
	"\x04time\x18\x06 \x01(\x03R\x04time\x12\x1c\n" +
	"\tblocktime\x18\a \x01(\x03R\tblocktime\"\xa1\x03\n" +
	"\vSendRequest\x12[\n" +
	"\fdestinations\x18\x01 \x03(\v27.bitcoin.bitcoind.v1alpha.SendRequest.DestinationsEntryR\fdestinations\x12\x1f\n" +
	"\vconf_target\x18\x02 \x01(\rR\n" +
	"confTarget\x12\x16\n" +
	"\x06wallet\x18\x03 \x01(\tR\x06wallet\x12%\n" +
	"\x0einclude_unsafe\x18\x04 \x01(\bR\rincludeUnsafe\x129\n" +
	"\x19subtract_fee_from_outputs\x18\x05 \x03(\tR\x16subtractFeeFromOutputs\x12>\n" +
	"\radd_to_wallet\x18\x06 \x01(\v2\x1a.google.protobuf.BoolValueR\vaddToWallet\x12\x19\n" +
	"\bfee_rate\x18\a \x01(\x01R\afeeRate\x1a?\n" +
	"\x11DestinationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"x\n" +
	"\fSendResponse\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12\x1a\n" +
	"\bcomplete\x18\x02 \x01(\bR\bcomplete\x128\n" +
	"\x02tx\x18\x03 \x01(\v2(.bitcoin.bitcoind.v1alpha.RawTransactionR\x02tx\"\x99\x01\n" +
	"\x14SendToAddressRequest\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x01R\x06amount\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\x12\x1d\n" +
	"\n" +
	"comment_to\x18\x04 \x01(\tR\tcommentTo\x12\x16\n" +
	"\x06wallet\x18\x05 \x01(\tR\x06wallet\"+\n" +
	"\x15SendToAddressResponse\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\"\x8c\x02\n" +
	"\x17EstimateSmartFeeRequest\x12\x1f\n" +
	"\vconf_target\x18\x01 \x01(\x03R\n" +
	"confTarget\x12c\n" +
	"\restimate_mode\x18\x02 \x01(\x0e2>.bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest.EstimateModeR\festimateMode\"k\n" +
	"\fEstimateMode\x12\x1d\n" +
	"\x19ESTIMATE_MODE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18ESTIMATE_MODE_ECONOMICAL\x10\x01\x12\x1e\n" +
	"\x1aESTIMATE_MODE_CONSERVATIVE\x10\x02\"e\n" +
	"\x18EstimateSmartFeeResponse\x12\x19\n" +
	"\bfee_rate\x18\x01 \x01(\x01R\afeeRate\x12\x16\n" +
	"\x06errors\x18\x02 \x03(\tR\x06errors\x12\x16\n" +
	"\x06blocks\x18\x03 \x01(\x03R\x06blocks\"W\n" +
	"\x1bDecodeRawTransactionRequest\x128\n" +
	"\x02tx\x18\x01 \x01(\v2(.bitcoin.bitcoind.v1alpha.RawTransactionR\x02tx\"6\n" +
	"\x0eRawTransaction\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x10\n" +
	"\x03hex\x18\x02 \x01(\tR\x03hex\"\xc0\x02\n" +
	"\x1cDecodeRawTransactionResponse\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12\x12\n" +
	"\x04hash\x18\x02 \x01(\tR\x04hash\x12\x12\n" +
	"\x04size\x18\x03 \x01(\rR\x04size\x12!\n" +
	"\fvirtual_size\x18\x04 \x01(\rR\vvirtualSize\x12\x16\n" +
	"\x06weight\x18\x05 \x01(\rR\x06weight\x12\x18\n" +
	"\aversion\x18\x06 \x01(\rR\aversion\x12\x1a\n" +
	"\blocktime\x18\a \x01(\rR\blocktime\x127\n" +
	"\x06inputs\x18\b \x03(\v2\x1f.bitcoin.bitcoind.v1alpha.InputR\x06inputs\x12:\n" +
	"\aoutputs\x18\t \x03(\v2 .bitcoin.bitcoind.v1alpha.OutputR\aoutputs\"\xf8\x02\n" +
	"\x18ImportDescriptorsRequest\x12\x16\n" +
	"\x06wallet\x18\x01 \x01(\tR\x06wallet\x12V\n" +
	"\brequests\x18\x02 \x03(\v2:.bitcoin.bitcoind.v1alpha.ImportDescriptorsRequest.RequestR\brequests\x1a\xeb\x01\n" +
	"\aRequest\x12\x1e\n" +
	"\n" +
	"descriptor\x18\x01 \x01(\tR\n" +
	"descriptor\x12\x16\n" +
	"\x06active\x18\x02 \x01(\bR\x06active\x12\x1f\n" +
	"\vrange_start\x18\x03 \x01(\rR\n" +
	"rangeStart\x12\x1b\n" +
	"\trange_end\x18\x04 \x01(\rR\brangeEnd\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1a\n" +
	"\binternal\x18\x06 \x01(\bR\binternal\x12\x14\n" +
	"\x05label\x18\a \x01(\tR\x05label\"\xc2\x02\n" +
	"\x19ImportDescriptorsResponse\x12Z\n" +
	"\tresponses\x18\x01 \x03(\v2<.bitcoin.bitcoind.v1alpha.ImportDescriptorsResponse.ResponseR\tresponses\x1a5\n" +
	"\x05Error\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x1a\x91\x01\n" +
	"\bResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1a\n" +
	"\bwarnings\x18\x02 \x03(\tR\bwarnings\x12O\n" +
	"\x05error\x18\x03 \x01(\v29.bitcoin.bitcoind.v1alpha.ImportDescriptorsResponse.ErrorR\x05error\":\n" +
	"\x18GetDescriptorInfoRequest\x12\x1e\n" +
	"\n" +
	"descriptor\x18\x01 \x01(\tR\n" +
	"descriptor\"\xbd\x01\n" +
	"\x19GetDescriptorInfoResponse\x12\x1e\n" +
	"\n" +
	"descriptor\x18\x01 \x01(\tR\n" +
	"descriptor\x12\x1a\n" +
	"\bchecksum\x18\x02 \x01(\tR\bchecksum\x12\x19\n" +
	"\bis_range\x18\x03 \x01(\bR\aisRange\x12\x1f\n" +
	"\vis_solvable\x18\x04 \x01(\bR\n" +
	"isSolvable\x12(\n" +
	"\x10has_private_keys\x18\x05 \x01(\bR\x0ehasPrivateKeys\"\xbd\x02\n" +
	"\x0fGetBlockRequest\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\x12\x1b\n" +
	"\x06height\x18\x03 \x01(\x05H\x00R\x06height\x88\x01\x01\x12Q\n" +
	"\tverbosity\x18\x02 \x01(\x0e23.bitcoin.bitcoind.v1alpha.GetBlockRequest.VerbosityR\tverbosity\"\x9a\x01\n" +
	"\tVerbosity\x12\x19\n" +
	"\x15VERBOSITY_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12VERBOSITY_RAW_DATA\x10\x01\x12\x18\n" +
	"\x14VERBOSITY_BLOCK_INFO\x10\x02\x12\x1b\n" +
	"\x17VERBOSITY_BLOCK_TX_INFO\x10\x03\x12#\n" +
	"\x1fVERBOSITY_BLOCK_TX_PREVOUT_INFO\x10\x04B\t\n" +
	"\a_height\"\x8b\x04\n" +
	"\x10GetBlockResponse\x12\x10\n" +
	"\x03hex\x18\x01 \x01(\tR\x03hex\x12\x12\n" +
	"\x04hash\x18\x02 \x01(\tR\x04hash\x12$\n" +
	"\rconfirmations\x18\x03 \x01(\x05R\rconfirmations\x12\x16\n" +
	"\x06height\x18\x04 \x01(\rR\x06height\x12\x18\n" +
	"\aversion\x18\x05 \x01(\x05R\aversion\x12\x1f\n" +
	"\vversion_hex\x18\x06 \x01(\tR\n" +
	"versionHex\x12\x1f\n" +
	"\vmerkle_root\x18\a \x01(\tR\n" +
	"merkleRoot\x12.\n" +
	"\x04time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12\x14\n" +
	"\x05nonce\x18\t \x01(\rR\x05nonce\x12\x12\n" +
	"\x04bits\x18\n" +
	" \x01(\tR\x04bits\x12\x1e\n" +
	"\n" +
	"difficulty\x18\v \x01(\x01R\n" +
	"difficulty\x12.\n" +
	"\x13previous_block_hash\x18\f \x01(\tR\x11previousBlockHash\x12&\n" +
	"\x0fnext_block_hash\x18\r \x01(\tR\rnextBlockHash\x12#\n" +
	"\rstripped_size\x18\x0e \x01(\x05R\fstrippedSize\x12\x12\n" +
	"\x04size\x18\x0f \x01(\x05R\x04size\x12\x16\n" +
	"\x06weight\x18\x10 \x01(\x05R\x06weight\x12\x14\n" +
	"\x05txids\x18\x11 \x03(\tR\x05txids\"<\n" +
	"\x0eBumpFeeRequest\x12\x16\n" +
	"\x06wallet\x18\x01 \x01(\tR\x06wallet\x12\x12\n" +
	"\x04txid\x18\x02 \x01(\tR\x04txid\"y\n" +
	"\x0fBumpFeeResponse\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12!\n" +
	"\foriginal_fee\x18\x02 \x01(\x01R\voriginalFee\x12\x17\n" +
	"\anew_fee\x18\x03 \x01(\x01R\x06newFee\x12\x16\n" +
	"\x06errors\x18\x04 \x03(\tR\x06errors\"C\n" +
	"\x15ListSinceBlockRequest\x12\x16\n" +
	"\x06wallet\x18\x01 \x01(\tR\x06wallet\x12\x12\n" +
	"\x04hash\x18\x02 \x01(\tR\x04hash\"n\n" +
	"\x16ListSinceBlockResponse\x12T\n" +
	"\ftransactions\x18\x01 \x03(\v20.bitcoin.bitcoind.v1alpha.GetTransactionResponseR\ftransactions\"0\n" +
	"\x14GetRawMempoolRequest\x12\x18\n" +
	"\averbose\x18\x01 \x01(\bR\averbose\"\xf7\x04\n" +
	"\fMempoolEntry\x12!\n" +
	"\fvirtual_size\x18\x01 \x01(\rR\vvirtualSize\x12\x16\n" +
	"\x06weight\x18\x02 \x01(\rR\x06weight\x12.\n" +
	"\x04time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12)\n" +
	"\x10descendant_count\x18\x04 \x01(\rR\x0fdescendantCount\x12'\n" +
	"\x0fdescendant_size\x18\x05 \x01(\rR\x0edescendantSize\x12%\n" +
	"\x0eancestor_count\x18\x06 \x01(\rR\rancestorCount\x12#\n" +
	"\rancestor_size\x18\a \x01(\rR\fancestorSize\x12!\n" +
	"\fwitness_txid\x18\b \x01(\tR\vwitnessTxid\x12?\n" +
	"\x04fees\x18\t \x01(\v2+.bitcoin.bitcoind.v1alpha.MempoolEntry.FeesR\x04fees\x12\x18\n" +
	"\adepends\x18\n" +
	" \x03(\tR\adepends\x12\x19\n" +
	"\bspent_by\x18\v \x03(\tR\aspentBy\x12-\n" +
	"\x12bip125_replaceable\x18\f \x01(\bR\x11bip125Replaceable\x12 \n" +
	"\vunbroadcast\x18\r \x01(\bR\vunbroadcast\x1ar\n" +
	"\x04Fees\x12\x12\n" +
	"\x04base\x18\x01 \x01(\x01R\x04base\x12\x1a\n" +
	"\bmodified\x18\x02 \x01(\x01R\bmodified\x12\x1a\n" +
	"\bancestor\x18\x03 \x01(\x01R\bancestor\x12\x1e\n" +
	"\n" +
	"descendant\x18\x04 \x01(\x01R\n" +
	"descendant\"\xfd\x01\n" +
	"\x15GetRawMempoolResponse\x12\x14\n" +
	"\x05txids\x18\x01 \x03(\tR\x05txids\x12e\n" +
	"\ftransactions\x18\x02 \x03(\v2A.bitcoin.bitcoind.v1alpha.GetRawMempoolResponse.TransactionsEntryR\ftransactions\x1ag\n" +
	"\x11TransactionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12<\n" +
	"\x05value\x18\x02 \x01(\v2&.bitcoin.bitcoind.v1alpha.MempoolEntryR\x05value:\x028\x01\"-\n" +
	"\x13GetBlockHashRequest\x12\x16\n" +
	"\x06height\x18\x01 \x01(\rR\x06height\"*\n" +
	"\x14GetBlockHashResponse\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\"[\n" +
	"\x17ListTransactionsRequest\x12\x16\n" +
	"\x06wallet\x18\x01 \x01(\tR\x06wallet\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\x12\x12\n" +
	"\x04skip\x18\x03 \x01(\rR\x04skip\"p\n" +
	"\x18ListTransactionsResponse\x12T\n" +
	"\ftransactions\x18\x01 \x03(\v20.bitcoin.bitcoind.v1alpha.GetTransactionResponseR\ftransactions\"/\n" +
	"\x13ListWalletsResponse\x12\x18\n" +
	"\awallets\x18\x01 \x03(\tR\awallets\"I\n" +
	"\x15GetAddressInfoRequest\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x16\n" +
	"\x06wallet\x18\x02 \x01(\tR\x06wallet\"\xa2\x03\n" +
	"\x16GetAddressInfoResponse\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12$\n" +
	"\x0escript_pub_key\x18\x02 \x01(\tR\fscriptPubKey\x12\x17\n" +
	"\ais_mine\x18\x03 \x01(\bR\x06isMine\x12\"\n" +
	"\ris_watch_only\x18\x04 \x01(\bR\visWatchOnly\x12\x1a\n" +
	"\bsolvable\x18\x05 \x01(\bR\bsolvable\x12\x1b\n" +
	"\tis_script\x18\x06 \x01(\bR\bisScript\x12\x1b\n" +
	"\tis_change\x18\a \x01(\bR\bisChange\x12\x1d\n" +
	"\n" +
	"is_witness\x18\b \x01(\bR\tisWitness\x12'\n" +
	"\x0fwitness_version\x18\t \x01(\rR\x0ewitnessVersion\x12'\n" +
	"\x0fwitness_program\x18\n" +
	" \x01(\tR\x0ewitnessProgram\x12\x1f\n" +
	"\vscript_type\x18\v \x01(\tR\n" +
	"scriptType\x12#\n" +
	"\ris_compressed\x18\f \x01(\bR\fisCompressed\"\xb2\x01\n" +
	"\x13CreateWalletRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x120\n" +
	"\x14disable_private_keys\x18\x02 \x01(\bR\x12disablePrivateKeys\x12\x14\n" +
	"\x05blank\x18\x03 \x01(\bR\x05blank\x12\x1e\n" +
	"\n" +
	"passphrase\x18\x04 \x01(\tR\n" +
	"passphrase\x12\x1f\n" +
	"\vavoid_reuse\x18\x05 \x01(\bR\n" +
	"avoidReuse\"D\n" +
	"\x14CreateWalletResponse\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\awarning\x18\x02 \x01(\tR\awarning\"O\n" +
	"\x13BackupWalletRequest\x12 \n" +
	"\vdestination\x18\x01 \x01(\tR\vdestination\x12\x16\n" +
	"\x06wallet\x18\x02 \x01(\tR\x06wallet\"\x16\n" +
	"\x14BackupWalletResponse\"G\n" +
	"\x11DumpWalletRequest\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x16\n" +
	"\x06wallet\x18\x02 \x01(\tR\x06wallet\"0\n" +
	"\x12DumpWalletResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\"I\n" +
	"\x13ImportWalletRequest\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x16\n" +
	"\x06wallet\x18\x02 \x01(\tR\x06wallet\"\x16\n" +
	"\x14ImportWalletResponse\"N\n" +
	"\x13UnloadWalletRequest\x12\x1f\n" +
	"\vwallet_name\x18\x01 \x01(\tR\n" +
	"walletName\x12\x16\n" +
	"\x06wallet\x18\x02 \x01(\tR\x06wallet\"\x16\n" +
	"\x14UnloadWalletResponse\"F\n" +
	"\x12DumpPrivKeyRequest\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x16\n" +
	"\x06wallet\x18\x02 \x01(\tR\x06wallet\"6\n" +
	"\x13DumpPrivKeyResponse\x12\x1f\n" +
	"\vprivate_key\x18\x01 \x01(\tR\n" +
	"privateKey\"}\n" +
	"\x14ImportPrivKeyRequest\x12\x1f\n" +
	"\vprivate_key\x18\x01 \x01(\tR\n" +
	"privateKey\x12\x14\n" +
	"\x05label\x18\x02 \x01(\tR\x05label\x12\x16\n" +
	"\x06rescan\x18\x03 \x01(\bR\x06rescan\x12\x16\n" +
	"\x06wallet\x18\x04 \x01(\tR\x06wallet\"\x17\n" +
	"\x15ImportPrivKeyResponse\"v\n" +
	"\x14ImportAddressRequest\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x14\n" +
	"\x05label\x18\x02 \x01(\tR\x05label\x12\x16\n" +
	"\x06rescan\x18\x03 \x01(\bR\x06rescan\x12\x16\n" +
	"\x06wallet\x18\x04 \x01(\tR\x06wallet\"\x17\n" +
	"\x15ImportAddressResponse\"]\n" +
	"\x13ImportPubKeyRequest\x12\x16\n" +
	"\x06pubkey\x18\x01 \x01(\tR\x06pubkey\x12\x16\n" +
	"\x06rescan\x18\x02 \x01(\bR\x06rescan\x12\x16\n" +
	"\x06wallet\x18\x03 \x01(\tR\x06wallet\"\x16\n" +
	"\x14ImportPubKeyResponse\"I\n" +
	"\x14KeyPoolRefillRequest\x12\x19\n" +
	"\bnew_size\x18\x01 \x01(\rR\anewSize\x12\x16\n" +
	"\x06wallet\x18\x02 \x01(\tR\x06wallet\"\x17\n" +
	"\x15KeyPoolRefillResponse\"E\n" +
	"\x11GetAccountRequest\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x16\n" +
	"\x06wallet\x18\x02 \x01(\tR\x06wallet\".\n" +
	"\x12GetAccountResponse\x12\x18\n" +
	"\aaccount\x18\x01 \x01(\tR\aaccount\"_\n" +
	"\x11SetAccountRequest\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x18\n" +
	"\aaccount\x18\x02 \x01(\tR\aaccount\x12\x16\n" +
	"\x06wallet\x18\x03 \x01(\tR\x06wallet\"\x14\n" +
	"\x12SetAccountResponse\"P\n" +
	"\x1cGetAddressesByAccountRequest\x12\x18\n" +
	"\aaccount\x18\x01 \x01(\tR\aaccount\x12\x16\n" +
	"\x06wallet\x18\x02 \x01(\tR\x06wallet\"=\n" +
	"\x1dGetAddressesByAccountResponse\x12\x1c\n" +
	"\taddresses\x18\x01 \x03(\tR\taddresses\"H\n" +
	"\x13ListAccountsRequest\x12\x19\n" +
	"\bmin_conf\x18\x01 \x01(\x05R\aminConf\x12\x16\n" +
	"\x06wallet\x18\x02 \x01(\tR\x06wallet\"\xad\x01\n" +
	"\x14ListAccountsResponse\x12X\n" +
	"\baccounts\x18\x01 \x03(\v2<.bitcoin.bitcoind.v1alpha.ListAccountsResponse.AccountsEntryR\baccounts\x1a;\n" +
	"\rAccountsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"\x82\x01\n" +
	"\x19AddMultisigAddressRequest\x12#\n" +
	"\rrequired_sigs\x18\x01 \x01(\x05R\frequiredSigs\x12\x12\n" +
	"\x04keys\x18\x02 \x03(\tR\x04keys\x12\x14\n" +
	"\x05label\x18\x03 \x01(\tR\x05label\x12\x16\n" +
	"\x06wallet\x18\x04 \x01(\tR\x06wallet\"6\n" +
	"\x1aAddMultisigAddressResponse\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\"P\n" +
	"\x15CreateMultisigRequest\x12#\n" +
	"\rrequired_sigs\x18\x01 \x01(\x05R\frequiredSigs\x12\x12\n" +
	"\x04keys\x18\x02 \x03(\tR\x04keys\"W\n" +
	"\x16CreateMultisigResponse\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12#\n" +
	"\rredeem_script\x18\x02 \x01(\tR\fredeemScript\"\xf5\x02\n" +
	"\x1bCreateRawTransactionRequest\x12S\n" +
	"\x06inputs\x18\x01 \x03(\v2;.bitcoin.bitcoind.v1alpha.CreateRawTransactionRequest.InputR\x06inputs\x12\\\n" +
	"\aoutputs\x18\x02 \x03(\v2B.bitcoin.bitcoind.v1alpha.CreateRawTransactionRequest.OutputsEntryR\aoutputs\x12\x1a\n" +
	"\blocktime\x18\x03 \x01(\rR\blocktime\x1aK\n" +
	"\x05Input\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12\x12\n" +
	"\x04vout\x18\x02 \x01(\rR\x04vout\x12\x1a\n" +
	"\bsequence\x18\x03 \x01(\rR\bsequence\x1a:\n" +
	"\fOutputsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"X\n" +
	"\x1cCreateRawTransactionResponse\x128\n" +
	"\x02tx\x18\x01 \x01(\v2(.bitcoin.bitcoind.v1alpha.RawTransactionR\x02tx\"\xf9\x02\n" +
	"\x11CreatePsbtRequest\x12I\n" +
	"\x06inputs\x18\x01 \x03(\v21.bitcoin.bitcoind.v1alpha.CreatePsbtRequest.InputR\x06inputs\x12R\n" +
	"\aoutputs\x18\x02 \x03(\v28.bitcoin.bitcoind.v1alpha.CreatePsbtRequest.OutputsEntryR\aoutputs\x12\x1a\n" +
	"\blocktime\x18\x03 \x01(\rR\blocktime\x12 \n" +
	"\vreplaceable\x18\x04 \x01(\bR\vreplaceable\x1aK\n" +
	"\x05Input\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12\x12\n" +
	"\x04vout\x18\x02 \x01(\rR\x04vout\x12\x1a\n" +
	"\bsequence\x18\x03 \x01(\rR\bsequence\x1a:\n" +
	"\fOutputsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"(\n" +
	"\x12CreatePsbtResponse\x12\x12\n" +
	"\x04psbt\x18\x01 \x01(\tR\x04psbt\"'\n" +
	"\x11DecodePsbtRequest\x12\x12\n" +
	"\x04psbt\x18\x01 \x01(\tR\x04psbt\"\xd8\x10\n" +
	"\x12DecodePsbtResponse\x12F\n" +
	"\x02tx\x18\x01 \x01(\v26.bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponseR\x02tx\x12S\n" +
	"\aunknown\x18\x02 \x03(\v29.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.UnknownEntryR\aunknown\x12J\n" +
	"\x06inputs\x18\x03 \x03(\v22.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.InputR\x06inputs\x12M\n" +
	"\aoutputs\x18\x04 \x03(\v23.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.OutputR\aoutputs\x12\x10\n" +
	"\x03fee\x18\x05 \x01(\x01R\x03fee\x1as\n" +
	"\vWitnessUtxo\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\x01R\x06amount\x12L\n" +
	"\x0escript_pub_key\x18\x02 \x01(\v2&.bitcoin.bitcoind.v1alpha.ScriptPubKeyR\fscriptPubKey\x1aF\n" +
	"\fRedeemScript\x12\x10\n" +
	"\x03asm\x18\x01 \x01(\tR\x03asm\x12\x10\n" +
	"\x03hex\x18\x02 \x01(\tR\x03hex\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x1ag\n" +
	"\n" +
	"Bip32Deriv\x12\x16\n" +
	"\x06pubkey\x18\x01 \x01(\tR\x06pubkey\x12-\n" +
	"\x12master_fingerprint\x18\x02 \x01(\tR\x11masterFingerprint\x12\x12\n" +
	"\x04path\x18\x03 \x01(\tR\x04path\x1a\xd4\a\n" +
	"\x05Input\x12`\n" +
	"\x10non_witness_utxo\x18\x01 \x01(\v26.bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponseR\x0enonWitnessUtxo\x12[\n" +
	"\fwitness_utxo\x18\x02 \x01(\v28.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.WitnessUtxoR\vwitnessUtxo\x12x\n" +
	"\x12partial_signatures\x18\x03 \x03(\v2I.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.PartialSignaturesEntryR\x11partialSignatures\x12\x18\n" +
	"\asighash\x18\x04 \x01(\tR\asighash\x12^\n" +
	"\rredeem_script\x18\x05 \x01(\v29.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.RedeemScriptR\fredeemScript\x12`\n" +
	"\x0ewitness_script\x18\x06 \x01(\v29.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.RedeemScriptR\rwitnessScript\x12Z\n" +
	"\fbip32_derivs\x18\a \x03(\v27.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Bip32DerivR\vbip32Derivs\x12L\n" +
	"\x0ffinal_scriptsig\x18\b \x01(\v2#.bitcoin.bitcoind.v1alpha.ScriptSigR\x0efinalScriptsig\x12/\n" +
	"\x13final_scriptwitness\x18\t \x03(\tR\x12finalScriptwitness\x12Y\n" +
	"\aunknown\x18\n" +
	" \x03(\v2?.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.UnknownEntryR\aunknown\x1aD\n" +
	"\x16PartialSignaturesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fUnknownEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xbe\x03\n" +
	"\x06Output\x12^\n" +
	"\rredeem_script\x18\x01 \x01(\v29.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.RedeemScriptR\fredeemScript\x12`\n" +
	"\x0ewitness_script\x18\x02 \x01(\v29.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.RedeemScriptR\rwitnessScript\x12Z\n" +
	"\fbip32_derivs\x18\x03 \x03(\v27.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Bip32DerivR\vbip32Derivs\x12Z\n" +
	"\aunknown\x18\x04 \x03(\v2@.bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Output.UnknownEntryR\aunknown\x1a:\n" +
	"\fUnknownEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fUnknownEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"(\n" +
	"\x12AnalyzePsbtRequest\x12\x12\n" +
	"\x04psbt\x18\x01 \x01(\tR\x04psbt\"\xb1\x04\n" +
	"\x13AnalyzePsbtResponse\x12K\n" +
	"\x06inputs\x18\x01 \x03(\v23.bitcoin.bitcoind.v1alpha.AnalyzePsbtResponse.InputR\x06inputs\x12'\n" +
	"\x0festimated_vsize\x18\x02 \x01(\x01R\x0eestimatedVsize\x12+\n" +
	"\x11estimated_feerate\x18\x03 \x01(\x01R\x10estimatedFeerate\x12\x10\n" +
	"\x03fee\x18\x04 \x01(\x01R\x03fee\x12\x12\n" +
	"\x04next\x18\x05 \x01(\tR\x04next\x12\x14\n" +
	"\x05error\x18\x06 \x01(\tR\x05error\x1a\xba\x02\n" +
	"\x05Input\x12\x19\n" +
	"\bhas_utxo\x18\x01 \x01(\bR\ahasUtxo\x12\x19\n" +
	"\bis_final\x18\x02 \x01(\bR\aisFinal\x12U\n" +
	"\amissing\x18\x03 \x01(\v2;.bitcoin.bitcoind.v1alpha.AnalyzePsbtResponse.Input.MissingR\amissing\x12\x12\n" +
	"\x04next\x18\x04 \x01(\tR\x04next\x1a\x8f\x01\n" +
	"\aMissing\x12\x18\n" +
	"\apubkeys\x18\x01 \x03(\tR\apubkeys\x12\x1e\n" +
	"\n" +
	"signatures\x18\x02 \x03(\tR\n" +
	"signatures\x12#\n" +
	"\rredeem_script\x18\x03 \x01(\tR\fredeemScript\x12%\n" +
	"\x0ewitness_script\x18\x04 \x01(\tR\rwitnessScript\"*\n" +
	"\x12CombinePsbtRequest\x12\x14\n" +
	"\x05psbts\x18\x01 \x03(\tR\x05psbts\")\n" +
	"\x13CombinePsbtResponse\x12\x12\n" +
	"\x04psbt\x18\x01 \x01(\tR\x04psbt\"s\n" +
	"\x15UtxoUpdatePsbtRequest\x12\x12\n" +
	"\x04psbt\x18\x01 \x01(\tR\x04psbt\x12F\n" +
	"\vdescriptors\x18\x02 \x03(\v2$.bitcoin.bitcoind.v1alpha.DescriptorR\vdescriptors\",\n" +
	"\x16UtxoUpdatePsbtResponse\x12\x12\n" +
	"\x04psbt\x18\x01 \x01(\tR\x04psbt\"(\n" +
	"\x10JoinPsbtsRequest\x12\x14\n" +
	"\x05psbts\x18\x01 \x03(\tR\x05psbts\"'\n" +
	"\x11JoinPsbtsResponse\x12\x12\n" +
	"\x04psbt\x18\x01 \x01(\tR\x04psbt\"T\n" +
	"\x18TestMempoolAcceptRequest\x12\x16\n" +
	"\x06rawtxs\x18\x01 \x03(\tR\x06rawtxs\x12 \n" +
	"\fmax_fee_rate\x18\x02 \x01(\x01R\n" +
	"maxFeeRate\"\xf9\x01\n" +
	"\x19TestMempoolAcceptResponse\x12T\n" +
	"\aresults\x18\x01 \x03(\v2:.bitcoin.bitcoind.v1alpha.TestMempoolAcceptResponse.ResultR\aresults\x1a\x85\x01\n" +
	"\x06Result\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\tR\x04txid\x12\x18\n" +
	"\aallowed\x18\x02 \x01(\bR\aallowed\x12#\n" +
	"\rreject_reason\x18\x03 \x01(\tR\frejectReason\x12\x14\n" +
	"\x05vsize\x18\x04 \x01(\rR\x05vsize\x12\x12\n" +
	"\x04fees\x18\x05 \x01(\x01R\x04fees\"l\n" +
	"\x0fDescriptorRange\x12\x12\n" +
	"\x03end\x18\x01 \x01(\x05H\x00R\x03end\x127\n" +
	"\x05range\x18\x02 \x01(\v2\x1f.bitcoin.bitcoind.v1alpha.RangeH\x00R\x05rangeB\f\n" +
	"\n" +
	"range_type\"/\n" +
	"\x05Range\x12\x14\n" +
	"\x05begin\x18\x01 \x01(\x05R\x05begin\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x05R\x03end\"\xa4\x01\n" +
	"\n" +
	"Descriptor\x12-\n" +
	"\x11string_descriptor\x18\x01 \x01(\tH\x00R\x10stringDescriptor\x12Y\n" +
	"\x11object_descriptor\x18\x02 \x01(\v2*.bitcoin.bitcoind.v1alpha.DescriptorObjectH\x00R\x10objectDescriptorB\f\n" +
	"\n" +
	"descriptor\"g\n" +
	"\x10DescriptorObject\x12\x12\n" +
	"\x04desc\x18\x01 \x01(\tR\x04desc\x12?\n" +
	"\x05range\x18\x02 \x01(\v2).bitcoin.bitcoind.v1alpha.DescriptorRangeR\x05range2\x87(\n" +
	"\x0eBitcoinService\x12|\n" +
	"\x11GetBlockchainInfo\x122.bitcoin.bitcoind.v1alpha.GetBlockchainInfoRequest\x1a3.bitcoin.bitcoind.v1alpha.GetBlockchainInfoResponse\x12j\n" +
	"\vGetPeerInfo\x12,.bitcoin.bitcoind.v1alpha.GetPeerInfoRequest\x1a-.bitcoin.bitcoind.v1alpha.GetPeerInfoResponse\x12s\n" +
	"\x0eGetTransaction\x12/.bitcoin.bitcoind.v1alpha.GetTransactionRequest\x1a0.bitcoin.bitcoind.v1alpha.GetTransactionResponse\x12s\n" +
	"\x0eListSinceBlock\x12/.bitcoin.bitcoind.v1alpha.ListSinceBlockRequest\x1a0.bitcoin.bitcoind.v1alpha.ListSinceBlockResponse\x12p\n" +
	"\rGetNewAddress\x12..bitcoin.bitcoind.v1alpha.GetNewAddressRequest\x1a/.bitcoin.bitcoind.v1alpha.GetNewAddressResponse\x12p\n" +
	"\rGetWalletInfo\x12..bitcoin.bitcoind.v1alpha.GetWalletInfoRequest\x1a/.bitcoin.bitcoind.v1alpha.GetWalletInfoResponse\x12j\n" +
	"\vGetBalances\x12,.bitcoin.bitcoind.v1alpha.GetBalancesRequest\x1a-.bitcoin.bitcoind.v1alpha.GetBalancesResponse\x12U\n" +
	"\x04Send\x12%.bitcoin.bitcoind.v1alpha.SendRequest\x1a&.bitcoin.bitcoind.v1alpha.SendResponse\x12p\n" +
	"\rSendToAddress\x12..bitcoin.bitcoind.v1alpha.SendToAddressRequest\x1a/.bitcoin.bitcoind.v1alpha.SendToAddressResponse\x12^\n" +
	"\aBumpFee\x12(.bitcoin.bitcoind.v1alpha.BumpFeeRequest\x1a).bitcoin.bitcoind.v1alpha.BumpFeeResponse\x12y\n" +
	"\x10EstimateSmartFee\x121.bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest\x1a2.bitcoin.bitcoind.v1alpha.EstimateSmartFeeResponse\x12|\n" +
	"\x11ImportDescriptors\x122.bitcoin.bitcoind.v1alpha.ImportDescriptorsRequest\x1a3.bitcoin.bitcoind.v1alpha.ImportDescriptorsResponse\x12T\n" +
	"\vListWallets\x12\x16.google.protobuf.Empty\x1a-.bitcoin.bitcoind.v1alpha.ListWalletsResponse\x12y\n" +
	"\x10ListTransactions\x121.bitcoin.bitcoind.v1alpha.ListTransactionsRequest\x1a2.bitcoin.bitcoind.v1alpha.ListTransactionsResponse\x12|\n" +
	"\x11GetDescriptorInfo\x122.bitcoin.bitcoind.v1alpha.GetDescriptorInfoRequest\x1a3.bitcoin.bitcoind.v1alpha.GetDescriptorInfoResponse\x12s\n" +
	"\x0eGetAddressInfo\x12/.bitcoin.bitcoind.v1alpha.GetAddressInfoRequest\x1a0.bitcoin.bitcoind.v1alpha.GetAddressInfoResponse\x12p\n" +
	"\rGetRawMempool\x12..bitcoin.bitcoind.v1alpha.GetRawMempoolRequest\x1a/.bitcoin.bitcoind.v1alpha.GetRawMempoolResponse\x12|\n" +
	"\x11GetRawTransaction\x122.bitcoin.bitcoind.v1alpha.GetRawTransactionRequest\x1a3.bitcoin.bitcoind.v1alpha.GetRawTransactionResponse\x12\x85\x01\n" +
	"\x14DecodeRawTransaction\x125.bitcoin.bitcoind.v1alpha.DecodeRawTransactionRequest\x1a6.bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponse\x12\x85\x01\n" +
	"\x14CreateRawTransaction\x125.bitcoin.bitcoind.v1alpha.CreateRawTransactionRequest\x1a6.bitcoin.bitcoind.v1alpha.CreateRawTransactionResponse\x12a\n" +
	"\bGetBlock\x12).bitcoin.bitcoind.v1alpha.GetBlockRequest\x1a*.bitcoin.bitcoind.v1alpha.GetBlockResponse\x12m\n" +
	"\fGetBlockHash\x12-.bitcoin.bitcoind.v1alpha.GetBlockHashRequest\x1a..bitcoin.bitcoind.v1alpha.GetBlockHashResponse\x12m\n" +
	"\fCreateWallet\x12-.bitcoin.bitcoind.v1alpha.CreateWalletRequest\x1a..bitcoin.bitcoind.v1alpha.CreateWalletResponse\x12m\n" +
	"\fBackupWallet\x12-.bitcoin.bitcoind.v1alpha.BackupWalletRequest\x1a..bitcoin.bitcoind.v1alpha.BackupWalletResponse\x12g\n" +
	"\n" +
	"DumpWallet\x12+.bitcoin.bitcoind.v1alpha.DumpWalletRequest\x1a,.bitcoin.bitcoind.v1alpha.DumpWalletResponse\x12m\n" +
	"\fImportWallet\x12-.bitcoin.bitcoind.v1alpha.ImportWalletRequest\x1a..bitcoin.bitcoind.v1alpha.ImportWalletResponse\x12m\n" +
	"\fUnloadWallet\x12-.bitcoin.bitcoind.v1alpha.UnloadWalletRequest\x1a..bitcoin.bitcoind.v1alpha.UnloadWalletResponse\x12j\n" +
	"\vDumpPrivKey\x12,.bitcoin.bitcoind.v1alpha.DumpPrivKeyRequest\x1a-.bitcoin.bitcoind.v1alpha.DumpPrivKeyResponse\x12p\n" +
	"\rImportPrivKey\x12..bitcoin.bitcoind.v1alpha.ImportPrivKeyRequest\x1a/.bitcoin.bitcoind.v1alpha.ImportPrivKeyResponse\x12p\n" +
	"\rImportAddress\x12..bitcoin.bitcoind.v1alpha.ImportAddressRequest\x1a/.bitcoin.bitcoind.v1alpha.ImportAddressResponse\x12m\n" +
	"\fImportPubKey\x12-.bitcoin.bitcoind.v1alpha.ImportPubKeyRequest\x1a..bitcoin.bitcoind.v1alpha.ImportPubKeyResponse\x12p\n" +
	"\rKeyPoolRefill\x12..bitcoin.bitcoind.v1alpha.KeyPoolRefillRequest\x1a/.bitcoin.bitcoind.v1alpha.KeyPoolRefillResponse\x12g\n" +
	"\n" +
	"GetAccount\x12+.bitcoin.bitcoind.v1alpha.GetAccountRequest\x1a,.bitcoin.bitcoind.v1alpha.GetAccountResponse\x12g\n" +
	"\n" +
	"SetAccount\x12+.bitcoin.bitcoind.v1alpha.SetAccountRequest\x1a,.bitcoin.bitcoind.v1alpha.SetAccountResponse\x12\x88\x01\n" +
	"\x15GetAddressesByAccount\x126.bitcoin.bitcoind.v1alpha.GetAddressesByAccountRequest\x1a7.bitcoin.bitcoind.v1alpha.GetAddressesByAccountResponse\x12m\n" +
	"\fListAccounts\x12-.bitcoin.bitcoind.v1alpha.ListAccountsRequest\x1a..bitcoin.bitcoind.v1alpha.ListAccountsResponse\x12\x7f\n" +
	"\x12AddMultisigAddress\x123.bitcoin.bitcoind.v1alpha.AddMultisigAddressRequest\x1a4.bitcoin.bitcoind.v1alpha.AddMultisigAddressResponse\x12s\n" +
	"\x0eCreateMultisig\x12/.bitcoin.bitcoind.v1alpha.CreateMultisigRequest\x1a0.bitcoin.bitcoind.v1alpha.CreateMultisigResponse\x12g\n" +
	"\n" +
	"CreatePsbt\x12+.bitcoin.bitcoind.v1alpha.CreatePsbtRequest\x1a,.bitcoin.bitcoind.v1alpha.CreatePsbtResponse\x12g\n" +
	"\n" +
	"DecodePsbt\x12+.bitcoin.bitcoind.v1alpha.DecodePsbtRequest\x1a,.bitcoin.bitcoind.v1alpha.DecodePsbtResponse\x12j\n" +
	"\vAnalyzePsbt\x12,.bitcoin.bitcoind.v1alpha.AnalyzePsbtRequest\x1a-.bitcoin.bitcoind.v1alpha.AnalyzePsbtResponse\x12j\n" +
	"\vCombinePsbt\x12,.bitcoin.bitcoind.v1alpha.CombinePsbtRequest\x1a-.bitcoin.bitcoind.v1alpha.CombinePsbtResponse\x12s\n" +
	"\x0eUtxoUpdatePsbt\x12/.bitcoin.bitcoind.v1alpha.UtxoUpdatePsbtRequest\x1a0.bitcoin.bitcoind.v1alpha.UtxoUpdatePsbtResponse\x12d\n" +
	"\tJoinPsbts\x12*.bitcoin.bitcoind.v1alpha.JoinPsbtsRequest\x1a+.bitcoin.bitcoind.v1alpha.JoinPsbtsResponse\x12|\n" +
	"\x11TestMempoolAccept\x122.bitcoin.bitcoind.v1alpha.TestMempoolAcceptRequest\x1a3.bitcoin.bitcoind.v1alpha.TestMempoolAcceptResponseB\xfb\x01\n" +
	"\x1ccom.bitcoin.bitcoind.v1alphaB\fBitcoinProtoP\x01ZKgithub.com/barebitcoin/btc-buf/gen/bitcoin/bitcoind/v1alpha;bitcoindv1alpha\xa2\x02\x03BBX\xaa\x02\x18Bitcoin.Bitcoind.V1alpha\xca\x02\x18Bitcoin\\Bitcoind\\V1alpha\xe2\x02$Bitcoin\\Bitcoind\\V1alpha\\GPBMetadata\xea\x02\x1aBitcoin::Bitcoind::V1alphab\x06proto3"

var (
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescOnce sync.Once
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescData []byte
)

func file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP() []byte {
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescOnce.Do(func() {
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDesc), len(file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDesc)))
	})
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescData
}

var file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes = make([]protoimpl.MessageInfo, 129)
var file_bitcoin_bitcoind_v1alpha_bitcoin_proto_goTypes = []any{
	(Peer_Network)(0),                          // 0: bitcoin.bitcoind.v1alpha.Peer.Network
	(Peer_ConnectionType)(0),                   // 1: bitcoin.bitcoind.v1alpha.Peer.ConnectionType
	(Peer_TransportProtocol)(0),                // 2: bitcoin.bitcoind.v1alpha.Peer.TransportProtocol
	(GetTransactionResponse_Replaceable)(0),    // 3: bitcoin.bitcoind.v1alpha.GetTransactionResponse.Replaceable
	(GetTransactionResponse_Category)(0),       // 4: bitcoin.bitcoind.v1alpha.GetTransactionResponse.Category
	(EstimateSmartFeeRequest_EstimateMode)(0),  // 5: bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest.EstimateMode
	(GetBlockRequest_Verbosity)(0),             // 6: bitcoin.bitcoind.v1alpha.GetBlockRequest.Verbosity
	(*GetBlockchainInfoRequest)(nil),           // 7: bitcoin.bitcoind.v1alpha.GetBlockchainInfoRequest
	(*GetBlockchainInfoResponse)(nil),          // 8: bitcoin.bitcoind.v1alpha.GetBlockchainInfoResponse
	(*GetPeerInfoRequest)(nil),                 // 9: bitcoin.bitcoind.v1alpha.GetPeerInfoRequest
	(*Peer)(nil),                               // 10: bitcoin.bitcoind.v1alpha.Peer
	(*GetPeerInfoResponse)(nil),                // 11: bitcoin.bitcoind.v1alpha.GetPeerInfoResponse
	(*GetNewAddressRequest)(nil),               // 12: bitcoin.bitcoind.v1alpha.GetNewAddressRequest
	(*GetNewAddressResponse)(nil),              // 13: bitcoin.bitcoind.v1alpha.GetNewAddressResponse
	(*GetWalletInfoRequest)(nil),               // 14: bitcoin.bitcoind.v1alpha.GetWalletInfoRequest
	(*GetWalletInfoResponse)(nil),              // 15: bitcoin.bitcoind.v1alpha.GetWalletInfoResponse
	(*GetBalancesRequest)(nil),                 // 16: bitcoin.bitcoind.v1alpha.GetBalancesRequest
	(*GetBalancesResponse)(nil),                // 17: bitcoin.bitcoind.v1alpha.GetBalancesResponse
	(*WalletScan)(nil),                         // 18: bitcoin.bitcoind.v1alpha.WalletScan
	(*GetTransactionRequest)(nil),              // 19: bitcoin.bitcoind.v1alpha.GetTransactionRequest
	(*GetTransactionResponse)(nil),             // 20: bitcoin.bitcoind.v1alpha.GetTransactionResponse
	(*GetRawTransactionRequest)(nil),           // 21: bitcoin.bitcoind.v1alpha.GetRawTransactionRequest
	(*ScriptSig)(nil),                          // 22: bitcoin.bitcoind.v1alpha.ScriptSig
	(*Input)(nil),                              // 23: bitcoin.bitcoind.v1alpha.Input
	(*ScriptPubKey)(nil),                       // 24: bitcoin.bitcoind.v1alpha.ScriptPubKey
	(*Output)(nil),                             // 25: bitcoin.bitcoind.v1alpha.Output
	(*GetRawTransactionResponse)(nil),          // 26: bitcoin.bitcoind.v1alpha.GetRawTransactionResponse
	(*SendRequest)(nil),                        // 27: bitcoin.bitcoind.v1alpha.SendRequest
	(*SendResponse)(nil),                       // 28: bitcoin.bitcoind.v1alpha.SendResponse
	(*SendToAddressRequest)(nil),               // 29: bitcoin.bitcoind.v1alpha.SendToAddressRequest
	(*SendToAddressResponse)(nil),              // 30: bitcoin.bitcoind.v1alpha.SendToAddressResponse
	(*EstimateSmartFeeRequest)(nil),            // 31: bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest
	(*EstimateSmartFeeResponse)(nil),           // 32: bitcoin.bitcoind.v1alpha.EstimateSmartFeeResponse
	(*DecodeRawTransactionRequest)(nil),        // 33: bitcoin.bitcoind.v1alpha.DecodeRawTransactionRequest
	(*RawTransaction)(nil),                     // 34: bitcoin.bitcoind.v1alpha.RawTransaction
	(*DecodeRawTransactionResponse)(nil),       // 35: bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponse
	(*ImportDescriptorsRequest)(nil),           // 36: bitcoin.bitcoind.v1alpha.ImportDescriptorsRequest
	(*ImportDescriptorsResponse)(nil),          // 37: bitcoin.bitcoind.v1alpha.ImportDescriptorsResponse
	(*GetDescriptorInfoRequest)(nil),           // 38: bitcoin.bitcoind.v1alpha.GetDescriptorInfoRequest
	(*GetDescriptorInfoResponse)(nil),          // 39: bitcoin.bitcoind.v1alpha.GetDescriptorInfoResponse
	(*GetBlockRequest)(nil),                    // 40: bitcoin.bitcoind.v1alpha.GetBlockRequest
	(*GetBlockResponse)(nil),                   // 41: bitcoin.bitcoind.v1alpha.GetBlockResponse
	(*BumpFeeRequest)(nil),                     // 42: bitcoin.bitcoind.v1alpha.BumpFeeRequest
	(*BumpFeeResponse)(nil),                    // 43: bitcoin.bitcoind.v1alpha.BumpFeeResponse
	(*ListSinceBlockRequest)(nil),              // 44: bitcoin.bitcoind.v1alpha.ListSinceBlockRequest
	(*ListSinceBlockResponse)(nil),             // 45: bitcoin.bitcoind.v1alpha.ListSinceBlockResponse
	(*GetRawMempoolRequest)(nil),               // 46: bitcoin.bitcoind.v1alpha.GetRawMempoolRequest
	(*MempoolEntry)(nil),                       // 47: bitcoin.bitcoind.v1alpha.MempoolEntry
	(*GetRawMempoolResponse)(nil),              // 48: bitcoin.bitcoind.v1alpha.GetRawMempoolResponse
	(*GetBlockHashRequest)(nil),                // 49: bitcoin.bitcoind.v1alpha.GetBlockHashRequest
	(*GetBlockHashResponse)(nil),               // 50: bitcoin.bitcoind.v1alpha.GetBlockHashResponse
	(*ListTransactionsRequest)(nil),            // 51: bitcoin.bitcoind.v1alpha.ListTransactionsRequest
	(*ListTransactionsResponse)(nil),           // 52: bitcoin.bitcoind.v1alpha.ListTransactionsResponse
	(*ListWalletsResponse)(nil),                // 53: bitcoin.bitcoind.v1alpha.ListWalletsResponse
	(*GetAddressInfoRequest)(nil),              // 54: bitcoin.bitcoind.v1alpha.GetAddressInfoRequest
	(*GetAddressInfoResponse)(nil),             // 55: bitcoin.bitcoind.v1alpha.GetAddressInfoResponse
	(*CreateWalletRequest)(nil),                // 56: bitcoin.bitcoind.v1alpha.CreateWalletRequest
	(*CreateWalletResponse)(nil),               // 57: bitcoin.bitcoind.v1alpha.CreateWalletResponse
	(*BackupWalletRequest)(nil),                // 58: bitcoin.bitcoind.v1alpha.BackupWalletRequest
	(*BackupWalletResponse)(nil),               // 59: bitcoin.bitcoind.v1alpha.BackupWalletResponse
	(*DumpWalletRequest)(nil),                  // 60: bitcoin.bitcoind.v1alpha.DumpWalletRequest
	(*DumpWalletResponse)(nil),                 // 61: bitcoin.bitcoind.v1alpha.DumpWalletResponse
	(*ImportWalletRequest)(nil),                // 62: bitcoin.bitcoind.v1alpha.ImportWalletRequest
	(*ImportWalletResponse)(nil),               // 63: bitcoin.bitcoind.v1alpha.ImportWalletResponse
	(*UnloadWalletRequest)(nil),                // 64: bitcoin.bitcoind.v1alpha.UnloadWalletRequest
	(*UnloadWalletResponse)(nil),               // 65: bitcoin.bitcoind.v1alpha.UnloadWalletResponse
	(*DumpPrivKeyRequest)(nil),                 // 66: bitcoin.bitcoind.v1alpha.DumpPrivKeyRequest
	(*DumpPrivKeyResponse)(nil),                // 67: bitcoin.bitcoind.v1alpha.DumpPrivKeyResponse
	(*ImportPrivKeyRequest)(nil),               // 68: bitcoin.bitcoind.v1alpha.ImportPrivKeyRequest
	(*ImportPrivKeyResponse)(nil),              // 69: bitcoin.bitcoind.v1alpha.ImportPrivKeyResponse
	(*ImportAddressRequest)(nil),               // 70: bitcoin.bitcoind.v1alpha.ImportAddressRequest
	(*ImportAddressResponse)(nil),              // 71: bitcoin.bitcoind.v1alpha.ImportAddressResponse
	(*ImportPubKeyRequest)(nil),                // 72: bitcoin.bitcoind.v1alpha.ImportPubKeyRequest
	(*ImportPubKeyResponse)(nil),               // 73: bitcoin.bitcoind.v1alpha.ImportPubKeyResponse
	(*KeyPoolRefillRequest)(nil),               // 74: bitcoin.bitcoind.v1alpha.KeyPoolRefillRequest
	(*KeyPoolRefillResponse)(nil),              // 75: bitcoin.bitcoind.v1alpha.KeyPoolRefillResponse
	(*GetAccountRequest)(nil),                  // 76: bitcoin.bitcoind.v1alpha.GetAccountRequest
	(*GetAccountResponse)(nil),                 // 77: bitcoin.bitcoind.v1alpha.GetAccountResponse
	(*SetAccountRequest)(nil),                  // 78: bitcoin.bitcoind.v1alpha.SetAccountRequest
	(*SetAccountResponse)(nil),                 // 79: bitcoin.bitcoind.v1alpha.SetAccountResponse
	(*GetAddressesByAccountRequest)(nil),       // 80: bitcoin.bitcoind.v1alpha.GetAddressesByAccountRequest
	(*GetAddressesByAccountResponse)(nil),      // 81: bitcoin.bitcoind.v1alpha.GetAddressesByAccountResponse
	(*ListAccountsRequest)(nil),                // 82: bitcoin.bitcoind.v1alpha.ListAccountsRequest
	(*ListAccountsResponse)(nil),               // 83: bitcoin.bitcoind.v1alpha.ListAccountsResponse
	(*AddMultisigAddressRequest)(nil),          // 84: bitcoin.bitcoind.v1alpha.AddMultisigAddressRequest
	(*AddMultisigAddressResponse)(nil),         // 85: bitcoin.bitcoind.v1alpha.AddMultisigAddressResponse
	(*CreateMultisigRequest)(nil),              // 86: bitcoin.bitcoind.v1alpha.CreateMultisigRequest
	(*CreateMultisigResponse)(nil),             // 87: bitcoin.bitcoind.v1alpha.CreateMultisigResponse
	(*CreateRawTransactionRequest)(nil),        // 88: bitcoin.bitcoind.v1alpha.CreateRawTransactionRequest
	(*CreateRawTransactionResponse)(nil),       // 89: bitcoin.bitcoind.v1alpha.CreateRawTransactionResponse
	(*CreatePsbtRequest)(nil),                  // 90: bitcoin.bitcoind.v1alpha.CreatePsbtRequest
	(*CreatePsbtResponse)(nil),                 // 91: bitcoin.bitcoind.v1alpha.CreatePsbtResponse
	(*DecodePsbtRequest)(nil),                  // 92: bitcoin.bitcoind.v1alpha.DecodePsbtRequest
	(*DecodePsbtResponse)(nil),                 // 93: bitcoin.bitcoind.v1alpha.DecodePsbtResponse
	(*AnalyzePsbtRequest)(nil),                 // 94: bitcoin.bitcoind.v1alpha.AnalyzePsbtRequest
	(*AnalyzePsbtResponse)(nil),                // 95: bitcoin.bitcoind.v1alpha.AnalyzePsbtResponse
	(*CombinePsbtRequest)(nil),                 // 96: bitcoin.bitcoind.v1alpha.CombinePsbtRequest
	(*CombinePsbtResponse)(nil),                // 97: bitcoin.bitcoind.v1alpha.CombinePsbtResponse
	(*UtxoUpdatePsbtRequest)(nil),              // 98: bitcoin.bitcoind.v1alpha.UtxoUpdatePsbtRequest
	(*UtxoUpdatePsbtResponse)(nil),             // 99: bitcoin.bitcoind.v1alpha.UtxoUpdatePsbtResponse
	(*JoinPsbtsRequest)(nil),                   // 100: bitcoin.bitcoind.v1alpha.JoinPsbtsRequest
	(*JoinPsbtsResponse)(nil),                  // 101: bitcoin.bitcoind.v1alpha.JoinPsbtsResponse
	(*TestMempoolAcceptRequest)(nil),           // 102: bitcoin.bitcoind.v1alpha.TestMempoolAcceptRequest
	(*TestMempoolAcceptResponse)(nil),          // 103: bitcoin.bitcoind.v1alpha.TestMempoolAcceptResponse
	(*DescriptorRange)(nil),                    // 104: bitcoin.bitcoind.v1alpha.DescriptorRange
	(*Range)(nil),                              // 105: bitcoin.bitcoind.v1alpha.Range
	(*Descriptor)(nil),                         // 106: bitcoin.bitcoind.v1alpha.Descriptor
	(*DescriptorObject)(nil),                   // 107: bitcoin.bitcoind.v1alpha.DescriptorObject
	nil,                                        // 108: bitcoin.bitcoind.v1alpha.Peer.BytesSentPerMsgEntry
	nil,                                        // 109: bitcoin.bitcoind.v1alpha.Peer.BytesReceivedPerMsgEntry
	(*GetBalancesResponse_Mine)(nil),           // 110: bitcoin.bitcoind.v1alpha.GetBalancesResponse.Mine
	(*GetBalancesResponse_Watchonly)(nil),      // 111: bitcoin.bitcoind.v1alpha.GetBalancesResponse.Watchonly
	(*GetTransactionResponse_Details)(nil),     // 112: bitcoin.bitcoind.v1alpha.GetTransactionResponse.Details
	nil,                                        // 113: bitcoin.bitcoind.v1alpha.SendRequest.DestinationsEntry
	(*ImportDescriptorsRequest_Request)(nil),   // 114: bitcoin.bitcoind.v1alpha.ImportDescriptorsRequest.Request
	(*ImportDescriptorsResponse_Error)(nil),    // 115: bitcoin.bitcoind.v1alpha.ImportDescriptorsResponse.Error
	(*ImportDescriptorsResponse_Response)(nil), // 116: bitcoin.bitcoind.v1alpha.ImportDescriptorsResponse.Response
	(*MempoolEntry_Fees)(nil),                  // 117: bitcoin.bitcoind.v1alpha.MempoolEntry.Fees
	nil,                                        // 118: bitcoin.bitcoind.v1alpha.GetRawMempoolResponse.TransactionsEntry
	nil,                                        // 119: bitcoin.bitcoind.v1alpha.ListAccountsResponse.AccountsEntry
	(*CreateRawTransactionRequest_Input)(nil),  // 120: bitcoin.bitcoind.v1alpha.CreateRawTransactionRequest.Input
	nil,                                     // 121: bitcoin.bitcoind.v1alpha.CreateRawTransactionRequest.OutputsEntry
	(*CreatePsbtRequest_Input)(nil),         // 122: bitcoin.bitcoind.v1alpha.CreatePsbtRequest.Input
	nil,                                     // 123: bitcoin.bitcoind.v1alpha.CreatePsbtRequest.OutputsEntry
	(*DecodePsbtResponse_WitnessUtxo)(nil),  // 124: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.WitnessUtxo
	(*DecodePsbtResponse_RedeemScript)(nil), // 125: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.RedeemScript
	(*DecodePsbtResponse_Bip32Deriv)(nil),   // 126: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Bip32Deriv
	(*DecodePsbtResponse_Input)(nil),        // 127: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input
	(*DecodePsbtResponse_Output)(nil),       // 128: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Output
	nil,                                     // 129: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.UnknownEntry
	nil,                                     // 130: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.PartialSignaturesEntry
	nil,                                     // 131: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.UnknownEntry
	nil,                                     // 132: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Output.UnknownEntry
	(*AnalyzePsbtResponse_Input)(nil),       // 133: bitcoin.bitcoind.v1alpha.AnalyzePsbtResponse.Input
	(*AnalyzePsbtResponse_Input_Missing)(nil), // 134: bitcoin.bitcoind.v1alpha.AnalyzePsbtResponse.Input.Missing
	(*TestMempoolAcceptResponse_Result)(nil),  // 135: bitcoin.bitcoind.v1alpha.TestMempoolAcceptResponse.Result
	(*timestamppb.Timestamp)(nil),             // 136: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),               // 137: google.protobuf.Duration
	(*wrapperspb.BoolValue)(nil),              // 138: google.protobuf.BoolValue
	(*emptypb.Empty)(nil),                     // 139: google.protobuf.Empty
}
var file_bitcoin_bitcoind_v1alpha_bitcoin_proto_depIdxs = []int32{
	0,   // 0: bitcoin.bitcoind.v1alpha.Peer.network:type_name -> bitcoin.bitcoind.v1alpha.Peer.Network
	136, // 1: bitcoin.bitcoind.v1alpha.Peer.last_send_at:type_name -> google.protobuf.Timestamp
	136, // 2: bitcoin.bitcoind.v1alpha.Peer.last_recv_at:type_name -> google.protobuf.Timestamp
	136, // 3: bitcoin.bitcoind.v1alpha.Peer.last_transaction_at:type_name -> google.protobuf.Timestamp
	136, // 4: bitcoin.bitcoind.v1alpha.Peer.last_block_at:type_name -> google.protobuf.Timestamp
	136, // 5: bitcoin.bitcoind.v1alpha.Peer.connected_at:type_name -> google.protobuf.Timestamp
	137, // 6: bitcoin.bitcoind.v1alpha.Peer.time_offset:type_name -> google.protobuf.Duration
	137, // 7: bitcoin.bitcoind.v1alpha.Peer.ping_time:type_name -> google.protobuf.Duration
	137, // 8: bitcoin.bitcoind.v1alpha.Peer.min_ping:type_name -> google.protobuf.Duration
	137, // 9: bitcoin.bitcoind.v1alpha.Peer.ping_wait:type_name -> google.protobuf.Duration
	108, // 10: bitcoin.bitcoind.v1alpha.Peer.bytes_sent_per_msg:type_name -> bitcoin.bitcoind.v1alpha.Peer.BytesSentPerMsgEntry
	109, // 11: bitcoin.bitcoind.v1alpha.Peer.bytes_received_per_msg:type_name -> bitcoin.bitcoind.v1alpha.Peer.BytesReceivedPerMsgEntry
	1,   // 12: bitcoin.bitcoind.v1alpha.Peer.connection_type:type_name -> bitcoin.bitcoind.v1alpha.Peer.ConnectionType
	2,   // 13: bitcoin.bitcoind.v1alpha.Peer.transport_protocol:type_name -> bitcoin.bitcoind.v1alpha.Peer.TransportProtocol
	10,  // 14: bitcoin.bitcoind.v1alpha.GetPeerInfoResponse.peers:type_name -> bitcoin.bitcoind.v1alpha.Peer
	18,  // 15: bitcoin.bitcoind.v1alpha.GetWalletInfoResponse.scanning:type_name -> bitcoin.bitcoind.v1alpha.WalletScan
	110, // 16: bitcoin.bitcoind.v1alpha.GetBalancesResponse.mine:type_name -> bitcoin.bitcoind.v1alpha.GetBalancesResponse.Mine
	111, // 17: bitcoin.bitcoind.v1alpha.GetBalancesResponse.watchonly:type_name -> bitcoin.bitcoind.v1alpha.GetBalancesResponse.Watchonly
	136, // 18: bitcoin.bitcoind.v1alpha.GetTransactionResponse.block_time:type_name -> google.protobuf.Timestamp
	136, // 19: bitcoin.bitcoind.v1alpha.GetTransactionResponse.time:type_name -> google.protobuf.Timestamp
	136, // 20: bitcoin.bitcoind.v1alpha.GetTransactionResponse.time_received:type_name -> google.protobuf.Timestamp
	3,   // 21: bitcoin.bitcoind.v1alpha.GetTransactionResponse.bip125_replaceable:type_name -> bitcoin.bitcoind.v1alpha.GetTransactionResponse.Replaceable
	112, // 22: bitcoin.bitcoind.v1alpha.GetTransactionResponse.details:type_name -> bitcoin.bitcoind.v1alpha.GetTransactionResponse.Details
	22,  // 23: bitcoin.bitcoind.v1alpha.Input.script_sig:type_name -> bitcoin.bitcoind.v1alpha.ScriptSig
	24,  // 24: bitcoin.bitcoind.v1alpha.Output.script_pub_key:type_name -> bitcoin.bitcoind.v1alpha.ScriptPubKey
	22,  // 25: bitcoin.bitcoind.v1alpha.Output.script_sig:type_name -> bitcoin.bitcoind.v1alpha.ScriptSig
	34,  // 26: bitcoin.bitcoind.v1alpha.GetRawTransactionResponse.tx:type_name -> bitcoin.bitcoind.v1alpha.RawTransaction
	23,  // 27: bitcoin.bitcoind.v1alpha.GetRawTransactionResponse.inputs:type_name -> bitcoin.bitcoind.v1alpha.Input
	25,  // 28: bitcoin.bitcoind.v1alpha.GetRawTransactionResponse.outputs:type_name -> bitcoin.bitcoind.v1alpha.Output
	113, // 29: bitcoin.bitcoind.v1alpha.SendRequest.destinations:type_name -> bitcoin.bitcoind.v1alpha.SendRequest.DestinationsEntry
	138, // 30: bitcoin.bitcoind.v1alpha.SendRequest.add_to_wallet:type_name -> google.protobuf.BoolValue
	34,  // 31: bitcoin.bitcoind.v1alpha.SendResponse.tx:type_name -> bitcoin.bitcoind.v1alpha.RawTransaction
	5,   // 32: bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest.estimate_mode:type_name -> bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest.EstimateMode
	34,  // 33: bitcoin.bitcoind.v1alpha.DecodeRawTransactionRequest.tx:type_name -> bitcoin.bitcoind.v1alpha.RawTransaction
	23,  // 34: bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponse.inputs:type_name -> bitcoin.bitcoind.v1alpha.Input
	25,  // 35: bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponse.outputs:type_name -> bitcoin.bitcoind.v1alpha.Output
	114, // 36: bitcoin.bitcoind.v1alpha.ImportDescriptorsRequest.requests:type_name -> bitcoin.bitcoind.v1alpha.ImportDescriptorsRequest.Request
	116, // 37: bitcoin.bitcoind.v1alpha.ImportDescriptorsResponse.responses:type_name -> bitcoin.bitcoind.v1alpha.ImportDescriptorsResponse.Response
	6,   // 38: bitcoin.bitcoind.v1alpha.GetBlockRequest.verbosity:type_name -> bitcoin.bitcoind.v1alpha.GetBlockRequest.Verbosity
	136, // 39: bitcoin.bitcoind.v1alpha.GetBlockResponse.time:type_name -> google.protobuf.Timestamp
	20,  // 40: bitcoin.bitcoind.v1alpha.ListSinceBlockResponse.transactions:type_name -> bitcoin.bitcoind.v1alpha.GetTransactionResponse
	136, // 41: bitcoin.bitcoind.v1alpha.MempoolEntry.time:type_name -> google.protobuf.Timestamp
	117, // 42: bitcoin.bitcoind.v1alpha.MempoolEntry.fees:type_name -> bitcoin.bitcoind.v1alpha.MempoolEntry.Fees
	118, // 43: bitcoin.bitcoind.v1alpha.GetRawMempoolResponse.transactions:type_name -> bitcoin.bitcoind.v1alpha.GetRawMempoolResponse.TransactionsEntry
	20,  // 44: bitcoin.bitcoind.v1alpha.ListTransactionsResponse.transactions:type_name -> bitcoin.bitcoind.v1alpha.GetTransactionResponse
	119, // 45: bitcoin.bitcoind.v1alpha.ListAccountsResponse.accounts:type_name -> bitcoin.bitcoind.v1alpha.ListAccountsResponse.AccountsEntry
	120, // 46: bitcoin.bitcoind.v1alpha.CreateRawTransactionRequest.inputs:type_name -> bitcoin.bitcoind.v1alpha.CreateRawTransactionRequest.Input
	121, // 47: bitcoin.bitcoind.v1alpha.CreateRawTransactionRequest.outputs:type_name -> bitcoin.bitcoind.v1alpha.CreateRawTransactionRequest.OutputsEntry
	34,  // 48: bitcoin.bitcoind.v1alpha.CreateRawTransactionResponse.tx:type_name -> bitcoin.bitcoind.v1alpha.RawTransaction
	122, // 49: bitcoin.bitcoind.v1alpha.CreatePsbtRequest.inputs:type_name -> bitcoin.bitcoind.v1alpha.CreatePsbtRequest.Input
	123, // 50: bitcoin.bitcoind.v1alpha.CreatePsbtRequest.outputs:type_name -> bitcoin.bitcoind.v1alpha.CreatePsbtRequest.OutputsEntry
	35,  // 51: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.tx:type_name -> bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponse
	129, // 52: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.unknown:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.UnknownEntry
	127, // 53: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.inputs:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input
	128, // 54: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.outputs:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Output
	133, // 55: bitcoin.bitcoind.v1alpha.AnalyzePsbtResponse.inputs:type_name -> bitcoin.bitcoind.v1alpha.AnalyzePsbtResponse.Input
	106, // 56: bitcoin.bitcoind.v1alpha.UtxoUpdatePsbtRequest.descriptors:type_name -> bitcoin.bitcoind.v1alpha.Descriptor
	135, // 57: bitcoin.bitcoind.v1alpha.TestMempoolAcceptResponse.results:type_name -> bitcoin.bitcoind.v1alpha.TestMempoolAcceptResponse.Result
	105, // 58: bitcoin.bitcoind.v1alpha.DescriptorRange.range:type_name -> bitcoin.bitcoind.v1alpha.Range
	107, // 59: bitcoin.bitcoind.v1alpha.Descriptor.object_descriptor:type_name -> bitcoin.bitcoind.v1alpha.DescriptorObject
	104, // 60: bitcoin.bitcoind.v1alpha.DescriptorObject.range:type_name -> bitcoin.bitcoind.v1alpha.DescriptorRange
	4,   // 61: bitcoin.bitcoind.v1alpha.GetTransactionResponse.Details.category:type_name -> bitcoin.bitcoind.v1alpha.GetTransactionResponse.Category
	136, // 62: bitcoin.bitcoind.v1alpha.ImportDescriptorsRequest.Request.timestamp:type_name -> google.protobuf.Timestamp
	115, // 63: bitcoin.bitcoind.v1alpha.ImportDescriptorsResponse.Response.error:type_name -> bitcoin.bitcoind.v1alpha.ImportDescriptorsResponse.Error
	47,  // 64: bitcoin.bitcoind.v1alpha.GetRawMempoolResponse.TransactionsEntry.value:type_name -> bitcoin.bitcoind.v1alpha.MempoolEntry
	24,  // 65: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.WitnessUtxo.script_pub_key:type_name -> bitcoin.bitcoind.v1alpha.ScriptPubKey
	35,  // 66: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.non_witness_utxo:type_name -> bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponse
	124, // 67: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.witness_utxo:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.WitnessUtxo
	130, // 68: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.partial_signatures:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.PartialSignaturesEntry
	125, // 69: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.redeem_script:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.RedeemScript
	125, // 70: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.witness_script:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.RedeemScript
	126, // 71: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.bip32_derivs:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Bip32Deriv
	22,  // 72: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.final_scriptsig:type_name -> bitcoin.bitcoind.v1alpha.ScriptSig
	131, // 73: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.unknown:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Input.UnknownEntry
	125, // 74: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Output.redeem_script:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.RedeemScript
	125, // 75: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Output.witness_script:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.RedeemScript
	126, // 76: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Output.bip32_derivs:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Bip32Deriv
	132, // 77: bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Output.unknown:type_name -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse.Output.UnknownEntry
	134, // 78: bitcoin.bitcoind.v1alpha.AnalyzePsbtResponse.Input.missing:type_name -> bitcoin.bitcoind.v1alpha.AnalyzePsbtResponse.Input.Missing
	7,   // 79: bitcoin.bitcoind.v1alpha.BitcoinService.GetBlockchainInfo:input_type -> bitcoin.bitcoind.v1alpha.GetBlockchainInfoRequest
	9,   // 80: bitcoin.bitcoind.v1alpha.BitcoinService.GetPeerInfo:input_type -> bitcoin.bitcoind.v1alpha.GetPeerInfoRequest
	19,  // 81: bitcoin.bitcoind.v1alpha.BitcoinService.GetTransaction:input_type -> bitcoin.bitcoind.v1alpha.GetTransactionRequest
	44,  // 82: bitcoin.bitcoind.v1alpha.BitcoinService.ListSinceBlock:input_type -> bitcoin.bitcoind.v1alpha.ListSinceBlockRequest
	12,  // 83: bitcoin.bitcoind.v1alpha.BitcoinService.GetNewAddress:input_type -> bitcoin.bitcoind.v1alpha.GetNewAddressRequest
	14,  // 84: bitcoin.bitcoind.v1alpha.BitcoinService.GetWalletInfo:input_type -> bitcoin.bitcoind.v1alpha.GetWalletInfoRequest
	16,  // 85: bitcoin.bitcoind.v1alpha.BitcoinService.GetBalances:input_type -> bitcoin.bitcoind.v1alpha.GetBalancesRequest
	27,  // 86: bitcoin.bitcoind.v1alpha.BitcoinService.Send:input_type -> bitcoin.bitcoind.v1alpha.SendRequest
	29,  // 87: bitcoin.bitcoind.v1alpha.BitcoinService.SendToAddress:input_type -> bitcoin.bitcoind.v1alpha.SendToAddressRequest
	42,  // 88: bitcoin.bitcoind.v1alpha.BitcoinService.BumpFee:input_type -> bitcoin.bitcoind.v1alpha.BumpFeeRequest
	31,  // 89: bitcoin.bitcoind.v1alpha.BitcoinService.EstimateSmartFee:input_type -> bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest
	36,  // 90: bitcoin.bitcoind.v1alpha.BitcoinService.ImportDescriptors:input_type -> bitcoin.bitcoind.v1alpha.ImportDescriptorsRequest
	139, // 91: bitcoin.bitcoind.v1alpha.BitcoinService.ListWallets:input_type -> google.protobuf.Empty
	51,  // 92: bitcoin.bitcoind.v1alpha.BitcoinService.ListTransactions:input_type -> bitcoin.bitcoind.v1alpha.ListTransactionsRequest
	38,  // 93: bitcoin.bitcoind.v1alpha.BitcoinService.GetDescriptorInfo:input_type -> bitcoin.bitcoind.v1alpha.GetDescriptorInfoRequest
	54,  // 94: bitcoin.bitcoind.v1alpha.BitcoinService.GetAddressInfo:input_type -> bitcoin.bitcoind.v1alpha.GetAddressInfoRequest
	46,  // 95: bitcoin.bitcoind.v1alpha.BitcoinService.GetRawMempool:input_type -> bitcoin.bitcoind.v1alpha.GetRawMempoolRequest
	21,  // 96: bitcoin.bitcoind.v1alpha.BitcoinService.GetRawTransaction:input_type -> bitcoin.bitcoind.v1alpha.GetRawTransactionRequest
	33,  // 97: bitcoin.bitcoind.v1alpha.BitcoinService.DecodeRawTransaction:input_type -> bitcoin.bitcoind.v1alpha.DecodeRawTransactionRequest
	88,  // 98: bitcoin.bitcoind.v1alpha.BitcoinService.CreateRawTransaction:input_type -> bitcoin.bitcoind.v1alpha.CreateRawTransactionRequest
	40,  // 99: bitcoin.bitcoind.v1alpha.BitcoinService.GetBlock:input_type -> bitcoin.bitcoind.v1alpha.GetBlockRequest
	49,  // 100: bitcoin.bitcoind.v1alpha.BitcoinService.GetBlockHash:input_type -> bitcoin.bitcoind.v1alpha.GetBlockHashRequest
	56,  // 101: bitcoin.bitcoind.v1alpha.BitcoinService.CreateWallet:input_type -> bitcoin.bitcoind.v1alpha.CreateWalletRequest
	58,  // 102: bitcoin.bitcoind.v1alpha.BitcoinService.BackupWallet:input_type -> bitcoin.bitcoind.v1alpha.BackupWalletRequest
	60,  // 103: bitcoin.bitcoind.v1alpha.BitcoinService.DumpWallet:input_type -> bitcoin.bitcoind.v1alpha.DumpWalletRequest
	62,  // 104: bitcoin.bitcoind.v1alpha.BitcoinService.ImportWallet:input_type -> bitcoin.bitcoind.v1alpha.ImportWalletRequest
	64,  // 105: bitcoin.bitcoind.v1alpha.BitcoinService.UnloadWallet:input_type -> bitcoin.bitcoind.v1alpha.UnloadWalletRequest
	66,  // 106: bitcoin.bitcoind.v1alpha.BitcoinService.DumpPrivKey:input_type -> bitcoin.bitcoind.v1alpha.DumpPrivKeyRequest
	68,  // 107: bitcoin.bitcoind.v1alpha.BitcoinService.ImportPrivKey:input_type -> bitcoin.bitcoind.v1alpha.ImportPrivKeyRequest
	70,  // 108: bitcoin.bitcoind.v1alpha.BitcoinService.ImportAddress:input_type -> bitcoin.bitcoind.v1alpha.ImportAddressRequest
	72,  // 109: bitcoin.bitcoind.v1alpha.BitcoinService.ImportPubKey:input_type -> bitcoin.bitcoind.v1alpha.ImportPubKeyRequest
	74,  // 110: bitcoin.bitcoind.v1alpha.BitcoinService.KeyPoolRefill:input_type -> bitcoin.bitcoind.v1alpha.KeyPoolRefillRequest
	76,  // 111: bitcoin.bitcoind.v1alpha.BitcoinService.GetAccount:input_type -> bitcoin.bitcoind.v1alpha.GetAccountRequest
	78,  // 112: bitcoin.bitcoind.v1alpha.BitcoinService.SetAccount:input_type -> bitcoin.bitcoind.v1alpha.SetAccountRequest
	80,  // 113: bitcoin.bitcoind.v1alpha.BitcoinService.GetAddressesByAccount:input_type -> bitcoin.bitcoind.v1alpha.GetAddressesByAccountRequest
	82,  // 114: bitcoin.bitcoind.v1alpha.BitcoinService.ListAccounts:input_type -> bitcoin.bitcoind.v1alpha.ListAccountsRequest
	84,  // 115: bitcoin.bitcoind.v1alpha.BitcoinService.AddMultisigAddress:input_type -> bitcoin.bitcoind.v1alpha.AddMultisigAddressRequest
	86,  // 116: bitcoin.bitcoind.v1alpha.BitcoinService.CreateMultisig:input_type -> bitcoin.bitcoind.v1alpha.CreateMultisigRequest
	90,  // 117: bitcoin.bitcoind.v1alpha.BitcoinService.CreatePsbt:input_type -> bitcoin.bitcoind.v1alpha.CreatePsbtRequest
	92,  // 118: bitcoin.bitcoind.v1alpha.BitcoinService.DecodePsbt:input_type -> bitcoin.bitcoind.v1alpha.DecodePsbtRequest
	94,  // 119: bitcoin.bitcoind.v1alpha.BitcoinService.AnalyzePsbt:input_type -> bitcoin.bitcoind.v1alpha.AnalyzePsbtRequest
	96,  // 120: bitcoin.bitcoind.v1alpha.BitcoinService.CombinePsbt:input_type -> bitcoin.bitcoind.v1alpha.CombinePsbtRequest
	98,  // 121: bitcoin.bitcoind.v1alpha.BitcoinService.UtxoUpdatePsbt:input_type -> bitcoin.bitcoind.v1alpha.UtxoUpdatePsbtRequest
	100, // 122: bitcoin.bitcoind.v1alpha.BitcoinService.JoinPsbts:input_type -> bitcoin.bitcoind.v1alpha.JoinPsbtsRequest
	102, // 123: bitcoin.bitcoind.v1alpha.BitcoinService.TestMempoolAccept:input_type -> bitcoin.bitcoind.v1alpha.TestMempoolAcceptRequest
	8,   // 124: bitcoin.bitcoind.v1alpha.BitcoinService.GetBlockchainInfo:output_type -> bitcoin.bitcoind.v1alpha.GetBlockchainInfoResponse
	11,  // 125: bitcoin.bitcoind.v1alpha.BitcoinService.GetPeerInfo:output_type -> bitcoin.bitcoind.v1alpha.GetPeerInfoResponse
	20,  // 126: bitcoin.bitcoind.v1alpha.BitcoinService.GetTransaction:output_type -> bitcoin.bitcoind.v1alpha.GetTransactionResponse
	45,  // 127: bitcoin.bitcoind.v1alpha.BitcoinService.ListSinceBlock:output_type -> bitcoin.bitcoind.v1alpha.ListSinceBlockResponse
	13,  // 128: bitcoin.bitcoind.v1alpha.BitcoinService.GetNewAddress:output_type -> bitcoin.bitcoind.v1alpha.GetNewAddressResponse
	15,  // 129: bitcoin.bitcoind.v1alpha.BitcoinService.GetWalletInfo:output_type -> bitcoin.bitcoind.v1alpha.GetWalletInfoResponse
	17,  // 130: bitcoin.bitcoind.v1alpha.BitcoinService.GetBalances:output_type -> bitcoin.bitcoind.v1alpha.GetBalancesResponse
	28,  // 131: bitcoin.bitcoind.v1alpha.BitcoinService.Send:output_type -> bitcoin.bitcoind.v1alpha.SendResponse
	30,  // 132: bitcoin.bitcoind.v1alpha.BitcoinService.SendToAddress:output_type -> bitcoin.bitcoind.v1alpha.SendToAddressResponse
	43,  // 133: bitcoin.bitcoind.v1alpha.BitcoinService.BumpFee:output_type -> bitcoin.bitcoind.v1alpha.BumpFeeResponse
	32,  // 134: bitcoin.bitcoind.v1alpha.BitcoinService.EstimateSmartFee:output_type -> bitcoin.bitcoind.v1alpha.EstimateSmartFeeResponse
	37,  // 135: bitcoin.bitcoind.v1alpha.BitcoinService.ImportDescriptors:output_type -> bitcoin.bitcoind.v1alpha.ImportDescriptorsResponse
	53,  // 136: bitcoin.bitcoind.v1alpha.BitcoinService.ListWallets:output_type -> bitcoin.bitcoind.v1alpha.ListWalletsResponse
	52,  // 137: bitcoin.bitcoind.v1alpha.BitcoinService.ListTransactions:output_type -> bitcoin.bitcoind.v1alpha.ListTransactionsResponse
	39,  // 138: bitcoin.bitcoind.v1alpha.BitcoinService.GetDescriptorInfo:output_type -> bitcoin.bitcoind.v1alpha.GetDescriptorInfoResponse
	55,  // 139: bitcoin.bitcoind.v1alpha.BitcoinService.GetAddressInfo:output_type -> bitcoin.bitcoind.v1alpha.GetAddressInfoResponse
	48,  // 140: bitcoin.bitcoind.v1alpha.BitcoinService.GetRawMempool:output_type -> bitcoin.bitcoind.v1alpha.GetRawMempoolResponse
	26,  // 141: bitcoin.bitcoind.v1alpha.BitcoinService.GetRawTransaction:output_type -> bitcoin.bitcoind.v1alpha.GetRawTransactionResponse
	35,  // 142: bitcoin.bitcoind.v1alpha.BitcoinService.DecodeRawTransaction:output_type -> bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponse
	89,  // 143: bitcoin.bitcoind.v1alpha.BitcoinService.CreateRawTransaction:output_type -> bitcoin.bitcoind.v1alpha.CreateRawTransactionResponse
	41,  // 144: bitcoin.bitcoind.v1alpha.BitcoinService.GetBlock:output_type -> bitcoin.bitcoind.v1alpha.GetBlockResponse
	50,  // 145: bitcoin.bitcoind.v1alpha.BitcoinService.GetBlockHash:output_type -> bitcoin.bitcoind.v1alpha.GetBlockHashResponse
	57,  // 146: bitcoin.bitcoind.v1alpha.BitcoinService.CreateWallet:output_type -> bitcoin.bitcoind.v1alpha.CreateWalletResponse
	59,  // 147: bitcoin.bitcoind.v1alpha.BitcoinService.BackupWallet:output_type -> bitcoin.bitcoind.v1alpha.BackupWalletResponse
	61,  // 148: bitcoin.bitcoind.v1alpha.BitcoinService.DumpWallet:output_type -> bitcoin.bitcoind.v1alpha.DumpWalletResponse
	63,  // 149: bitcoin.bitcoind.v1alpha.BitcoinService.ImportWallet:output_type -> bitcoin.bitcoind.v1alpha.ImportWalletResponse
	65,  // 150: bitcoin.bitcoind.v1alpha.BitcoinService.UnloadWallet:output_type -> bitcoin.bitcoind.v1alpha.UnloadWalletResponse
	67,  // 151: bitcoin.bitcoind.v1alpha.BitcoinService.DumpPrivKey:output_type -> bitcoin.bitcoind.v1alpha.DumpPrivKeyResponse
	69,  // 152: bitcoin.bitcoind.v1alpha.BitcoinService.ImportPrivKey:output_type -> bitcoin.bitcoind.v1alpha.ImportPrivKeyResponse
	71,  // 153: bitcoin.bitcoind.v1alpha.BitcoinService.ImportAddress:output_type -> bitcoin.bitcoind.v1alpha.ImportAddressResponse
	73,  // 154: bitcoin.bitcoind.v1alpha.BitcoinService.ImportPubKey:output_type -> bitcoin.bitcoind.v1alpha.ImportPubKeyResponse
	75,  // 155: bitcoin.bitcoind.v1alpha.BitcoinService.KeyPoolRefill:output_type -> bitcoin.bitcoind.v1alpha.KeyPoolRefillResponse
	77,  // 156: bitcoin.bitcoind.v1alpha.BitcoinService.GetAccount:output_type -> bitcoin.bitcoind.v1alpha.GetAccountResponse
	79,  // 157: bitcoin.bitcoind.v1alpha.BitcoinService.SetAccount:output_type -> bitcoin.bitcoind.v1alpha.SetAccountResponse
	81,  // 158: bitcoin.bitcoind.v1alpha.BitcoinService.GetAddressesByAccount:output_type -> bitcoin.bitcoind.v1alpha.GetAddressesByAccountResponse
	83,  // 159: bitcoin.bitcoind.v1alpha.BitcoinService.ListAccounts:output_type -> bitcoin.bitcoind.v1alpha.ListAccountsResponse
	85,  // 160: bitcoin.bitcoind.v1alpha.BitcoinService.AddMultisigAddress:output_type -> bitcoin.bitcoind.v1alpha.AddMultisigAddressResponse
	87,  // 161: bitcoin.bitcoind.v1alpha.BitcoinService.CreateMultisig:output_type -> bitcoin.bitcoind.v1alpha.CreateMultisigResponse
	91,  // 162: bitcoin.bitcoind.v1alpha.BitcoinService.CreatePsbt:output_type -> bitcoin.bitcoind.v1alpha.CreatePsbtResponse
	93,  // 163: bitcoin.bitcoind.v1alpha.BitcoinService.DecodePsbt:output_type -> bitcoin.bitcoind.v1alpha.DecodePsbtResponse
	95,  // 164: bitcoin.bitcoind.v1alpha.BitcoinService.AnalyzePsbt:output_type -> bitcoin.bitcoind.v1alpha.AnalyzePsbtResponse
	97,  // 165: bitcoin.bitcoind.v1alpha.BitcoinService.CombinePsbt:output_type -> bitcoin.bitcoind.v1alpha.CombinePsbtResponse
	99,  // 166: bitcoin.bitcoind.v1alpha.BitcoinService.UtxoUpdatePsbt:output_type -> bitcoin.bitcoind.v1alpha.UtxoUpdatePsbtResponse
	101, // 167: bitcoin.bitcoind.v1alpha.BitcoinService.JoinPsbts:output_type -> bitcoin.bitcoind.v1alpha.JoinPsbtsResponse
	103, // 168: bitcoin.bitcoind.v1alpha.BitcoinService.TestMempoolAccept:output_type -> bitcoin.bitcoind.v1alpha.TestMempoolAcceptResponse
	124, // [124:169] is the sub-list for method output_type
	79,  // [79:124] is the sub-list for method input_type
	79,  // [79:79] is the sub-list for extension type_name
	79,  // [79:79] is the sub-list for extension extendee
	0,   // [0:79] is the sub-list for field type_name
}

func init() { file_bitcoin_bitcoind_v1alpha_bitcoin_proto_init() }
func file_bitcoin_bitcoind_v1alpha_bitcoin_proto_init() {
	if File_bitcoin_bitcoind_v1alpha_bitcoin_proto != nil {
		return
	}
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[33].OneofWrappers = []any{}
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[97].OneofWrappers = []any{
		(*DescriptorRange_End)(nil),
		(*DescriptorRange_Range)(nil),
	}
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[99].OneofWrappers = []any{
		(*Descriptor_StringDescriptor)(nil),
		(*Descriptor_ObjectDescriptor)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDesc), len(file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   129,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bitcoin_bitcoind_v1alpha_bitcoin_proto_goTypes,
		DependencyIndexes: file_bitcoin_bitcoind_v1alpha_bitcoin_proto_depIdxs,
		EnumInfos:         file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes,
		MessageInfos:      file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes,
	}.Build()
	File_bitcoin_bitcoind_v1alpha_bitcoin_proto = out.File
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_goTypes = nil
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_depIdxs = nil
}
