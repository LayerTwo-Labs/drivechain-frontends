// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bitcoin/bitcoind/v1alpha/bitcoin.proto

package bitcoindv1alphaconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha "github.com/barebitcoin/btc-buf/gen/bitcoin/bitcoind/v1alpha"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BitcoinServiceName is the fully-qualified name of the BitcoinService service.
	BitcoinServiceName = "bitcoin.bitcoind.v1alpha.BitcoinService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BitcoinServiceGetBlockchainInfoProcedure is the fully-qualified name of the BitcoinService's
	// GetBlockchainInfo RPC.
	BitcoinServiceGetBlockchainInfoProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetBlockchainInfo"
	// BitcoinServiceGetPeerInfoProcedure is the fully-qualified name of the BitcoinService's
	// GetPeerInfo RPC.
	BitcoinServiceGetPeerInfoProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetPeerInfo"
	// BitcoinServiceGetTransactionProcedure is the fully-qualified name of the BitcoinService's
	// GetTransaction RPC.
	BitcoinServiceGetTransactionProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetTransaction"
	// BitcoinServiceListSinceBlockProcedure is the fully-qualified name of the BitcoinService's
	// ListSinceBlock RPC.
	BitcoinServiceListSinceBlockProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/ListSinceBlock"
	// BitcoinServiceGetNewAddressProcedure is the fully-qualified name of the BitcoinService's
	// GetNewAddress RPC.
	BitcoinServiceGetNewAddressProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetNewAddress"
	// BitcoinServiceGetWalletInfoProcedure is the fully-qualified name of the BitcoinService's
	// GetWalletInfo RPC.
	BitcoinServiceGetWalletInfoProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetWalletInfo"
	// BitcoinServiceGetBalancesProcedure is the fully-qualified name of the BitcoinService's
	// GetBalances RPC.
	BitcoinServiceGetBalancesProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetBalances"
	// BitcoinServiceSendProcedure is the fully-qualified name of the BitcoinService's Send RPC.
	BitcoinServiceSendProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/Send"
	// BitcoinServiceSendToAddressProcedure is the fully-qualified name of the BitcoinService's
	// SendToAddress RPC.
	BitcoinServiceSendToAddressProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/SendToAddress"
	// BitcoinServiceBumpFeeProcedure is the fully-qualified name of the BitcoinService's BumpFee RPC.
	BitcoinServiceBumpFeeProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/BumpFee"
	// BitcoinServiceEstimateSmartFeeProcedure is the fully-qualified name of the BitcoinService's
	// EstimateSmartFee RPC.
	BitcoinServiceEstimateSmartFeeProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/EstimateSmartFee"
	// BitcoinServiceImportDescriptorsProcedure is the fully-qualified name of the BitcoinService's
	// ImportDescriptors RPC.
	BitcoinServiceImportDescriptorsProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/ImportDescriptors"
	// BitcoinServiceListWalletsProcedure is the fully-qualified name of the BitcoinService's
	// ListWallets RPC.
	BitcoinServiceListWalletsProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/ListWallets"
	// BitcoinServiceListTransactionsProcedure is the fully-qualified name of the BitcoinService's
	// ListTransactions RPC.
	BitcoinServiceListTransactionsProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/ListTransactions"
	// BitcoinServiceGetDescriptorInfoProcedure is the fully-qualified name of the BitcoinService's
	// GetDescriptorInfo RPC.
	BitcoinServiceGetDescriptorInfoProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetDescriptorInfo"
	// BitcoinServiceGetAddressInfoProcedure is the fully-qualified name of the BitcoinService's
	// GetAddressInfo RPC.
	BitcoinServiceGetAddressInfoProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetAddressInfo"
	// BitcoinServiceGetRawMempoolProcedure is the fully-qualified name of the BitcoinService's
	// GetRawMempool RPC.
	BitcoinServiceGetRawMempoolProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetRawMempool"
	// BitcoinServiceGetRawTransactionProcedure is the fully-qualified name of the BitcoinService's
	// GetRawTransaction RPC.
	BitcoinServiceGetRawTransactionProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetRawTransaction"
	// BitcoinServiceDecodeRawTransactionProcedure is the fully-qualified name of the BitcoinService's
	// DecodeRawTransaction RPC.
	BitcoinServiceDecodeRawTransactionProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/DecodeRawTransaction"
	// BitcoinServiceCreateRawTransactionProcedure is the fully-qualified name of the BitcoinService's
	// CreateRawTransaction RPC.
	BitcoinServiceCreateRawTransactionProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/CreateRawTransaction"
	// BitcoinServiceGetBlockProcedure is the fully-qualified name of the BitcoinService's GetBlock RPC.
	BitcoinServiceGetBlockProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetBlock"
	// BitcoinServiceGetBlockHashProcedure is the fully-qualified name of the BitcoinService's
	// GetBlockHash RPC.
	BitcoinServiceGetBlockHashProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetBlockHash"
	// BitcoinServiceCreateWalletProcedure is the fully-qualified name of the BitcoinService's
	// CreateWallet RPC.
	BitcoinServiceCreateWalletProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/CreateWallet"
	// BitcoinServiceBackupWalletProcedure is the fully-qualified name of the BitcoinService's
	// BackupWallet RPC.
	BitcoinServiceBackupWalletProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/BackupWallet"
	// BitcoinServiceDumpWalletProcedure is the fully-qualified name of the BitcoinService's DumpWallet
	// RPC.
	BitcoinServiceDumpWalletProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/DumpWallet"
	// BitcoinServiceImportWalletProcedure is the fully-qualified name of the BitcoinService's
	// ImportWallet RPC.
	BitcoinServiceImportWalletProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/ImportWallet"
	// BitcoinServiceUnloadWalletProcedure is the fully-qualified name of the BitcoinService's
	// UnloadWallet RPC.
	BitcoinServiceUnloadWalletProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/UnloadWallet"
	// BitcoinServiceDumpPrivKeyProcedure is the fully-qualified name of the BitcoinService's
	// DumpPrivKey RPC.
	BitcoinServiceDumpPrivKeyProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/DumpPrivKey"
	// BitcoinServiceImportPrivKeyProcedure is the fully-qualified name of the BitcoinService's
	// ImportPrivKey RPC.
	BitcoinServiceImportPrivKeyProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/ImportPrivKey"
	// BitcoinServiceImportAddressProcedure is the fully-qualified name of the BitcoinService's
	// ImportAddress RPC.
	BitcoinServiceImportAddressProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/ImportAddress"
	// BitcoinServiceImportPubKeyProcedure is the fully-qualified name of the BitcoinService's
	// ImportPubKey RPC.
	BitcoinServiceImportPubKeyProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/ImportPubKey"
	// BitcoinServiceKeyPoolRefillProcedure is the fully-qualified name of the BitcoinService's
	// KeyPoolRefill RPC.
	BitcoinServiceKeyPoolRefillProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/KeyPoolRefill"
	// BitcoinServiceGetAccountProcedure is the fully-qualified name of the BitcoinService's GetAccount
	// RPC.
	BitcoinServiceGetAccountProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetAccount"
	// BitcoinServiceSetAccountProcedure is the fully-qualified name of the BitcoinService's SetAccount
	// RPC.
	BitcoinServiceSetAccountProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/SetAccount"
	// BitcoinServiceGetAddressesByAccountProcedure is the fully-qualified name of the BitcoinService's
	// GetAddressesByAccount RPC.
	BitcoinServiceGetAddressesByAccountProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetAddressesByAccount"
	// BitcoinServiceListAccountsProcedure is the fully-qualified name of the BitcoinService's
	// ListAccounts RPC.
	BitcoinServiceListAccountsProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/ListAccounts"
	// BitcoinServiceAddMultisigAddressProcedure is the fully-qualified name of the BitcoinService's
	// AddMultisigAddress RPC.
	BitcoinServiceAddMultisigAddressProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/AddMultisigAddress"
	// BitcoinServiceCreateMultisigProcedure is the fully-qualified name of the BitcoinService's
	// CreateMultisig RPC.
	BitcoinServiceCreateMultisigProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/CreateMultisig"
	// BitcoinServiceCreatePsbtProcedure is the fully-qualified name of the BitcoinService's CreatePsbt
	// RPC.
	BitcoinServiceCreatePsbtProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/CreatePsbt"
	// BitcoinServiceDecodePsbtProcedure is the fully-qualified name of the BitcoinService's DecodePsbt
	// RPC.
	BitcoinServiceDecodePsbtProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/DecodePsbt"
	// BitcoinServiceAnalyzePsbtProcedure is the fully-qualified name of the BitcoinService's
	// AnalyzePsbt RPC.
	BitcoinServiceAnalyzePsbtProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/AnalyzePsbt"
	// BitcoinServiceCombinePsbtProcedure is the fully-qualified name of the BitcoinService's
	// CombinePsbt RPC.
	BitcoinServiceCombinePsbtProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/CombinePsbt"
	// BitcoinServiceUtxoUpdatePsbtProcedure is the fully-qualified name of the BitcoinService's
	// UtxoUpdatePsbt RPC.
	BitcoinServiceUtxoUpdatePsbtProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/UtxoUpdatePsbt"
	// BitcoinServiceJoinPsbtsProcedure is the fully-qualified name of the BitcoinService's JoinPsbts
	// RPC.
	BitcoinServiceJoinPsbtsProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/JoinPsbts"
	// BitcoinServiceTestMempoolAcceptProcedure is the fully-qualified name of the BitcoinService's
	// TestMempoolAccept RPC.
	BitcoinServiceTestMempoolAcceptProcedure = "/bitcoin.bitcoind.v1alpha.BitcoinService/TestMempoolAccept"
)

// BitcoinServiceClient is a client for the bitcoin.bitcoind.v1alpha.BitcoinService service.
type BitcoinServiceClient interface {
	GetBlockchainInfo(context.Context, *connect.Request[v1alpha.GetBlockchainInfoRequest]) (*connect.Response[v1alpha.GetBlockchainInfoResponse], error)
	GetPeerInfo(context.Context, *connect.Request[v1alpha.GetPeerInfoRequest]) (*connect.Response[v1alpha.GetPeerInfoResponse], error)
	// Fetches in-wallet transactions
	GetTransaction(context.Context, *connect.Request[v1alpha.GetTransactionRequest]) (*connect.Response[v1alpha.GetTransactionResponse], error)
	ListSinceBlock(context.Context, *connect.Request[v1alpha.ListSinceBlockRequest]) (*connect.Response[v1alpha.ListSinceBlockResponse], error)
	// Wallet stuff
	GetNewAddress(context.Context, *connect.Request[v1alpha.GetNewAddressRequest]) (*connect.Response[v1alpha.GetNewAddressResponse], error)
	GetWalletInfo(context.Context, *connect.Request[v1alpha.GetWalletInfoRequest]) (*connect.Response[v1alpha.GetWalletInfoResponse], error)
	GetBalances(context.Context, *connect.Request[v1alpha.GetBalancesRequest]) (*connect.Response[v1alpha.GetBalancesResponse], error)
	Send(context.Context, *connect.Request[v1alpha.SendRequest]) (*connect.Response[v1alpha.SendResponse], error)
	SendToAddress(context.Context, *connect.Request[v1alpha.SendToAddressRequest]) (*connect.Response[v1alpha.SendToAddressResponse], error)
	BumpFee(context.Context, *connect.Request[v1alpha.BumpFeeRequest]) (*connect.Response[v1alpha.BumpFeeResponse], error)
	EstimateSmartFee(context.Context, *connect.Request[v1alpha.EstimateSmartFeeRequest]) (*connect.Response[v1alpha.EstimateSmartFeeResponse], error)
	// Import a descriptor. If importing a watch-only descriptor, the wallet itself needs
	// to be watch-only as well. The descriptor also needs to be normalized, with a
	// checksum. This can be obtained by running it through GetDescriptorInfo.
	ImportDescriptors(context.Context, *connect.Request[v1alpha.ImportDescriptorsRequest]) (*connect.Response[v1alpha.ImportDescriptorsResponse], error)
	ListWallets(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha.ListWalletsResponse], error)
	ListTransactions(context.Context, *connect.Request[v1alpha.ListTransactionsRequest]) (*connect.Response[v1alpha.ListTransactionsResponse], error)
	GetDescriptorInfo(context.Context, *connect.Request[v1alpha.GetDescriptorInfoRequest]) (*connect.Response[v1alpha.GetDescriptorInfoResponse], error)
	GetAddressInfo(context.Context, *connect.Request[v1alpha.GetAddressInfoRequest]) (*connect.Response[v1alpha.GetAddressInfoResponse], error)
	// Mempool stuff
	GetRawMempool(context.Context, *connect.Request[v1alpha.GetRawMempoolRequest]) (*connect.Response[v1alpha.GetRawMempoolResponse], error)
	// Raw TX stuff
	GetRawTransaction(context.Context, *connect.Request[v1alpha.GetRawTransactionRequest]) (*connect.Response[v1alpha.GetRawTransactionResponse], error)
	DecodeRawTransaction(context.Context, *connect.Request[v1alpha.DecodeRawTransactionRequest]) (*connect.Response[v1alpha.DecodeRawTransactionResponse], error)
	CreateRawTransaction(context.Context, *connect.Request[v1alpha.CreateRawTransactionRequest]) (*connect.Response[v1alpha.CreateRawTransactionResponse], error)
	GetBlock(context.Context, *connect.Request[v1alpha.GetBlockRequest]) (*connect.Response[v1alpha.GetBlockResponse], error)
	GetBlockHash(context.Context, *connect.Request[v1alpha.GetBlockHashRequest]) (*connect.Response[v1alpha.GetBlockHashResponse], error)
	// Wallet management
	CreateWallet(context.Context, *connect.Request[v1alpha.CreateWalletRequest]) (*connect.Response[v1alpha.CreateWalletResponse], error)
	BackupWallet(context.Context, *connect.Request[v1alpha.BackupWalletRequest]) (*connect.Response[v1alpha.BackupWalletResponse], error)
	DumpWallet(context.Context, *connect.Request[v1alpha.DumpWalletRequest]) (*connect.Response[v1alpha.DumpWalletResponse], error)
	ImportWallet(context.Context, *connect.Request[v1alpha.ImportWalletRequest]) (*connect.Response[v1alpha.ImportWalletResponse], error)
	UnloadWallet(context.Context, *connect.Request[v1alpha.UnloadWalletRequest]) (*connect.Response[v1alpha.UnloadWalletResponse], error)
	// Key/Address management
	DumpPrivKey(context.Context, *connect.Request[v1alpha.DumpPrivKeyRequest]) (*connect.Response[v1alpha.DumpPrivKeyResponse], error)
	ImportPrivKey(context.Context, *connect.Request[v1alpha.ImportPrivKeyRequest]) (*connect.Response[v1alpha.ImportPrivKeyResponse], error)
	ImportAddress(context.Context, *connect.Request[v1alpha.ImportAddressRequest]) (*connect.Response[v1alpha.ImportAddressResponse], error)
	ImportPubKey(context.Context, *connect.Request[v1alpha.ImportPubKeyRequest]) (*connect.Response[v1alpha.ImportPubKeyResponse], error)
	KeyPoolRefill(context.Context, *connect.Request[v1alpha.KeyPoolRefillRequest]) (*connect.Response[v1alpha.KeyPoolRefillResponse], error)
	// Account operations
	GetAccount(context.Context, *connect.Request[v1alpha.GetAccountRequest]) (*connect.Response[v1alpha.GetAccountResponse], error)
	SetAccount(context.Context, *connect.Request[v1alpha.SetAccountRequest]) (*connect.Response[v1alpha.SetAccountResponse], error)
	GetAddressesByAccount(context.Context, *connect.Request[v1alpha.GetAddressesByAccountRequest]) (*connect.Response[v1alpha.GetAddressesByAccountResponse], error)
	ListAccounts(context.Context, *connect.Request[v1alpha.ListAccountsRequest]) (*connect.Response[v1alpha.ListAccountsResponse], error)
	// Multi-sig operations
	AddMultisigAddress(context.Context, *connect.Request[v1alpha.AddMultisigAddressRequest]) (*connect.Response[v1alpha.AddMultisigAddressResponse], error)
	CreateMultisig(context.Context, *connect.Request[v1alpha.CreateMultisigRequest]) (*connect.Response[v1alpha.CreateMultisigResponse], error)
	// PSBT handling
	CreatePsbt(context.Context, *connect.Request[v1alpha.CreatePsbtRequest]) (*connect.Response[v1alpha.CreatePsbtResponse], error)
	DecodePsbt(context.Context, *connect.Request[v1alpha.DecodePsbtRequest]) (*connect.Response[v1alpha.DecodePsbtResponse], error)
	AnalyzePsbt(context.Context, *connect.Request[v1alpha.AnalyzePsbtRequest]) (*connect.Response[v1alpha.AnalyzePsbtResponse], error)
	CombinePsbt(context.Context, *connect.Request[v1alpha.CombinePsbtRequest]) (*connect.Response[v1alpha.CombinePsbtResponse], error)
	UtxoUpdatePsbt(context.Context, *connect.Request[v1alpha.UtxoUpdatePsbtRequest]) (*connect.Response[v1alpha.UtxoUpdatePsbtResponse], error)
	JoinPsbts(context.Context, *connect.Request[v1alpha.JoinPsbtsRequest]) (*connect.Response[v1alpha.JoinPsbtsResponse], error)
	// Transaction misc
	TestMempoolAccept(context.Context, *connect.Request[v1alpha.TestMempoolAcceptRequest]) (*connect.Response[v1alpha.TestMempoolAcceptResponse], error)
}

// NewBitcoinServiceClient constructs a client for the bitcoin.bitcoind.v1alpha.BitcoinService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBitcoinServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BitcoinServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bitcoinServiceMethods := v1alpha.File_bitcoin_bitcoind_v1alpha_bitcoin_proto.Services().ByName("BitcoinService").Methods()
	return &bitcoinServiceClient{
		getBlockchainInfo: connect.NewClient[v1alpha.GetBlockchainInfoRequest, v1alpha.GetBlockchainInfoResponse](
			httpClient,
			baseURL+BitcoinServiceGetBlockchainInfoProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetBlockchainInfo")),
			connect.WithClientOptions(opts...),
		),
		getPeerInfo: connect.NewClient[v1alpha.GetPeerInfoRequest, v1alpha.GetPeerInfoResponse](
			httpClient,
			baseURL+BitcoinServiceGetPeerInfoProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetPeerInfo")),
			connect.WithClientOptions(opts...),
		),
		getTransaction: connect.NewClient[v1alpha.GetTransactionRequest, v1alpha.GetTransactionResponse](
			httpClient,
			baseURL+BitcoinServiceGetTransactionProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetTransaction")),
			connect.WithClientOptions(opts...),
		),
		listSinceBlock: connect.NewClient[v1alpha.ListSinceBlockRequest, v1alpha.ListSinceBlockResponse](
			httpClient,
			baseURL+BitcoinServiceListSinceBlockProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("ListSinceBlock")),
			connect.WithClientOptions(opts...),
		),
		getNewAddress: connect.NewClient[v1alpha.GetNewAddressRequest, v1alpha.GetNewAddressResponse](
			httpClient,
			baseURL+BitcoinServiceGetNewAddressProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetNewAddress")),
			connect.WithClientOptions(opts...),
		),
		getWalletInfo: connect.NewClient[v1alpha.GetWalletInfoRequest, v1alpha.GetWalletInfoResponse](
			httpClient,
			baseURL+BitcoinServiceGetWalletInfoProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetWalletInfo")),
			connect.WithClientOptions(opts...),
		),
		getBalances: connect.NewClient[v1alpha.GetBalancesRequest, v1alpha.GetBalancesResponse](
			httpClient,
			baseURL+BitcoinServiceGetBalancesProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetBalances")),
			connect.WithClientOptions(opts...),
		),
		send: connect.NewClient[v1alpha.SendRequest, v1alpha.SendResponse](
			httpClient,
			baseURL+BitcoinServiceSendProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("Send")),
			connect.WithClientOptions(opts...),
		),
		sendToAddress: connect.NewClient[v1alpha.SendToAddressRequest, v1alpha.SendToAddressResponse](
			httpClient,
			baseURL+BitcoinServiceSendToAddressProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("SendToAddress")),
			connect.WithClientOptions(opts...),
		),
		bumpFee: connect.NewClient[v1alpha.BumpFeeRequest, v1alpha.BumpFeeResponse](
			httpClient,
			baseURL+BitcoinServiceBumpFeeProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("BumpFee")),
			connect.WithClientOptions(opts...),
		),
		estimateSmartFee: connect.NewClient[v1alpha.EstimateSmartFeeRequest, v1alpha.EstimateSmartFeeResponse](
			httpClient,
			baseURL+BitcoinServiceEstimateSmartFeeProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("EstimateSmartFee")),
			connect.WithClientOptions(opts...),
		),
		importDescriptors: connect.NewClient[v1alpha.ImportDescriptorsRequest, v1alpha.ImportDescriptorsResponse](
			httpClient,
			baseURL+BitcoinServiceImportDescriptorsProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("ImportDescriptors")),
			connect.WithClientOptions(opts...),
		),
		listWallets: connect.NewClient[emptypb.Empty, v1alpha.ListWalletsResponse](
			httpClient,
			baseURL+BitcoinServiceListWalletsProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("ListWallets")),
			connect.WithClientOptions(opts...),
		),
		listTransactions: connect.NewClient[v1alpha.ListTransactionsRequest, v1alpha.ListTransactionsResponse](
			httpClient,
			baseURL+BitcoinServiceListTransactionsProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("ListTransactions")),
			connect.WithClientOptions(opts...),
		),
		getDescriptorInfo: connect.NewClient[v1alpha.GetDescriptorInfoRequest, v1alpha.GetDescriptorInfoResponse](
			httpClient,
			baseURL+BitcoinServiceGetDescriptorInfoProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetDescriptorInfo")),
			connect.WithClientOptions(opts...),
		),
		getAddressInfo: connect.NewClient[v1alpha.GetAddressInfoRequest, v1alpha.GetAddressInfoResponse](
			httpClient,
			baseURL+BitcoinServiceGetAddressInfoProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetAddressInfo")),
			connect.WithClientOptions(opts...),
		),
		getRawMempool: connect.NewClient[v1alpha.GetRawMempoolRequest, v1alpha.GetRawMempoolResponse](
			httpClient,
			baseURL+BitcoinServiceGetRawMempoolProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetRawMempool")),
			connect.WithClientOptions(opts...),
		),
		getRawTransaction: connect.NewClient[v1alpha.GetRawTransactionRequest, v1alpha.GetRawTransactionResponse](
			httpClient,
			baseURL+BitcoinServiceGetRawTransactionProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetRawTransaction")),
			connect.WithClientOptions(opts...),
		),
		decodeRawTransaction: connect.NewClient[v1alpha.DecodeRawTransactionRequest, v1alpha.DecodeRawTransactionResponse](
			httpClient,
			baseURL+BitcoinServiceDecodeRawTransactionProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("DecodeRawTransaction")),
			connect.WithClientOptions(opts...),
		),
		createRawTransaction: connect.NewClient[v1alpha.CreateRawTransactionRequest, v1alpha.CreateRawTransactionResponse](
			httpClient,
			baseURL+BitcoinServiceCreateRawTransactionProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("CreateRawTransaction")),
			connect.WithClientOptions(opts...),
		),
		getBlock: connect.NewClient[v1alpha.GetBlockRequest, v1alpha.GetBlockResponse](
			httpClient,
			baseURL+BitcoinServiceGetBlockProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetBlock")),
			connect.WithClientOptions(opts...),
		),
		getBlockHash: connect.NewClient[v1alpha.GetBlockHashRequest, v1alpha.GetBlockHashResponse](
			httpClient,
			baseURL+BitcoinServiceGetBlockHashProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetBlockHash")),
			connect.WithClientOptions(opts...),
		),
		createWallet: connect.NewClient[v1alpha.CreateWalletRequest, v1alpha.CreateWalletResponse](
			httpClient,
			baseURL+BitcoinServiceCreateWalletProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("CreateWallet")),
			connect.WithClientOptions(opts...),
		),
		backupWallet: connect.NewClient[v1alpha.BackupWalletRequest, v1alpha.BackupWalletResponse](
			httpClient,
			baseURL+BitcoinServiceBackupWalletProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("BackupWallet")),
			connect.WithClientOptions(opts...),
		),
		dumpWallet: connect.NewClient[v1alpha.DumpWalletRequest, v1alpha.DumpWalletResponse](
			httpClient,
			baseURL+BitcoinServiceDumpWalletProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("DumpWallet")),
			connect.WithClientOptions(opts...),
		),
		importWallet: connect.NewClient[v1alpha.ImportWalletRequest, v1alpha.ImportWalletResponse](
			httpClient,
			baseURL+BitcoinServiceImportWalletProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("ImportWallet")),
			connect.WithClientOptions(opts...),
		),
		unloadWallet: connect.NewClient[v1alpha.UnloadWalletRequest, v1alpha.UnloadWalletResponse](
			httpClient,
			baseURL+BitcoinServiceUnloadWalletProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("UnloadWallet")),
			connect.WithClientOptions(opts...),
		),
		dumpPrivKey: connect.NewClient[v1alpha.DumpPrivKeyRequest, v1alpha.DumpPrivKeyResponse](
			httpClient,
			baseURL+BitcoinServiceDumpPrivKeyProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("DumpPrivKey")),
			connect.WithClientOptions(opts...),
		),
		importPrivKey: connect.NewClient[v1alpha.ImportPrivKeyRequest, v1alpha.ImportPrivKeyResponse](
			httpClient,
			baseURL+BitcoinServiceImportPrivKeyProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("ImportPrivKey")),
			connect.WithClientOptions(opts...),
		),
		importAddress: connect.NewClient[v1alpha.ImportAddressRequest, v1alpha.ImportAddressResponse](
			httpClient,
			baseURL+BitcoinServiceImportAddressProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("ImportAddress")),
			connect.WithClientOptions(opts...),
		),
		importPubKey: connect.NewClient[v1alpha.ImportPubKeyRequest, v1alpha.ImportPubKeyResponse](
			httpClient,
			baseURL+BitcoinServiceImportPubKeyProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("ImportPubKey")),
			connect.WithClientOptions(opts...),
		),
		keyPoolRefill: connect.NewClient[v1alpha.KeyPoolRefillRequest, v1alpha.KeyPoolRefillResponse](
			httpClient,
			baseURL+BitcoinServiceKeyPoolRefillProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("KeyPoolRefill")),
			connect.WithClientOptions(opts...),
		),
		getAccount: connect.NewClient[v1alpha.GetAccountRequest, v1alpha.GetAccountResponse](
			httpClient,
			baseURL+BitcoinServiceGetAccountProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetAccount")),
			connect.WithClientOptions(opts...),
		),
		setAccount: connect.NewClient[v1alpha.SetAccountRequest, v1alpha.SetAccountResponse](
			httpClient,
			baseURL+BitcoinServiceSetAccountProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("SetAccount")),
			connect.WithClientOptions(opts...),
		),
		getAddressesByAccount: connect.NewClient[v1alpha.GetAddressesByAccountRequest, v1alpha.GetAddressesByAccountResponse](
			httpClient,
			baseURL+BitcoinServiceGetAddressesByAccountProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("GetAddressesByAccount")),
			connect.WithClientOptions(opts...),
		),
		listAccounts: connect.NewClient[v1alpha.ListAccountsRequest, v1alpha.ListAccountsResponse](
			httpClient,
			baseURL+BitcoinServiceListAccountsProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("ListAccounts")),
			connect.WithClientOptions(opts...),
		),
		addMultisigAddress: connect.NewClient[v1alpha.AddMultisigAddressRequest, v1alpha.AddMultisigAddressResponse](
			httpClient,
			baseURL+BitcoinServiceAddMultisigAddressProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("AddMultisigAddress")),
			connect.WithClientOptions(opts...),
		),
		createMultisig: connect.NewClient[v1alpha.CreateMultisigRequest, v1alpha.CreateMultisigResponse](
			httpClient,
			baseURL+BitcoinServiceCreateMultisigProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("CreateMultisig")),
			connect.WithClientOptions(opts...),
		),
		createPsbt: connect.NewClient[v1alpha.CreatePsbtRequest, v1alpha.CreatePsbtResponse](
			httpClient,
			baseURL+BitcoinServiceCreatePsbtProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("CreatePsbt")),
			connect.WithClientOptions(opts...),
		),
		decodePsbt: connect.NewClient[v1alpha.DecodePsbtRequest, v1alpha.DecodePsbtResponse](
			httpClient,
			baseURL+BitcoinServiceDecodePsbtProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("DecodePsbt")),
			connect.WithClientOptions(opts...),
		),
		analyzePsbt: connect.NewClient[v1alpha.AnalyzePsbtRequest, v1alpha.AnalyzePsbtResponse](
			httpClient,
			baseURL+BitcoinServiceAnalyzePsbtProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("AnalyzePsbt")),
			connect.WithClientOptions(opts...),
		),
		combinePsbt: connect.NewClient[v1alpha.CombinePsbtRequest, v1alpha.CombinePsbtResponse](
			httpClient,
			baseURL+BitcoinServiceCombinePsbtProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("CombinePsbt")),
			connect.WithClientOptions(opts...),
		),
		utxoUpdatePsbt: connect.NewClient[v1alpha.UtxoUpdatePsbtRequest, v1alpha.UtxoUpdatePsbtResponse](
			httpClient,
			baseURL+BitcoinServiceUtxoUpdatePsbtProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("UtxoUpdatePsbt")),
			connect.WithClientOptions(opts...),
		),
		joinPsbts: connect.NewClient[v1alpha.JoinPsbtsRequest, v1alpha.JoinPsbtsResponse](
			httpClient,
			baseURL+BitcoinServiceJoinPsbtsProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("JoinPsbts")),
			connect.WithClientOptions(opts...),
		),
		testMempoolAccept: connect.NewClient[v1alpha.TestMempoolAcceptRequest, v1alpha.TestMempoolAcceptResponse](
			httpClient,
			baseURL+BitcoinServiceTestMempoolAcceptProcedure,
			connect.WithSchema(bitcoinServiceMethods.ByName("TestMempoolAccept")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bitcoinServiceClient implements BitcoinServiceClient.
type bitcoinServiceClient struct {
	getBlockchainInfo     *connect.Client[v1alpha.GetBlockchainInfoRequest, v1alpha.GetBlockchainInfoResponse]
	getPeerInfo           *connect.Client[v1alpha.GetPeerInfoRequest, v1alpha.GetPeerInfoResponse]
	getTransaction        *connect.Client[v1alpha.GetTransactionRequest, v1alpha.GetTransactionResponse]
	listSinceBlock        *connect.Client[v1alpha.ListSinceBlockRequest, v1alpha.ListSinceBlockResponse]
	getNewAddress         *connect.Client[v1alpha.GetNewAddressRequest, v1alpha.GetNewAddressResponse]
	getWalletInfo         *connect.Client[v1alpha.GetWalletInfoRequest, v1alpha.GetWalletInfoResponse]
	getBalances           *connect.Client[v1alpha.GetBalancesRequest, v1alpha.GetBalancesResponse]
	send                  *connect.Client[v1alpha.SendRequest, v1alpha.SendResponse]
	sendToAddress         *connect.Client[v1alpha.SendToAddressRequest, v1alpha.SendToAddressResponse]
	bumpFee               *connect.Client[v1alpha.BumpFeeRequest, v1alpha.BumpFeeResponse]
	estimateSmartFee      *connect.Client[v1alpha.EstimateSmartFeeRequest, v1alpha.EstimateSmartFeeResponse]
	importDescriptors     *connect.Client[v1alpha.ImportDescriptorsRequest, v1alpha.ImportDescriptorsResponse]
	listWallets           *connect.Client[emptypb.Empty, v1alpha.ListWalletsResponse]
	listTransactions      *connect.Client[v1alpha.ListTransactionsRequest, v1alpha.ListTransactionsResponse]
	getDescriptorInfo     *connect.Client[v1alpha.GetDescriptorInfoRequest, v1alpha.GetDescriptorInfoResponse]
	getAddressInfo        *connect.Client[v1alpha.GetAddressInfoRequest, v1alpha.GetAddressInfoResponse]
	getRawMempool         *connect.Client[v1alpha.GetRawMempoolRequest, v1alpha.GetRawMempoolResponse]
	getRawTransaction     *connect.Client[v1alpha.GetRawTransactionRequest, v1alpha.GetRawTransactionResponse]
	decodeRawTransaction  *connect.Client[v1alpha.DecodeRawTransactionRequest, v1alpha.DecodeRawTransactionResponse]
	createRawTransaction  *connect.Client[v1alpha.CreateRawTransactionRequest, v1alpha.CreateRawTransactionResponse]
	getBlock              *connect.Client[v1alpha.GetBlockRequest, v1alpha.GetBlockResponse]
	getBlockHash          *connect.Client[v1alpha.GetBlockHashRequest, v1alpha.GetBlockHashResponse]
	createWallet          *connect.Client[v1alpha.CreateWalletRequest, v1alpha.CreateWalletResponse]
	backupWallet          *connect.Client[v1alpha.BackupWalletRequest, v1alpha.BackupWalletResponse]
	dumpWallet            *connect.Client[v1alpha.DumpWalletRequest, v1alpha.DumpWalletResponse]
	importWallet          *connect.Client[v1alpha.ImportWalletRequest, v1alpha.ImportWalletResponse]
	unloadWallet          *connect.Client[v1alpha.UnloadWalletRequest, v1alpha.UnloadWalletResponse]
	dumpPrivKey           *connect.Client[v1alpha.DumpPrivKeyRequest, v1alpha.DumpPrivKeyResponse]
	importPrivKey         *connect.Client[v1alpha.ImportPrivKeyRequest, v1alpha.ImportPrivKeyResponse]
	importAddress         *connect.Client[v1alpha.ImportAddressRequest, v1alpha.ImportAddressResponse]
	importPubKey          *connect.Client[v1alpha.ImportPubKeyRequest, v1alpha.ImportPubKeyResponse]
	keyPoolRefill         *connect.Client[v1alpha.KeyPoolRefillRequest, v1alpha.KeyPoolRefillResponse]
	getAccount            *connect.Client[v1alpha.GetAccountRequest, v1alpha.GetAccountResponse]
	setAccount            *connect.Client[v1alpha.SetAccountRequest, v1alpha.SetAccountResponse]
	getAddressesByAccount *connect.Client[v1alpha.GetAddressesByAccountRequest, v1alpha.GetAddressesByAccountResponse]
	listAccounts          *connect.Client[v1alpha.ListAccountsRequest, v1alpha.ListAccountsResponse]
	addMultisigAddress    *connect.Client[v1alpha.AddMultisigAddressRequest, v1alpha.AddMultisigAddressResponse]
	createMultisig        *connect.Client[v1alpha.CreateMultisigRequest, v1alpha.CreateMultisigResponse]
	createPsbt            *connect.Client[v1alpha.CreatePsbtRequest, v1alpha.CreatePsbtResponse]
	decodePsbt            *connect.Client[v1alpha.DecodePsbtRequest, v1alpha.DecodePsbtResponse]
	analyzePsbt           *connect.Client[v1alpha.AnalyzePsbtRequest, v1alpha.AnalyzePsbtResponse]
	combinePsbt           *connect.Client[v1alpha.CombinePsbtRequest, v1alpha.CombinePsbtResponse]
	utxoUpdatePsbt        *connect.Client[v1alpha.UtxoUpdatePsbtRequest, v1alpha.UtxoUpdatePsbtResponse]
	joinPsbts             *connect.Client[v1alpha.JoinPsbtsRequest, v1alpha.JoinPsbtsResponse]
	testMempoolAccept     *connect.Client[v1alpha.TestMempoolAcceptRequest, v1alpha.TestMempoolAcceptResponse]
}

// GetBlockchainInfo calls bitcoin.bitcoind.v1alpha.BitcoinService.GetBlockchainInfo.
func (c *bitcoinServiceClient) GetBlockchainInfo(ctx context.Context, req *connect.Request[v1alpha.GetBlockchainInfoRequest]) (*connect.Response[v1alpha.GetBlockchainInfoResponse], error) {
	return c.getBlockchainInfo.CallUnary(ctx, req)
}

// GetPeerInfo calls bitcoin.bitcoind.v1alpha.BitcoinService.GetPeerInfo.
func (c *bitcoinServiceClient) GetPeerInfo(ctx context.Context, req *connect.Request[v1alpha.GetPeerInfoRequest]) (*connect.Response[v1alpha.GetPeerInfoResponse], error) {
	return c.getPeerInfo.CallUnary(ctx, req)
}

// GetTransaction calls bitcoin.bitcoind.v1alpha.BitcoinService.GetTransaction.
func (c *bitcoinServiceClient) GetTransaction(ctx context.Context, req *connect.Request[v1alpha.GetTransactionRequest]) (*connect.Response[v1alpha.GetTransactionResponse], error) {
	return c.getTransaction.CallUnary(ctx, req)
}

// ListSinceBlock calls bitcoin.bitcoind.v1alpha.BitcoinService.ListSinceBlock.
func (c *bitcoinServiceClient) ListSinceBlock(ctx context.Context, req *connect.Request[v1alpha.ListSinceBlockRequest]) (*connect.Response[v1alpha.ListSinceBlockResponse], error) {
	return c.listSinceBlock.CallUnary(ctx, req)
}

// GetNewAddress calls bitcoin.bitcoind.v1alpha.BitcoinService.GetNewAddress.
func (c *bitcoinServiceClient) GetNewAddress(ctx context.Context, req *connect.Request[v1alpha.GetNewAddressRequest]) (*connect.Response[v1alpha.GetNewAddressResponse], error) {
	return c.getNewAddress.CallUnary(ctx, req)
}

// GetWalletInfo calls bitcoin.bitcoind.v1alpha.BitcoinService.GetWalletInfo.
func (c *bitcoinServiceClient) GetWalletInfo(ctx context.Context, req *connect.Request[v1alpha.GetWalletInfoRequest]) (*connect.Response[v1alpha.GetWalletInfoResponse], error) {
	return c.getWalletInfo.CallUnary(ctx, req)
}

// GetBalances calls bitcoin.bitcoind.v1alpha.BitcoinService.GetBalances.
func (c *bitcoinServiceClient) GetBalances(ctx context.Context, req *connect.Request[v1alpha.GetBalancesRequest]) (*connect.Response[v1alpha.GetBalancesResponse], error) {
	return c.getBalances.CallUnary(ctx, req)
}

// Send calls bitcoin.bitcoind.v1alpha.BitcoinService.Send.
func (c *bitcoinServiceClient) Send(ctx context.Context, req *connect.Request[v1alpha.SendRequest]) (*connect.Response[v1alpha.SendResponse], error) {
	return c.send.CallUnary(ctx, req)
}

// SendToAddress calls bitcoin.bitcoind.v1alpha.BitcoinService.SendToAddress.
func (c *bitcoinServiceClient) SendToAddress(ctx context.Context, req *connect.Request[v1alpha.SendToAddressRequest]) (*connect.Response[v1alpha.SendToAddressResponse], error) {
	return c.sendToAddress.CallUnary(ctx, req)
}

// BumpFee calls bitcoin.bitcoind.v1alpha.BitcoinService.BumpFee.
func (c *bitcoinServiceClient) BumpFee(ctx context.Context, req *connect.Request[v1alpha.BumpFeeRequest]) (*connect.Response[v1alpha.BumpFeeResponse], error) {
	return c.bumpFee.CallUnary(ctx, req)
}

// EstimateSmartFee calls bitcoin.bitcoind.v1alpha.BitcoinService.EstimateSmartFee.
func (c *bitcoinServiceClient) EstimateSmartFee(ctx context.Context, req *connect.Request[v1alpha.EstimateSmartFeeRequest]) (*connect.Response[v1alpha.EstimateSmartFeeResponse], error) {
	return c.estimateSmartFee.CallUnary(ctx, req)
}

// ImportDescriptors calls bitcoin.bitcoind.v1alpha.BitcoinService.ImportDescriptors.
func (c *bitcoinServiceClient) ImportDescriptors(ctx context.Context, req *connect.Request[v1alpha.ImportDescriptorsRequest]) (*connect.Response[v1alpha.ImportDescriptorsResponse], error) {
	return c.importDescriptors.CallUnary(ctx, req)
}

// ListWallets calls bitcoin.bitcoind.v1alpha.BitcoinService.ListWallets.
func (c *bitcoinServiceClient) ListWallets(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha.ListWalletsResponse], error) {
	return c.listWallets.CallUnary(ctx, req)
}

// ListTransactions calls bitcoin.bitcoind.v1alpha.BitcoinService.ListTransactions.
func (c *bitcoinServiceClient) ListTransactions(ctx context.Context, req *connect.Request[v1alpha.ListTransactionsRequest]) (*connect.Response[v1alpha.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// GetDescriptorInfo calls bitcoin.bitcoind.v1alpha.BitcoinService.GetDescriptorInfo.
func (c *bitcoinServiceClient) GetDescriptorInfo(ctx context.Context, req *connect.Request[v1alpha.GetDescriptorInfoRequest]) (*connect.Response[v1alpha.GetDescriptorInfoResponse], error) {
	return c.getDescriptorInfo.CallUnary(ctx, req)
}

// GetAddressInfo calls bitcoin.bitcoind.v1alpha.BitcoinService.GetAddressInfo.
func (c *bitcoinServiceClient) GetAddressInfo(ctx context.Context, req *connect.Request[v1alpha.GetAddressInfoRequest]) (*connect.Response[v1alpha.GetAddressInfoResponse], error) {
	return c.getAddressInfo.CallUnary(ctx, req)
}

// GetRawMempool calls bitcoin.bitcoind.v1alpha.BitcoinService.GetRawMempool.
func (c *bitcoinServiceClient) GetRawMempool(ctx context.Context, req *connect.Request[v1alpha.GetRawMempoolRequest]) (*connect.Response[v1alpha.GetRawMempoolResponse], error) {
	return c.getRawMempool.CallUnary(ctx, req)
}

// GetRawTransaction calls bitcoin.bitcoind.v1alpha.BitcoinService.GetRawTransaction.
func (c *bitcoinServiceClient) GetRawTransaction(ctx context.Context, req *connect.Request[v1alpha.GetRawTransactionRequest]) (*connect.Response[v1alpha.GetRawTransactionResponse], error) {
	return c.getRawTransaction.CallUnary(ctx, req)
}

// DecodeRawTransaction calls bitcoin.bitcoind.v1alpha.BitcoinService.DecodeRawTransaction.
func (c *bitcoinServiceClient) DecodeRawTransaction(ctx context.Context, req *connect.Request[v1alpha.DecodeRawTransactionRequest]) (*connect.Response[v1alpha.DecodeRawTransactionResponse], error) {
	return c.decodeRawTransaction.CallUnary(ctx, req)
}

// CreateRawTransaction calls bitcoin.bitcoind.v1alpha.BitcoinService.CreateRawTransaction.
func (c *bitcoinServiceClient) CreateRawTransaction(ctx context.Context, req *connect.Request[v1alpha.CreateRawTransactionRequest]) (*connect.Response[v1alpha.CreateRawTransactionResponse], error) {
	return c.createRawTransaction.CallUnary(ctx, req)
}

// GetBlock calls bitcoin.bitcoind.v1alpha.BitcoinService.GetBlock.
func (c *bitcoinServiceClient) GetBlock(ctx context.Context, req *connect.Request[v1alpha.GetBlockRequest]) (*connect.Response[v1alpha.GetBlockResponse], error) {
	return c.getBlock.CallUnary(ctx, req)
}

// GetBlockHash calls bitcoin.bitcoind.v1alpha.BitcoinService.GetBlockHash.
func (c *bitcoinServiceClient) GetBlockHash(ctx context.Context, req *connect.Request[v1alpha.GetBlockHashRequest]) (*connect.Response[v1alpha.GetBlockHashResponse], error) {
	return c.getBlockHash.CallUnary(ctx, req)
}

// CreateWallet calls bitcoin.bitcoind.v1alpha.BitcoinService.CreateWallet.
func (c *bitcoinServiceClient) CreateWallet(ctx context.Context, req *connect.Request[v1alpha.CreateWalletRequest]) (*connect.Response[v1alpha.CreateWalletResponse], error) {
	return c.createWallet.CallUnary(ctx, req)
}

// BackupWallet calls bitcoin.bitcoind.v1alpha.BitcoinService.BackupWallet.
func (c *bitcoinServiceClient) BackupWallet(ctx context.Context, req *connect.Request[v1alpha.BackupWalletRequest]) (*connect.Response[v1alpha.BackupWalletResponse], error) {
	return c.backupWallet.CallUnary(ctx, req)
}

// DumpWallet calls bitcoin.bitcoind.v1alpha.BitcoinService.DumpWallet.
func (c *bitcoinServiceClient) DumpWallet(ctx context.Context, req *connect.Request[v1alpha.DumpWalletRequest]) (*connect.Response[v1alpha.DumpWalletResponse], error) {
	return c.dumpWallet.CallUnary(ctx, req)
}

// ImportWallet calls bitcoin.bitcoind.v1alpha.BitcoinService.ImportWallet.
func (c *bitcoinServiceClient) ImportWallet(ctx context.Context, req *connect.Request[v1alpha.ImportWalletRequest]) (*connect.Response[v1alpha.ImportWalletResponse], error) {
	return c.importWallet.CallUnary(ctx, req)
}

// UnloadWallet calls bitcoin.bitcoind.v1alpha.BitcoinService.UnloadWallet.
func (c *bitcoinServiceClient) UnloadWallet(ctx context.Context, req *connect.Request[v1alpha.UnloadWalletRequest]) (*connect.Response[v1alpha.UnloadWalletResponse], error) {
	return c.unloadWallet.CallUnary(ctx, req)
}

// DumpPrivKey calls bitcoin.bitcoind.v1alpha.BitcoinService.DumpPrivKey.
func (c *bitcoinServiceClient) DumpPrivKey(ctx context.Context, req *connect.Request[v1alpha.DumpPrivKeyRequest]) (*connect.Response[v1alpha.DumpPrivKeyResponse], error) {
	return c.dumpPrivKey.CallUnary(ctx, req)
}

// ImportPrivKey calls bitcoin.bitcoind.v1alpha.BitcoinService.ImportPrivKey.
func (c *bitcoinServiceClient) ImportPrivKey(ctx context.Context, req *connect.Request[v1alpha.ImportPrivKeyRequest]) (*connect.Response[v1alpha.ImportPrivKeyResponse], error) {
	return c.importPrivKey.CallUnary(ctx, req)
}

// ImportAddress calls bitcoin.bitcoind.v1alpha.BitcoinService.ImportAddress.
func (c *bitcoinServiceClient) ImportAddress(ctx context.Context, req *connect.Request[v1alpha.ImportAddressRequest]) (*connect.Response[v1alpha.ImportAddressResponse], error) {
	return c.importAddress.CallUnary(ctx, req)
}

// ImportPubKey calls bitcoin.bitcoind.v1alpha.BitcoinService.ImportPubKey.
func (c *bitcoinServiceClient) ImportPubKey(ctx context.Context, req *connect.Request[v1alpha.ImportPubKeyRequest]) (*connect.Response[v1alpha.ImportPubKeyResponse], error) {
	return c.importPubKey.CallUnary(ctx, req)
}

// KeyPoolRefill calls bitcoin.bitcoind.v1alpha.BitcoinService.KeyPoolRefill.
func (c *bitcoinServiceClient) KeyPoolRefill(ctx context.Context, req *connect.Request[v1alpha.KeyPoolRefillRequest]) (*connect.Response[v1alpha.KeyPoolRefillResponse], error) {
	return c.keyPoolRefill.CallUnary(ctx, req)
}

// GetAccount calls bitcoin.bitcoind.v1alpha.BitcoinService.GetAccount.
func (c *bitcoinServiceClient) GetAccount(ctx context.Context, req *connect.Request[v1alpha.GetAccountRequest]) (*connect.Response[v1alpha.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// SetAccount calls bitcoin.bitcoind.v1alpha.BitcoinService.SetAccount.
func (c *bitcoinServiceClient) SetAccount(ctx context.Context, req *connect.Request[v1alpha.SetAccountRequest]) (*connect.Response[v1alpha.SetAccountResponse], error) {
	return c.setAccount.CallUnary(ctx, req)
}

// GetAddressesByAccount calls bitcoin.bitcoind.v1alpha.BitcoinService.GetAddressesByAccount.
func (c *bitcoinServiceClient) GetAddressesByAccount(ctx context.Context, req *connect.Request[v1alpha.GetAddressesByAccountRequest]) (*connect.Response[v1alpha.GetAddressesByAccountResponse], error) {
	return c.getAddressesByAccount.CallUnary(ctx, req)
}

// ListAccounts calls bitcoin.bitcoind.v1alpha.BitcoinService.ListAccounts.
func (c *bitcoinServiceClient) ListAccounts(ctx context.Context, req *connect.Request[v1alpha.ListAccountsRequest]) (*connect.Response[v1alpha.ListAccountsResponse], error) {
	return c.listAccounts.CallUnary(ctx, req)
}

// AddMultisigAddress calls bitcoin.bitcoind.v1alpha.BitcoinService.AddMultisigAddress.
func (c *bitcoinServiceClient) AddMultisigAddress(ctx context.Context, req *connect.Request[v1alpha.AddMultisigAddressRequest]) (*connect.Response[v1alpha.AddMultisigAddressResponse], error) {
	return c.addMultisigAddress.CallUnary(ctx, req)
}

// CreateMultisig calls bitcoin.bitcoind.v1alpha.BitcoinService.CreateMultisig.
func (c *bitcoinServiceClient) CreateMultisig(ctx context.Context, req *connect.Request[v1alpha.CreateMultisigRequest]) (*connect.Response[v1alpha.CreateMultisigResponse], error) {
	return c.createMultisig.CallUnary(ctx, req)
}

// CreatePsbt calls bitcoin.bitcoind.v1alpha.BitcoinService.CreatePsbt.
func (c *bitcoinServiceClient) CreatePsbt(ctx context.Context, req *connect.Request[v1alpha.CreatePsbtRequest]) (*connect.Response[v1alpha.CreatePsbtResponse], error) {
	return c.createPsbt.CallUnary(ctx, req)
}

// DecodePsbt calls bitcoin.bitcoind.v1alpha.BitcoinService.DecodePsbt.
func (c *bitcoinServiceClient) DecodePsbt(ctx context.Context, req *connect.Request[v1alpha.DecodePsbtRequest]) (*connect.Response[v1alpha.DecodePsbtResponse], error) {
	return c.decodePsbt.CallUnary(ctx, req)
}

// AnalyzePsbt calls bitcoin.bitcoind.v1alpha.BitcoinService.AnalyzePsbt.
func (c *bitcoinServiceClient) AnalyzePsbt(ctx context.Context, req *connect.Request[v1alpha.AnalyzePsbtRequest]) (*connect.Response[v1alpha.AnalyzePsbtResponse], error) {
	return c.analyzePsbt.CallUnary(ctx, req)
}

// CombinePsbt calls bitcoin.bitcoind.v1alpha.BitcoinService.CombinePsbt.
func (c *bitcoinServiceClient) CombinePsbt(ctx context.Context, req *connect.Request[v1alpha.CombinePsbtRequest]) (*connect.Response[v1alpha.CombinePsbtResponse], error) {
	return c.combinePsbt.CallUnary(ctx, req)
}

// UtxoUpdatePsbt calls bitcoin.bitcoind.v1alpha.BitcoinService.UtxoUpdatePsbt.
func (c *bitcoinServiceClient) UtxoUpdatePsbt(ctx context.Context, req *connect.Request[v1alpha.UtxoUpdatePsbtRequest]) (*connect.Response[v1alpha.UtxoUpdatePsbtResponse], error) {
	return c.utxoUpdatePsbt.CallUnary(ctx, req)
}

// JoinPsbts calls bitcoin.bitcoind.v1alpha.BitcoinService.JoinPsbts.
func (c *bitcoinServiceClient) JoinPsbts(ctx context.Context, req *connect.Request[v1alpha.JoinPsbtsRequest]) (*connect.Response[v1alpha.JoinPsbtsResponse], error) {
	return c.joinPsbts.CallUnary(ctx, req)
}

// TestMempoolAccept calls bitcoin.bitcoind.v1alpha.BitcoinService.TestMempoolAccept.
func (c *bitcoinServiceClient) TestMempoolAccept(ctx context.Context, req *connect.Request[v1alpha.TestMempoolAcceptRequest]) (*connect.Response[v1alpha.TestMempoolAcceptResponse], error) {
	return c.testMempoolAccept.CallUnary(ctx, req)
}

// BitcoinServiceHandler is an implementation of the bitcoin.bitcoind.v1alpha.BitcoinService
// service.
type BitcoinServiceHandler interface {
	GetBlockchainInfo(context.Context, *connect.Request[v1alpha.GetBlockchainInfoRequest]) (*connect.Response[v1alpha.GetBlockchainInfoResponse], error)
	GetPeerInfo(context.Context, *connect.Request[v1alpha.GetPeerInfoRequest]) (*connect.Response[v1alpha.GetPeerInfoResponse], error)
	// Fetches in-wallet transactions
	GetTransaction(context.Context, *connect.Request[v1alpha.GetTransactionRequest]) (*connect.Response[v1alpha.GetTransactionResponse], error)
	ListSinceBlock(context.Context, *connect.Request[v1alpha.ListSinceBlockRequest]) (*connect.Response[v1alpha.ListSinceBlockResponse], error)
	// Wallet stuff
	GetNewAddress(context.Context, *connect.Request[v1alpha.GetNewAddressRequest]) (*connect.Response[v1alpha.GetNewAddressResponse], error)
	GetWalletInfo(context.Context, *connect.Request[v1alpha.GetWalletInfoRequest]) (*connect.Response[v1alpha.GetWalletInfoResponse], error)
	GetBalances(context.Context, *connect.Request[v1alpha.GetBalancesRequest]) (*connect.Response[v1alpha.GetBalancesResponse], error)
	Send(context.Context, *connect.Request[v1alpha.SendRequest]) (*connect.Response[v1alpha.SendResponse], error)
	SendToAddress(context.Context, *connect.Request[v1alpha.SendToAddressRequest]) (*connect.Response[v1alpha.SendToAddressResponse], error)
	BumpFee(context.Context, *connect.Request[v1alpha.BumpFeeRequest]) (*connect.Response[v1alpha.BumpFeeResponse], error)
	EstimateSmartFee(context.Context, *connect.Request[v1alpha.EstimateSmartFeeRequest]) (*connect.Response[v1alpha.EstimateSmartFeeResponse], error)
	// Import a descriptor. If importing a watch-only descriptor, the wallet itself needs
	// to be watch-only as well. The descriptor also needs to be normalized, with a
	// checksum. This can be obtained by running it through GetDescriptorInfo.
	ImportDescriptors(context.Context, *connect.Request[v1alpha.ImportDescriptorsRequest]) (*connect.Response[v1alpha.ImportDescriptorsResponse], error)
	ListWallets(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha.ListWalletsResponse], error)
	ListTransactions(context.Context, *connect.Request[v1alpha.ListTransactionsRequest]) (*connect.Response[v1alpha.ListTransactionsResponse], error)
	GetDescriptorInfo(context.Context, *connect.Request[v1alpha.GetDescriptorInfoRequest]) (*connect.Response[v1alpha.GetDescriptorInfoResponse], error)
	GetAddressInfo(context.Context, *connect.Request[v1alpha.GetAddressInfoRequest]) (*connect.Response[v1alpha.GetAddressInfoResponse], error)
	// Mempool stuff
	GetRawMempool(context.Context, *connect.Request[v1alpha.GetRawMempoolRequest]) (*connect.Response[v1alpha.GetRawMempoolResponse], error)
	// Raw TX stuff
	GetRawTransaction(context.Context, *connect.Request[v1alpha.GetRawTransactionRequest]) (*connect.Response[v1alpha.GetRawTransactionResponse], error)
	DecodeRawTransaction(context.Context, *connect.Request[v1alpha.DecodeRawTransactionRequest]) (*connect.Response[v1alpha.DecodeRawTransactionResponse], error)
	CreateRawTransaction(context.Context, *connect.Request[v1alpha.CreateRawTransactionRequest]) (*connect.Response[v1alpha.CreateRawTransactionResponse], error)
	GetBlock(context.Context, *connect.Request[v1alpha.GetBlockRequest]) (*connect.Response[v1alpha.GetBlockResponse], error)
	GetBlockHash(context.Context, *connect.Request[v1alpha.GetBlockHashRequest]) (*connect.Response[v1alpha.GetBlockHashResponse], error)
	// Wallet management
	CreateWallet(context.Context, *connect.Request[v1alpha.CreateWalletRequest]) (*connect.Response[v1alpha.CreateWalletResponse], error)
	BackupWallet(context.Context, *connect.Request[v1alpha.BackupWalletRequest]) (*connect.Response[v1alpha.BackupWalletResponse], error)
	DumpWallet(context.Context, *connect.Request[v1alpha.DumpWalletRequest]) (*connect.Response[v1alpha.DumpWalletResponse], error)
	ImportWallet(context.Context, *connect.Request[v1alpha.ImportWalletRequest]) (*connect.Response[v1alpha.ImportWalletResponse], error)
	UnloadWallet(context.Context, *connect.Request[v1alpha.UnloadWalletRequest]) (*connect.Response[v1alpha.UnloadWalletResponse], error)
	// Key/Address management
	DumpPrivKey(context.Context, *connect.Request[v1alpha.DumpPrivKeyRequest]) (*connect.Response[v1alpha.DumpPrivKeyResponse], error)
	ImportPrivKey(context.Context, *connect.Request[v1alpha.ImportPrivKeyRequest]) (*connect.Response[v1alpha.ImportPrivKeyResponse], error)
	ImportAddress(context.Context, *connect.Request[v1alpha.ImportAddressRequest]) (*connect.Response[v1alpha.ImportAddressResponse], error)
	ImportPubKey(context.Context, *connect.Request[v1alpha.ImportPubKeyRequest]) (*connect.Response[v1alpha.ImportPubKeyResponse], error)
	KeyPoolRefill(context.Context, *connect.Request[v1alpha.KeyPoolRefillRequest]) (*connect.Response[v1alpha.KeyPoolRefillResponse], error)
	// Account operations
	GetAccount(context.Context, *connect.Request[v1alpha.GetAccountRequest]) (*connect.Response[v1alpha.GetAccountResponse], error)
	SetAccount(context.Context, *connect.Request[v1alpha.SetAccountRequest]) (*connect.Response[v1alpha.SetAccountResponse], error)
	GetAddressesByAccount(context.Context, *connect.Request[v1alpha.GetAddressesByAccountRequest]) (*connect.Response[v1alpha.GetAddressesByAccountResponse], error)
	ListAccounts(context.Context, *connect.Request[v1alpha.ListAccountsRequest]) (*connect.Response[v1alpha.ListAccountsResponse], error)
	// Multi-sig operations
	AddMultisigAddress(context.Context, *connect.Request[v1alpha.AddMultisigAddressRequest]) (*connect.Response[v1alpha.AddMultisigAddressResponse], error)
	CreateMultisig(context.Context, *connect.Request[v1alpha.CreateMultisigRequest]) (*connect.Response[v1alpha.CreateMultisigResponse], error)
	// PSBT handling
	CreatePsbt(context.Context, *connect.Request[v1alpha.CreatePsbtRequest]) (*connect.Response[v1alpha.CreatePsbtResponse], error)
	DecodePsbt(context.Context, *connect.Request[v1alpha.DecodePsbtRequest]) (*connect.Response[v1alpha.DecodePsbtResponse], error)
	AnalyzePsbt(context.Context, *connect.Request[v1alpha.AnalyzePsbtRequest]) (*connect.Response[v1alpha.AnalyzePsbtResponse], error)
	CombinePsbt(context.Context, *connect.Request[v1alpha.CombinePsbtRequest]) (*connect.Response[v1alpha.CombinePsbtResponse], error)
	UtxoUpdatePsbt(context.Context, *connect.Request[v1alpha.UtxoUpdatePsbtRequest]) (*connect.Response[v1alpha.UtxoUpdatePsbtResponse], error)
	JoinPsbts(context.Context, *connect.Request[v1alpha.JoinPsbtsRequest]) (*connect.Response[v1alpha.JoinPsbtsResponse], error)
	// Transaction misc
	TestMempoolAccept(context.Context, *connect.Request[v1alpha.TestMempoolAcceptRequest]) (*connect.Response[v1alpha.TestMempoolAcceptResponse], error)
}

// NewBitcoinServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBitcoinServiceHandler(svc BitcoinServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bitcoinServiceMethods := v1alpha.File_bitcoin_bitcoind_v1alpha_bitcoin_proto.Services().ByName("BitcoinService").Methods()
	bitcoinServiceGetBlockchainInfoHandler := connect.NewUnaryHandler(
		BitcoinServiceGetBlockchainInfoProcedure,
		svc.GetBlockchainInfo,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetBlockchainInfo")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetPeerInfoHandler := connect.NewUnaryHandler(
		BitcoinServiceGetPeerInfoProcedure,
		svc.GetPeerInfo,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetPeerInfo")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetTransactionHandler := connect.NewUnaryHandler(
		BitcoinServiceGetTransactionProcedure,
		svc.GetTransaction,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceListSinceBlockHandler := connect.NewUnaryHandler(
		BitcoinServiceListSinceBlockProcedure,
		svc.ListSinceBlock,
		connect.WithSchema(bitcoinServiceMethods.ByName("ListSinceBlock")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetNewAddressHandler := connect.NewUnaryHandler(
		BitcoinServiceGetNewAddressProcedure,
		svc.GetNewAddress,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetNewAddress")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetWalletInfoHandler := connect.NewUnaryHandler(
		BitcoinServiceGetWalletInfoProcedure,
		svc.GetWalletInfo,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetWalletInfo")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetBalancesHandler := connect.NewUnaryHandler(
		BitcoinServiceGetBalancesProcedure,
		svc.GetBalances,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetBalances")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceSendHandler := connect.NewUnaryHandler(
		BitcoinServiceSendProcedure,
		svc.Send,
		connect.WithSchema(bitcoinServiceMethods.ByName("Send")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceSendToAddressHandler := connect.NewUnaryHandler(
		BitcoinServiceSendToAddressProcedure,
		svc.SendToAddress,
		connect.WithSchema(bitcoinServiceMethods.ByName("SendToAddress")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceBumpFeeHandler := connect.NewUnaryHandler(
		BitcoinServiceBumpFeeProcedure,
		svc.BumpFee,
		connect.WithSchema(bitcoinServiceMethods.ByName("BumpFee")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceEstimateSmartFeeHandler := connect.NewUnaryHandler(
		BitcoinServiceEstimateSmartFeeProcedure,
		svc.EstimateSmartFee,
		connect.WithSchema(bitcoinServiceMethods.ByName("EstimateSmartFee")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceImportDescriptorsHandler := connect.NewUnaryHandler(
		BitcoinServiceImportDescriptorsProcedure,
		svc.ImportDescriptors,
		connect.WithSchema(bitcoinServiceMethods.ByName("ImportDescriptors")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceListWalletsHandler := connect.NewUnaryHandler(
		BitcoinServiceListWalletsProcedure,
		svc.ListWallets,
		connect.WithSchema(bitcoinServiceMethods.ByName("ListWallets")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceListTransactionsHandler := connect.NewUnaryHandler(
		BitcoinServiceListTransactionsProcedure,
		svc.ListTransactions,
		connect.WithSchema(bitcoinServiceMethods.ByName("ListTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetDescriptorInfoHandler := connect.NewUnaryHandler(
		BitcoinServiceGetDescriptorInfoProcedure,
		svc.GetDescriptorInfo,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetDescriptorInfo")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetAddressInfoHandler := connect.NewUnaryHandler(
		BitcoinServiceGetAddressInfoProcedure,
		svc.GetAddressInfo,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetAddressInfo")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetRawMempoolHandler := connect.NewUnaryHandler(
		BitcoinServiceGetRawMempoolProcedure,
		svc.GetRawMempool,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetRawMempool")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetRawTransactionHandler := connect.NewUnaryHandler(
		BitcoinServiceGetRawTransactionProcedure,
		svc.GetRawTransaction,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetRawTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceDecodeRawTransactionHandler := connect.NewUnaryHandler(
		BitcoinServiceDecodeRawTransactionProcedure,
		svc.DecodeRawTransaction,
		connect.WithSchema(bitcoinServiceMethods.ByName("DecodeRawTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceCreateRawTransactionHandler := connect.NewUnaryHandler(
		BitcoinServiceCreateRawTransactionProcedure,
		svc.CreateRawTransaction,
		connect.WithSchema(bitcoinServiceMethods.ByName("CreateRawTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetBlockHandler := connect.NewUnaryHandler(
		BitcoinServiceGetBlockProcedure,
		svc.GetBlock,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetBlock")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetBlockHashHandler := connect.NewUnaryHandler(
		BitcoinServiceGetBlockHashProcedure,
		svc.GetBlockHash,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetBlockHash")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceCreateWalletHandler := connect.NewUnaryHandler(
		BitcoinServiceCreateWalletProcedure,
		svc.CreateWallet,
		connect.WithSchema(bitcoinServiceMethods.ByName("CreateWallet")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceBackupWalletHandler := connect.NewUnaryHandler(
		BitcoinServiceBackupWalletProcedure,
		svc.BackupWallet,
		connect.WithSchema(bitcoinServiceMethods.ByName("BackupWallet")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceDumpWalletHandler := connect.NewUnaryHandler(
		BitcoinServiceDumpWalletProcedure,
		svc.DumpWallet,
		connect.WithSchema(bitcoinServiceMethods.ByName("DumpWallet")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceImportWalletHandler := connect.NewUnaryHandler(
		BitcoinServiceImportWalletProcedure,
		svc.ImportWallet,
		connect.WithSchema(bitcoinServiceMethods.ByName("ImportWallet")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceUnloadWalletHandler := connect.NewUnaryHandler(
		BitcoinServiceUnloadWalletProcedure,
		svc.UnloadWallet,
		connect.WithSchema(bitcoinServiceMethods.ByName("UnloadWallet")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceDumpPrivKeyHandler := connect.NewUnaryHandler(
		BitcoinServiceDumpPrivKeyProcedure,
		svc.DumpPrivKey,
		connect.WithSchema(bitcoinServiceMethods.ByName("DumpPrivKey")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceImportPrivKeyHandler := connect.NewUnaryHandler(
		BitcoinServiceImportPrivKeyProcedure,
		svc.ImportPrivKey,
		connect.WithSchema(bitcoinServiceMethods.ByName("ImportPrivKey")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceImportAddressHandler := connect.NewUnaryHandler(
		BitcoinServiceImportAddressProcedure,
		svc.ImportAddress,
		connect.WithSchema(bitcoinServiceMethods.ByName("ImportAddress")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceImportPubKeyHandler := connect.NewUnaryHandler(
		BitcoinServiceImportPubKeyProcedure,
		svc.ImportPubKey,
		connect.WithSchema(bitcoinServiceMethods.ByName("ImportPubKey")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceKeyPoolRefillHandler := connect.NewUnaryHandler(
		BitcoinServiceKeyPoolRefillProcedure,
		svc.KeyPoolRefill,
		connect.WithSchema(bitcoinServiceMethods.ByName("KeyPoolRefill")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetAccountHandler := connect.NewUnaryHandler(
		BitcoinServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetAccount")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceSetAccountHandler := connect.NewUnaryHandler(
		BitcoinServiceSetAccountProcedure,
		svc.SetAccount,
		connect.WithSchema(bitcoinServiceMethods.ByName("SetAccount")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceGetAddressesByAccountHandler := connect.NewUnaryHandler(
		BitcoinServiceGetAddressesByAccountProcedure,
		svc.GetAddressesByAccount,
		connect.WithSchema(bitcoinServiceMethods.ByName("GetAddressesByAccount")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceListAccountsHandler := connect.NewUnaryHandler(
		BitcoinServiceListAccountsProcedure,
		svc.ListAccounts,
		connect.WithSchema(bitcoinServiceMethods.ByName("ListAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceAddMultisigAddressHandler := connect.NewUnaryHandler(
		BitcoinServiceAddMultisigAddressProcedure,
		svc.AddMultisigAddress,
		connect.WithSchema(bitcoinServiceMethods.ByName("AddMultisigAddress")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceCreateMultisigHandler := connect.NewUnaryHandler(
		BitcoinServiceCreateMultisigProcedure,
		svc.CreateMultisig,
		connect.WithSchema(bitcoinServiceMethods.ByName("CreateMultisig")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceCreatePsbtHandler := connect.NewUnaryHandler(
		BitcoinServiceCreatePsbtProcedure,
		svc.CreatePsbt,
		connect.WithSchema(bitcoinServiceMethods.ByName("CreatePsbt")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceDecodePsbtHandler := connect.NewUnaryHandler(
		BitcoinServiceDecodePsbtProcedure,
		svc.DecodePsbt,
		connect.WithSchema(bitcoinServiceMethods.ByName("DecodePsbt")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceAnalyzePsbtHandler := connect.NewUnaryHandler(
		BitcoinServiceAnalyzePsbtProcedure,
		svc.AnalyzePsbt,
		connect.WithSchema(bitcoinServiceMethods.ByName("AnalyzePsbt")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceCombinePsbtHandler := connect.NewUnaryHandler(
		BitcoinServiceCombinePsbtProcedure,
		svc.CombinePsbt,
		connect.WithSchema(bitcoinServiceMethods.ByName("CombinePsbt")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceUtxoUpdatePsbtHandler := connect.NewUnaryHandler(
		BitcoinServiceUtxoUpdatePsbtProcedure,
		svc.UtxoUpdatePsbt,
		connect.WithSchema(bitcoinServiceMethods.ByName("UtxoUpdatePsbt")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceJoinPsbtsHandler := connect.NewUnaryHandler(
		BitcoinServiceJoinPsbtsProcedure,
		svc.JoinPsbts,
		connect.WithSchema(bitcoinServiceMethods.ByName("JoinPsbts")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoinServiceTestMempoolAcceptHandler := connect.NewUnaryHandler(
		BitcoinServiceTestMempoolAcceptProcedure,
		svc.TestMempoolAccept,
		connect.WithSchema(bitcoinServiceMethods.ByName("TestMempoolAccept")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bitcoin.bitcoind.v1alpha.BitcoinService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BitcoinServiceGetBlockchainInfoProcedure:
			bitcoinServiceGetBlockchainInfoHandler.ServeHTTP(w, r)
		case BitcoinServiceGetPeerInfoProcedure:
			bitcoinServiceGetPeerInfoHandler.ServeHTTP(w, r)
		case BitcoinServiceGetTransactionProcedure:
			bitcoinServiceGetTransactionHandler.ServeHTTP(w, r)
		case BitcoinServiceListSinceBlockProcedure:
			bitcoinServiceListSinceBlockHandler.ServeHTTP(w, r)
		case BitcoinServiceGetNewAddressProcedure:
			bitcoinServiceGetNewAddressHandler.ServeHTTP(w, r)
		case BitcoinServiceGetWalletInfoProcedure:
			bitcoinServiceGetWalletInfoHandler.ServeHTTP(w, r)
		case BitcoinServiceGetBalancesProcedure:
			bitcoinServiceGetBalancesHandler.ServeHTTP(w, r)
		case BitcoinServiceSendProcedure:
			bitcoinServiceSendHandler.ServeHTTP(w, r)
		case BitcoinServiceSendToAddressProcedure:
			bitcoinServiceSendToAddressHandler.ServeHTTP(w, r)
		case BitcoinServiceBumpFeeProcedure:
			bitcoinServiceBumpFeeHandler.ServeHTTP(w, r)
		case BitcoinServiceEstimateSmartFeeProcedure:
			bitcoinServiceEstimateSmartFeeHandler.ServeHTTP(w, r)
		case BitcoinServiceImportDescriptorsProcedure:
			bitcoinServiceImportDescriptorsHandler.ServeHTTP(w, r)
		case BitcoinServiceListWalletsProcedure:
			bitcoinServiceListWalletsHandler.ServeHTTP(w, r)
		case BitcoinServiceListTransactionsProcedure:
			bitcoinServiceListTransactionsHandler.ServeHTTP(w, r)
		case BitcoinServiceGetDescriptorInfoProcedure:
			bitcoinServiceGetDescriptorInfoHandler.ServeHTTP(w, r)
		case BitcoinServiceGetAddressInfoProcedure:
			bitcoinServiceGetAddressInfoHandler.ServeHTTP(w, r)
		case BitcoinServiceGetRawMempoolProcedure:
			bitcoinServiceGetRawMempoolHandler.ServeHTTP(w, r)
		case BitcoinServiceGetRawTransactionProcedure:
			bitcoinServiceGetRawTransactionHandler.ServeHTTP(w, r)
		case BitcoinServiceDecodeRawTransactionProcedure:
			bitcoinServiceDecodeRawTransactionHandler.ServeHTTP(w, r)
		case BitcoinServiceCreateRawTransactionProcedure:
			bitcoinServiceCreateRawTransactionHandler.ServeHTTP(w, r)
		case BitcoinServiceGetBlockProcedure:
			bitcoinServiceGetBlockHandler.ServeHTTP(w, r)
		case BitcoinServiceGetBlockHashProcedure:
			bitcoinServiceGetBlockHashHandler.ServeHTTP(w, r)
		case BitcoinServiceCreateWalletProcedure:
			bitcoinServiceCreateWalletHandler.ServeHTTP(w, r)
		case BitcoinServiceBackupWalletProcedure:
			bitcoinServiceBackupWalletHandler.ServeHTTP(w, r)
		case BitcoinServiceDumpWalletProcedure:
			bitcoinServiceDumpWalletHandler.ServeHTTP(w, r)
		case BitcoinServiceImportWalletProcedure:
			bitcoinServiceImportWalletHandler.ServeHTTP(w, r)
		case BitcoinServiceUnloadWalletProcedure:
			bitcoinServiceUnloadWalletHandler.ServeHTTP(w, r)
		case BitcoinServiceDumpPrivKeyProcedure:
			bitcoinServiceDumpPrivKeyHandler.ServeHTTP(w, r)
		case BitcoinServiceImportPrivKeyProcedure:
			bitcoinServiceImportPrivKeyHandler.ServeHTTP(w, r)
		case BitcoinServiceImportAddressProcedure:
			bitcoinServiceImportAddressHandler.ServeHTTP(w, r)
		case BitcoinServiceImportPubKeyProcedure:
			bitcoinServiceImportPubKeyHandler.ServeHTTP(w, r)
		case BitcoinServiceKeyPoolRefillProcedure:
			bitcoinServiceKeyPoolRefillHandler.ServeHTTP(w, r)
		case BitcoinServiceGetAccountProcedure:
			bitcoinServiceGetAccountHandler.ServeHTTP(w, r)
		case BitcoinServiceSetAccountProcedure:
			bitcoinServiceSetAccountHandler.ServeHTTP(w, r)
		case BitcoinServiceGetAddressesByAccountProcedure:
			bitcoinServiceGetAddressesByAccountHandler.ServeHTTP(w, r)
		case BitcoinServiceListAccountsProcedure:
			bitcoinServiceListAccountsHandler.ServeHTTP(w, r)
		case BitcoinServiceAddMultisigAddressProcedure:
			bitcoinServiceAddMultisigAddressHandler.ServeHTTP(w, r)
		case BitcoinServiceCreateMultisigProcedure:
			bitcoinServiceCreateMultisigHandler.ServeHTTP(w, r)
		case BitcoinServiceCreatePsbtProcedure:
			bitcoinServiceCreatePsbtHandler.ServeHTTP(w, r)
		case BitcoinServiceDecodePsbtProcedure:
			bitcoinServiceDecodePsbtHandler.ServeHTTP(w, r)
		case BitcoinServiceAnalyzePsbtProcedure:
			bitcoinServiceAnalyzePsbtHandler.ServeHTTP(w, r)
		case BitcoinServiceCombinePsbtProcedure:
			bitcoinServiceCombinePsbtHandler.ServeHTTP(w, r)
		case BitcoinServiceUtxoUpdatePsbtProcedure:
			bitcoinServiceUtxoUpdatePsbtHandler.ServeHTTP(w, r)
		case BitcoinServiceJoinPsbtsProcedure:
			bitcoinServiceJoinPsbtsHandler.ServeHTTP(w, r)
		case BitcoinServiceTestMempoolAcceptProcedure:
			bitcoinServiceTestMempoolAcceptHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBitcoinServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBitcoinServiceHandler struct{}

func (UnimplementedBitcoinServiceHandler) GetBlockchainInfo(context.Context, *connect.Request[v1alpha.GetBlockchainInfoRequest]) (*connect.Response[v1alpha.GetBlockchainInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetBlockchainInfo is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetPeerInfo(context.Context, *connect.Request[v1alpha.GetPeerInfoRequest]) (*connect.Response[v1alpha.GetPeerInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetPeerInfo is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetTransaction(context.Context, *connect.Request[v1alpha.GetTransactionRequest]) (*connect.Response[v1alpha.GetTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetTransaction is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) ListSinceBlock(context.Context, *connect.Request[v1alpha.ListSinceBlockRequest]) (*connect.Response[v1alpha.ListSinceBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.ListSinceBlock is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetNewAddress(context.Context, *connect.Request[v1alpha.GetNewAddressRequest]) (*connect.Response[v1alpha.GetNewAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetNewAddress is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetWalletInfo(context.Context, *connect.Request[v1alpha.GetWalletInfoRequest]) (*connect.Response[v1alpha.GetWalletInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetWalletInfo is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetBalances(context.Context, *connect.Request[v1alpha.GetBalancesRequest]) (*connect.Response[v1alpha.GetBalancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetBalances is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) Send(context.Context, *connect.Request[v1alpha.SendRequest]) (*connect.Response[v1alpha.SendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.Send is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) SendToAddress(context.Context, *connect.Request[v1alpha.SendToAddressRequest]) (*connect.Response[v1alpha.SendToAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.SendToAddress is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) BumpFee(context.Context, *connect.Request[v1alpha.BumpFeeRequest]) (*connect.Response[v1alpha.BumpFeeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.BumpFee is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) EstimateSmartFee(context.Context, *connect.Request[v1alpha.EstimateSmartFeeRequest]) (*connect.Response[v1alpha.EstimateSmartFeeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.EstimateSmartFee is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) ImportDescriptors(context.Context, *connect.Request[v1alpha.ImportDescriptorsRequest]) (*connect.Response[v1alpha.ImportDescriptorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.ImportDescriptors is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) ListWallets(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha.ListWalletsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.ListWallets is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) ListTransactions(context.Context, *connect.Request[v1alpha.ListTransactionsRequest]) (*connect.Response[v1alpha.ListTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.ListTransactions is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetDescriptorInfo(context.Context, *connect.Request[v1alpha.GetDescriptorInfoRequest]) (*connect.Response[v1alpha.GetDescriptorInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetDescriptorInfo is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetAddressInfo(context.Context, *connect.Request[v1alpha.GetAddressInfoRequest]) (*connect.Response[v1alpha.GetAddressInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetAddressInfo is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetRawMempool(context.Context, *connect.Request[v1alpha.GetRawMempoolRequest]) (*connect.Response[v1alpha.GetRawMempoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetRawMempool is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetRawTransaction(context.Context, *connect.Request[v1alpha.GetRawTransactionRequest]) (*connect.Response[v1alpha.GetRawTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetRawTransaction is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) DecodeRawTransaction(context.Context, *connect.Request[v1alpha.DecodeRawTransactionRequest]) (*connect.Response[v1alpha.DecodeRawTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.DecodeRawTransaction is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) CreateRawTransaction(context.Context, *connect.Request[v1alpha.CreateRawTransactionRequest]) (*connect.Response[v1alpha.CreateRawTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.CreateRawTransaction is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetBlock(context.Context, *connect.Request[v1alpha.GetBlockRequest]) (*connect.Response[v1alpha.GetBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetBlock is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetBlockHash(context.Context, *connect.Request[v1alpha.GetBlockHashRequest]) (*connect.Response[v1alpha.GetBlockHashResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetBlockHash is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) CreateWallet(context.Context, *connect.Request[v1alpha.CreateWalletRequest]) (*connect.Response[v1alpha.CreateWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.CreateWallet is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) BackupWallet(context.Context, *connect.Request[v1alpha.BackupWalletRequest]) (*connect.Response[v1alpha.BackupWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.BackupWallet is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) DumpWallet(context.Context, *connect.Request[v1alpha.DumpWalletRequest]) (*connect.Response[v1alpha.DumpWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.DumpWallet is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) ImportWallet(context.Context, *connect.Request[v1alpha.ImportWalletRequest]) (*connect.Response[v1alpha.ImportWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.ImportWallet is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) UnloadWallet(context.Context, *connect.Request[v1alpha.UnloadWalletRequest]) (*connect.Response[v1alpha.UnloadWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.UnloadWallet is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) DumpPrivKey(context.Context, *connect.Request[v1alpha.DumpPrivKeyRequest]) (*connect.Response[v1alpha.DumpPrivKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.DumpPrivKey is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) ImportPrivKey(context.Context, *connect.Request[v1alpha.ImportPrivKeyRequest]) (*connect.Response[v1alpha.ImportPrivKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.ImportPrivKey is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) ImportAddress(context.Context, *connect.Request[v1alpha.ImportAddressRequest]) (*connect.Response[v1alpha.ImportAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.ImportAddress is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) ImportPubKey(context.Context, *connect.Request[v1alpha.ImportPubKeyRequest]) (*connect.Response[v1alpha.ImportPubKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.ImportPubKey is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) KeyPoolRefill(context.Context, *connect.Request[v1alpha.KeyPoolRefillRequest]) (*connect.Response[v1alpha.KeyPoolRefillResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.KeyPoolRefill is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetAccount(context.Context, *connect.Request[v1alpha.GetAccountRequest]) (*connect.Response[v1alpha.GetAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetAccount is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) SetAccount(context.Context, *connect.Request[v1alpha.SetAccountRequest]) (*connect.Response[v1alpha.SetAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.SetAccount is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) GetAddressesByAccount(context.Context, *connect.Request[v1alpha.GetAddressesByAccountRequest]) (*connect.Response[v1alpha.GetAddressesByAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.GetAddressesByAccount is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) ListAccounts(context.Context, *connect.Request[v1alpha.ListAccountsRequest]) (*connect.Response[v1alpha.ListAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.ListAccounts is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) AddMultisigAddress(context.Context, *connect.Request[v1alpha.AddMultisigAddressRequest]) (*connect.Response[v1alpha.AddMultisigAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.AddMultisigAddress is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) CreateMultisig(context.Context, *connect.Request[v1alpha.CreateMultisigRequest]) (*connect.Response[v1alpha.CreateMultisigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.CreateMultisig is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) CreatePsbt(context.Context, *connect.Request[v1alpha.CreatePsbtRequest]) (*connect.Response[v1alpha.CreatePsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.CreatePsbt is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) DecodePsbt(context.Context, *connect.Request[v1alpha.DecodePsbtRequest]) (*connect.Response[v1alpha.DecodePsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.DecodePsbt is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) AnalyzePsbt(context.Context, *connect.Request[v1alpha.AnalyzePsbtRequest]) (*connect.Response[v1alpha.AnalyzePsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.AnalyzePsbt is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) CombinePsbt(context.Context, *connect.Request[v1alpha.CombinePsbtRequest]) (*connect.Response[v1alpha.CombinePsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.CombinePsbt is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) UtxoUpdatePsbt(context.Context, *connect.Request[v1alpha.UtxoUpdatePsbtRequest]) (*connect.Response[v1alpha.UtxoUpdatePsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.UtxoUpdatePsbt is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) JoinPsbts(context.Context, *connect.Request[v1alpha.JoinPsbtsRequest]) (*connect.Response[v1alpha.JoinPsbtsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.JoinPsbts is not implemented"))
}

func (UnimplementedBitcoinServiceHandler) TestMempoolAccept(context.Context, *connect.Request[v1alpha.TestMempoolAcceptRequest]) (*connect.Response[v1alpha.TestMempoolAcceptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.bitcoind.v1alpha.BitcoinService.TestMempoolAccept is not implemented"))
}
