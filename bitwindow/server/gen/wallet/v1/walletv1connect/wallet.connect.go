// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wallet/v1/wallet.proto

package walletv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/bitwindow/server/gen/wallet/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WalletServiceName is the fully-qualified name of the WalletService service.
	WalletServiceName = "wallet.v1.WalletService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WalletServiceSendTransactionProcedure is the fully-qualified name of the WalletService's
	// SendTransaction RPC.
	WalletServiceSendTransactionProcedure = "/wallet.v1.WalletService/SendTransaction"
	// WalletServiceGetBalanceProcedure is the fully-qualified name of the WalletService's GetBalance
	// RPC.
	WalletServiceGetBalanceProcedure = "/wallet.v1.WalletService/GetBalance"
	// WalletServiceGetNewAddressProcedure is the fully-qualified name of the WalletService's
	// GetNewAddress RPC.
	WalletServiceGetNewAddressProcedure = "/wallet.v1.WalletService/GetNewAddress"
	// WalletServiceListTransactionsProcedure is the fully-qualified name of the WalletService's
	// ListTransactions RPC.
	WalletServiceListTransactionsProcedure = "/wallet.v1.WalletService/ListTransactions"
	// WalletServiceListUnspentProcedure is the fully-qualified name of the WalletService's ListUnspent
	// RPC.
	WalletServiceListUnspentProcedure = "/wallet.v1.WalletService/ListUnspent"
	// WalletServiceListReceiveAddressesProcedure is the fully-qualified name of the WalletService's
	// ListReceiveAddresses RPC.
	WalletServiceListReceiveAddressesProcedure = "/wallet.v1.WalletService/ListReceiveAddresses"
	// WalletServiceListSidechainDepositsProcedure is the fully-qualified name of the WalletService's
	// ListSidechainDeposits RPC.
	WalletServiceListSidechainDepositsProcedure = "/wallet.v1.WalletService/ListSidechainDeposits"
	// WalletServiceCreateSidechainDepositProcedure is the fully-qualified name of the WalletService's
	// CreateSidechainDeposit RPC.
	WalletServiceCreateSidechainDepositProcedure = "/wallet.v1.WalletService/CreateSidechainDeposit"
	// WalletServiceSignMessageProcedure is the fully-qualified name of the WalletService's SignMessage
	// RPC.
	WalletServiceSignMessageProcedure = "/wallet.v1.WalletService/SignMessage"
	// WalletServiceVerifyMessageProcedure is the fully-qualified name of the WalletService's
	// VerifyMessage RPC.
	WalletServiceVerifyMessageProcedure = "/wallet.v1.WalletService/VerifyMessage"
	// WalletServiceGetStatsProcedure is the fully-qualified name of the WalletService's GetStats RPC.
	WalletServiceGetStatsProcedure = "/wallet.v1.WalletService/GetStats"
	// WalletServiceUnlockWalletProcedure is the fully-qualified name of the WalletService's
	// UnlockWallet RPC.
	WalletServiceUnlockWalletProcedure = "/wallet.v1.WalletService/UnlockWallet"
	// WalletServiceLockWalletProcedure is the fully-qualified name of the WalletService's LockWallet
	// RPC.
	WalletServiceLockWalletProcedure = "/wallet.v1.WalletService/LockWallet"
	// WalletServiceIsWalletUnlockedProcedure is the fully-qualified name of the WalletService's
	// IsWalletUnlocked RPC.
	WalletServiceIsWalletUnlockedProcedure = "/wallet.v1.WalletService/IsWalletUnlocked"
	// WalletServiceCreateChequeProcedure is the fully-qualified name of the WalletService's
	// CreateCheque RPC.
	WalletServiceCreateChequeProcedure = "/wallet.v1.WalletService/CreateCheque"
	// WalletServiceGetChequeProcedure is the fully-qualified name of the WalletService's GetCheque RPC.
	WalletServiceGetChequeProcedure = "/wallet.v1.WalletService/GetCheque"
	// WalletServiceListChequesProcedure is the fully-qualified name of the WalletService's ListCheques
	// RPC.
	WalletServiceListChequesProcedure = "/wallet.v1.WalletService/ListCheques"
	// WalletServiceCheckChequeFundingProcedure is the fully-qualified name of the WalletService's
	// CheckChequeFunding RPC.
	WalletServiceCheckChequeFundingProcedure = "/wallet.v1.WalletService/CheckChequeFunding"
	// WalletServiceSweepChequeProcedure is the fully-qualified name of the WalletService's SweepCheque
	// RPC.
	WalletServiceSweepChequeProcedure = "/wallet.v1.WalletService/SweepCheque"
)

// WalletServiceClient is a client for the wallet.v1.WalletService service.
type WalletServiceClient interface {
	SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error)
	GetBalance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error)
	// Problem: deriving nilly willy here is potentially problematic. There's no way of listing
	// out unused addresses, so we risk crossing the sync gap.
	GetNewAddress(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error)
	ListTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error)
	ListUnspent(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListUnspentResponse], error)
	ListReceiveAddresses(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListReceiveAddressesResponse], error)
	ListSidechainDeposits(context.Context, *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error)
	CreateSidechainDeposit(context.Context, *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error)
	SignMessage(context.Context, *connect.Request[v1.SignMessageRequest]) (*connect.Response[v1.SignMessageResponse], error)
	VerifyMessage(context.Context, *connect.Request[v1.VerifyMessageRequest]) (*connect.Response[v1.VerifyMessageResponse], error)
	GetStats(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStatsResponse], error)
	// Wallet unlock/lock for cheque operations
	UnlockWallet(context.Context, *connect.Request[v1.UnlockWalletRequest]) (*connect.Response[emptypb.Empty], error)
	LockWallet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	IsWalletUnlocked(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	// Cheque operations
	CreateCheque(context.Context, *connect.Request[v1.CreateChequeRequest]) (*connect.Response[v1.CreateChequeResponse], error)
	GetCheque(context.Context, *connect.Request[v1.GetChequeRequest]) (*connect.Response[v1.GetChequeResponse], error)
	ListCheques(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListChequesResponse], error)
	CheckChequeFunding(context.Context, *connect.Request[v1.CheckChequeFundingRequest]) (*connect.Response[v1.CheckChequeFundingResponse], error)
	SweepCheque(context.Context, *connect.Request[v1.SweepChequeRequest]) (*connect.Response[v1.SweepChequeResponse], error)
}

// NewWalletServiceClient constructs a client for the wallet.v1.WalletService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWalletServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WalletServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	walletServiceMethods := v1.File_wallet_v1_wallet_proto.Services().ByName("WalletService").Methods()
	return &walletServiceClient{
		sendTransaction: connect.NewClient[v1.SendTransactionRequest, v1.SendTransactionResponse](
			httpClient,
			baseURL+WalletServiceSendTransactionProcedure,
			connect.WithSchema(walletServiceMethods.ByName("SendTransaction")),
			connect.WithClientOptions(opts...),
		),
		getBalance: connect.NewClient[emptypb.Empty, v1.GetBalanceResponse](
			httpClient,
			baseURL+WalletServiceGetBalanceProcedure,
			connect.WithSchema(walletServiceMethods.ByName("GetBalance")),
			connect.WithClientOptions(opts...),
		),
		getNewAddress: connect.NewClient[emptypb.Empty, v1.GetNewAddressResponse](
			httpClient,
			baseURL+WalletServiceGetNewAddressProcedure,
			connect.WithSchema(walletServiceMethods.ByName("GetNewAddress")),
			connect.WithClientOptions(opts...),
		),
		listTransactions: connect.NewClient[emptypb.Empty, v1.ListTransactionsResponse](
			httpClient,
			baseURL+WalletServiceListTransactionsProcedure,
			connect.WithSchema(walletServiceMethods.ByName("ListTransactions")),
			connect.WithClientOptions(opts...),
		),
		listUnspent: connect.NewClient[emptypb.Empty, v1.ListUnspentResponse](
			httpClient,
			baseURL+WalletServiceListUnspentProcedure,
			connect.WithSchema(walletServiceMethods.ByName("ListUnspent")),
			connect.WithClientOptions(opts...),
		),
		listReceiveAddresses: connect.NewClient[emptypb.Empty, v1.ListReceiveAddressesResponse](
			httpClient,
			baseURL+WalletServiceListReceiveAddressesProcedure,
			connect.WithSchema(walletServiceMethods.ByName("ListReceiveAddresses")),
			connect.WithClientOptions(opts...),
		),
		listSidechainDeposits: connect.NewClient[v1.ListSidechainDepositsRequest, v1.ListSidechainDepositsResponse](
			httpClient,
			baseURL+WalletServiceListSidechainDepositsProcedure,
			connect.WithSchema(walletServiceMethods.ByName("ListSidechainDeposits")),
			connect.WithClientOptions(opts...),
		),
		createSidechainDeposit: connect.NewClient[v1.CreateSidechainDepositRequest, v1.CreateSidechainDepositResponse](
			httpClient,
			baseURL+WalletServiceCreateSidechainDepositProcedure,
			connect.WithSchema(walletServiceMethods.ByName("CreateSidechainDeposit")),
			connect.WithClientOptions(opts...),
		),
		signMessage: connect.NewClient[v1.SignMessageRequest, v1.SignMessageResponse](
			httpClient,
			baseURL+WalletServiceSignMessageProcedure,
			connect.WithSchema(walletServiceMethods.ByName("SignMessage")),
			connect.WithClientOptions(opts...),
		),
		verifyMessage: connect.NewClient[v1.VerifyMessageRequest, v1.VerifyMessageResponse](
			httpClient,
			baseURL+WalletServiceVerifyMessageProcedure,
			connect.WithSchema(walletServiceMethods.ByName("VerifyMessage")),
			connect.WithClientOptions(opts...),
		),
		getStats: connect.NewClient[emptypb.Empty, v1.GetStatsResponse](
			httpClient,
			baseURL+WalletServiceGetStatsProcedure,
			connect.WithSchema(walletServiceMethods.ByName("GetStats")),
			connect.WithClientOptions(opts...),
		),
		unlockWallet: connect.NewClient[v1.UnlockWalletRequest, emptypb.Empty](
			httpClient,
			baseURL+WalletServiceUnlockWalletProcedure,
			connect.WithSchema(walletServiceMethods.ByName("UnlockWallet")),
			connect.WithClientOptions(opts...),
		),
		lockWallet: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+WalletServiceLockWalletProcedure,
			connect.WithSchema(walletServiceMethods.ByName("LockWallet")),
			connect.WithClientOptions(opts...),
		),
		isWalletUnlocked: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+WalletServiceIsWalletUnlockedProcedure,
			connect.WithSchema(walletServiceMethods.ByName("IsWalletUnlocked")),
			connect.WithClientOptions(opts...),
		),
		createCheque: connect.NewClient[v1.CreateChequeRequest, v1.CreateChequeResponse](
			httpClient,
			baseURL+WalletServiceCreateChequeProcedure,
			connect.WithSchema(walletServiceMethods.ByName("CreateCheque")),
			connect.WithClientOptions(opts...),
		),
		getCheque: connect.NewClient[v1.GetChequeRequest, v1.GetChequeResponse](
			httpClient,
			baseURL+WalletServiceGetChequeProcedure,
			connect.WithSchema(walletServiceMethods.ByName("GetCheque")),
			connect.WithClientOptions(opts...),
		),
		listCheques: connect.NewClient[emptypb.Empty, v1.ListChequesResponse](
			httpClient,
			baseURL+WalletServiceListChequesProcedure,
			connect.WithSchema(walletServiceMethods.ByName("ListCheques")),
			connect.WithClientOptions(opts...),
		),
		checkChequeFunding: connect.NewClient[v1.CheckChequeFundingRequest, v1.CheckChequeFundingResponse](
			httpClient,
			baseURL+WalletServiceCheckChequeFundingProcedure,
			connect.WithSchema(walletServiceMethods.ByName("CheckChequeFunding")),
			connect.WithClientOptions(opts...),
		),
		sweepCheque: connect.NewClient[v1.SweepChequeRequest, v1.SweepChequeResponse](
			httpClient,
			baseURL+WalletServiceSweepChequeProcedure,
			connect.WithSchema(walletServiceMethods.ByName("SweepCheque")),
			connect.WithClientOptions(opts...),
		),
	}
}

// walletServiceClient implements WalletServiceClient.
type walletServiceClient struct {
	sendTransaction        *connect.Client[v1.SendTransactionRequest, v1.SendTransactionResponse]
	getBalance             *connect.Client[emptypb.Empty, v1.GetBalanceResponse]
	getNewAddress          *connect.Client[emptypb.Empty, v1.GetNewAddressResponse]
	listTransactions       *connect.Client[emptypb.Empty, v1.ListTransactionsResponse]
	listUnspent            *connect.Client[emptypb.Empty, v1.ListUnspentResponse]
	listReceiveAddresses   *connect.Client[emptypb.Empty, v1.ListReceiveAddressesResponse]
	listSidechainDeposits  *connect.Client[v1.ListSidechainDepositsRequest, v1.ListSidechainDepositsResponse]
	createSidechainDeposit *connect.Client[v1.CreateSidechainDepositRequest, v1.CreateSidechainDepositResponse]
	signMessage            *connect.Client[v1.SignMessageRequest, v1.SignMessageResponse]
	verifyMessage          *connect.Client[v1.VerifyMessageRequest, v1.VerifyMessageResponse]
	getStats               *connect.Client[emptypb.Empty, v1.GetStatsResponse]
	unlockWallet           *connect.Client[v1.UnlockWalletRequest, emptypb.Empty]
	lockWallet             *connect.Client[emptypb.Empty, emptypb.Empty]
	isWalletUnlocked       *connect.Client[emptypb.Empty, emptypb.Empty]
	createCheque           *connect.Client[v1.CreateChequeRequest, v1.CreateChequeResponse]
	getCheque              *connect.Client[v1.GetChequeRequest, v1.GetChequeResponse]
	listCheques            *connect.Client[emptypb.Empty, v1.ListChequesResponse]
	checkChequeFunding     *connect.Client[v1.CheckChequeFundingRequest, v1.CheckChequeFundingResponse]
	sweepCheque            *connect.Client[v1.SweepChequeRequest, v1.SweepChequeResponse]
}

// SendTransaction calls wallet.v1.WalletService.SendTransaction.
func (c *walletServiceClient) SendTransaction(ctx context.Context, req *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error) {
	return c.sendTransaction.CallUnary(ctx, req)
}

// GetBalance calls wallet.v1.WalletService.GetBalance.
func (c *walletServiceClient) GetBalance(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error) {
	return c.getBalance.CallUnary(ctx, req)
}

// GetNewAddress calls wallet.v1.WalletService.GetNewAddress.
func (c *walletServiceClient) GetNewAddress(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error) {
	return c.getNewAddress.CallUnary(ctx, req)
}

// ListTransactions calls wallet.v1.WalletService.ListTransactions.
func (c *walletServiceClient) ListTransactions(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// ListUnspent calls wallet.v1.WalletService.ListUnspent.
func (c *walletServiceClient) ListUnspent(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListUnspentResponse], error) {
	return c.listUnspent.CallUnary(ctx, req)
}

// ListReceiveAddresses calls wallet.v1.WalletService.ListReceiveAddresses.
func (c *walletServiceClient) ListReceiveAddresses(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListReceiveAddressesResponse], error) {
	return c.listReceiveAddresses.CallUnary(ctx, req)
}

// ListSidechainDeposits calls wallet.v1.WalletService.ListSidechainDeposits.
func (c *walletServiceClient) ListSidechainDeposits(ctx context.Context, req *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error) {
	return c.listSidechainDeposits.CallUnary(ctx, req)
}

// CreateSidechainDeposit calls wallet.v1.WalletService.CreateSidechainDeposit.
func (c *walletServiceClient) CreateSidechainDeposit(ctx context.Context, req *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error) {
	return c.createSidechainDeposit.CallUnary(ctx, req)
}

// SignMessage calls wallet.v1.WalletService.SignMessage.
func (c *walletServiceClient) SignMessage(ctx context.Context, req *connect.Request[v1.SignMessageRequest]) (*connect.Response[v1.SignMessageResponse], error) {
	return c.signMessage.CallUnary(ctx, req)
}

// VerifyMessage calls wallet.v1.WalletService.VerifyMessage.
func (c *walletServiceClient) VerifyMessage(ctx context.Context, req *connect.Request[v1.VerifyMessageRequest]) (*connect.Response[v1.VerifyMessageResponse], error) {
	return c.verifyMessage.CallUnary(ctx, req)
}

// GetStats calls wallet.v1.WalletService.GetStats.
func (c *walletServiceClient) GetStats(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStatsResponse], error) {
	return c.getStats.CallUnary(ctx, req)
}

// UnlockWallet calls wallet.v1.WalletService.UnlockWallet.
func (c *walletServiceClient) UnlockWallet(ctx context.Context, req *connect.Request[v1.UnlockWalletRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.unlockWallet.CallUnary(ctx, req)
}

// LockWallet calls wallet.v1.WalletService.LockWallet.
func (c *walletServiceClient) LockWallet(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.lockWallet.CallUnary(ctx, req)
}

// IsWalletUnlocked calls wallet.v1.WalletService.IsWalletUnlocked.
func (c *walletServiceClient) IsWalletUnlocked(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.isWalletUnlocked.CallUnary(ctx, req)
}

// CreateCheque calls wallet.v1.WalletService.CreateCheque.
func (c *walletServiceClient) CreateCheque(ctx context.Context, req *connect.Request[v1.CreateChequeRequest]) (*connect.Response[v1.CreateChequeResponse], error) {
	return c.createCheque.CallUnary(ctx, req)
}

// GetCheque calls wallet.v1.WalletService.GetCheque.
func (c *walletServiceClient) GetCheque(ctx context.Context, req *connect.Request[v1.GetChequeRequest]) (*connect.Response[v1.GetChequeResponse], error) {
	return c.getCheque.CallUnary(ctx, req)
}

// ListCheques calls wallet.v1.WalletService.ListCheques.
func (c *walletServiceClient) ListCheques(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListChequesResponse], error) {
	return c.listCheques.CallUnary(ctx, req)
}

// CheckChequeFunding calls wallet.v1.WalletService.CheckChequeFunding.
func (c *walletServiceClient) CheckChequeFunding(ctx context.Context, req *connect.Request[v1.CheckChequeFundingRequest]) (*connect.Response[v1.CheckChequeFundingResponse], error) {
	return c.checkChequeFunding.CallUnary(ctx, req)
}

// SweepCheque calls wallet.v1.WalletService.SweepCheque.
func (c *walletServiceClient) SweepCheque(ctx context.Context, req *connect.Request[v1.SweepChequeRequest]) (*connect.Response[v1.SweepChequeResponse], error) {
	return c.sweepCheque.CallUnary(ctx, req)
}

// WalletServiceHandler is an implementation of the wallet.v1.WalletService service.
type WalletServiceHandler interface {
	SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error)
	GetBalance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error)
	// Problem: deriving nilly willy here is potentially problematic. There's no way of listing
	// out unused addresses, so we risk crossing the sync gap.
	GetNewAddress(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error)
	ListTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error)
	ListUnspent(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListUnspentResponse], error)
	ListReceiveAddresses(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListReceiveAddressesResponse], error)
	ListSidechainDeposits(context.Context, *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error)
	CreateSidechainDeposit(context.Context, *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error)
	SignMessage(context.Context, *connect.Request[v1.SignMessageRequest]) (*connect.Response[v1.SignMessageResponse], error)
	VerifyMessage(context.Context, *connect.Request[v1.VerifyMessageRequest]) (*connect.Response[v1.VerifyMessageResponse], error)
	GetStats(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStatsResponse], error)
	// Wallet unlock/lock for cheque operations
	UnlockWallet(context.Context, *connect.Request[v1.UnlockWalletRequest]) (*connect.Response[emptypb.Empty], error)
	LockWallet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	IsWalletUnlocked(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	// Cheque operations
	CreateCheque(context.Context, *connect.Request[v1.CreateChequeRequest]) (*connect.Response[v1.CreateChequeResponse], error)
	GetCheque(context.Context, *connect.Request[v1.GetChequeRequest]) (*connect.Response[v1.GetChequeResponse], error)
	ListCheques(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListChequesResponse], error)
	CheckChequeFunding(context.Context, *connect.Request[v1.CheckChequeFundingRequest]) (*connect.Response[v1.CheckChequeFundingResponse], error)
	SweepCheque(context.Context, *connect.Request[v1.SweepChequeRequest]) (*connect.Response[v1.SweepChequeResponse], error)
}

// NewWalletServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWalletServiceHandler(svc WalletServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	walletServiceMethods := v1.File_wallet_v1_wallet_proto.Services().ByName("WalletService").Methods()
	walletServiceSendTransactionHandler := connect.NewUnaryHandler(
		WalletServiceSendTransactionProcedure,
		svc.SendTransaction,
		connect.WithSchema(walletServiceMethods.ByName("SendTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetBalanceHandler := connect.NewUnaryHandler(
		WalletServiceGetBalanceProcedure,
		svc.GetBalance,
		connect.WithSchema(walletServiceMethods.ByName("GetBalance")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetNewAddressHandler := connect.NewUnaryHandler(
		WalletServiceGetNewAddressProcedure,
		svc.GetNewAddress,
		connect.WithSchema(walletServiceMethods.ByName("GetNewAddress")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceListTransactionsHandler := connect.NewUnaryHandler(
		WalletServiceListTransactionsProcedure,
		svc.ListTransactions,
		connect.WithSchema(walletServiceMethods.ByName("ListTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceListUnspentHandler := connect.NewUnaryHandler(
		WalletServiceListUnspentProcedure,
		svc.ListUnspent,
		connect.WithSchema(walletServiceMethods.ByName("ListUnspent")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceListReceiveAddressesHandler := connect.NewUnaryHandler(
		WalletServiceListReceiveAddressesProcedure,
		svc.ListReceiveAddresses,
		connect.WithSchema(walletServiceMethods.ByName("ListReceiveAddresses")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceListSidechainDepositsHandler := connect.NewUnaryHandler(
		WalletServiceListSidechainDepositsProcedure,
		svc.ListSidechainDeposits,
		connect.WithSchema(walletServiceMethods.ByName("ListSidechainDeposits")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreateSidechainDepositHandler := connect.NewUnaryHandler(
		WalletServiceCreateSidechainDepositProcedure,
		svc.CreateSidechainDeposit,
		connect.WithSchema(walletServiceMethods.ByName("CreateSidechainDeposit")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceSignMessageHandler := connect.NewUnaryHandler(
		WalletServiceSignMessageProcedure,
		svc.SignMessage,
		connect.WithSchema(walletServiceMethods.ByName("SignMessage")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceVerifyMessageHandler := connect.NewUnaryHandler(
		WalletServiceVerifyMessageProcedure,
		svc.VerifyMessage,
		connect.WithSchema(walletServiceMethods.ByName("VerifyMessage")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetStatsHandler := connect.NewUnaryHandler(
		WalletServiceGetStatsProcedure,
		svc.GetStats,
		connect.WithSchema(walletServiceMethods.ByName("GetStats")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceUnlockWalletHandler := connect.NewUnaryHandler(
		WalletServiceUnlockWalletProcedure,
		svc.UnlockWallet,
		connect.WithSchema(walletServiceMethods.ByName("UnlockWallet")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceLockWalletHandler := connect.NewUnaryHandler(
		WalletServiceLockWalletProcedure,
		svc.LockWallet,
		connect.WithSchema(walletServiceMethods.ByName("LockWallet")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceIsWalletUnlockedHandler := connect.NewUnaryHandler(
		WalletServiceIsWalletUnlockedProcedure,
		svc.IsWalletUnlocked,
		connect.WithSchema(walletServiceMethods.ByName("IsWalletUnlocked")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreateChequeHandler := connect.NewUnaryHandler(
		WalletServiceCreateChequeProcedure,
		svc.CreateCheque,
		connect.WithSchema(walletServiceMethods.ByName("CreateCheque")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetChequeHandler := connect.NewUnaryHandler(
		WalletServiceGetChequeProcedure,
		svc.GetCheque,
		connect.WithSchema(walletServiceMethods.ByName("GetCheque")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceListChequesHandler := connect.NewUnaryHandler(
		WalletServiceListChequesProcedure,
		svc.ListCheques,
		connect.WithSchema(walletServiceMethods.ByName("ListCheques")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCheckChequeFundingHandler := connect.NewUnaryHandler(
		WalletServiceCheckChequeFundingProcedure,
		svc.CheckChequeFunding,
		connect.WithSchema(walletServiceMethods.ByName("CheckChequeFunding")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceSweepChequeHandler := connect.NewUnaryHandler(
		WalletServiceSweepChequeProcedure,
		svc.SweepCheque,
		connect.WithSchema(walletServiceMethods.ByName("SweepCheque")),
		connect.WithHandlerOptions(opts...),
	)
	return "/wallet.v1.WalletService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WalletServiceSendTransactionProcedure:
			walletServiceSendTransactionHandler.ServeHTTP(w, r)
		case WalletServiceGetBalanceProcedure:
			walletServiceGetBalanceHandler.ServeHTTP(w, r)
		case WalletServiceGetNewAddressProcedure:
			walletServiceGetNewAddressHandler.ServeHTTP(w, r)
		case WalletServiceListTransactionsProcedure:
			walletServiceListTransactionsHandler.ServeHTTP(w, r)
		case WalletServiceListUnspentProcedure:
			walletServiceListUnspentHandler.ServeHTTP(w, r)
		case WalletServiceListReceiveAddressesProcedure:
			walletServiceListReceiveAddressesHandler.ServeHTTP(w, r)
		case WalletServiceListSidechainDepositsProcedure:
			walletServiceListSidechainDepositsHandler.ServeHTTP(w, r)
		case WalletServiceCreateSidechainDepositProcedure:
			walletServiceCreateSidechainDepositHandler.ServeHTTP(w, r)
		case WalletServiceSignMessageProcedure:
			walletServiceSignMessageHandler.ServeHTTP(w, r)
		case WalletServiceVerifyMessageProcedure:
			walletServiceVerifyMessageHandler.ServeHTTP(w, r)
		case WalletServiceGetStatsProcedure:
			walletServiceGetStatsHandler.ServeHTTP(w, r)
		case WalletServiceUnlockWalletProcedure:
			walletServiceUnlockWalletHandler.ServeHTTP(w, r)
		case WalletServiceLockWalletProcedure:
			walletServiceLockWalletHandler.ServeHTTP(w, r)
		case WalletServiceIsWalletUnlockedProcedure:
			walletServiceIsWalletUnlockedHandler.ServeHTTP(w, r)
		case WalletServiceCreateChequeProcedure:
			walletServiceCreateChequeHandler.ServeHTTP(w, r)
		case WalletServiceGetChequeProcedure:
			walletServiceGetChequeHandler.ServeHTTP(w, r)
		case WalletServiceListChequesProcedure:
			walletServiceListChequesHandler.ServeHTTP(w, r)
		case WalletServiceCheckChequeFundingProcedure:
			walletServiceCheckChequeFundingHandler.ServeHTTP(w, r)
		case WalletServiceSweepChequeProcedure:
			walletServiceSweepChequeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWalletServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWalletServiceHandler struct{}

func (UnimplementedWalletServiceHandler) SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.SendTransaction is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetBalance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.GetBalance is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetNewAddress(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.GetNewAddress is not implemented"))
}

func (UnimplementedWalletServiceHandler) ListTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.ListTransactions is not implemented"))
}

func (UnimplementedWalletServiceHandler) ListUnspent(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListUnspentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.ListUnspent is not implemented"))
}

func (UnimplementedWalletServiceHandler) ListReceiveAddresses(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListReceiveAddressesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.ListReceiveAddresses is not implemented"))
}

func (UnimplementedWalletServiceHandler) ListSidechainDeposits(context.Context, *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.ListSidechainDeposits is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateSidechainDeposit(context.Context, *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.CreateSidechainDeposit is not implemented"))
}

func (UnimplementedWalletServiceHandler) SignMessage(context.Context, *connect.Request[v1.SignMessageRequest]) (*connect.Response[v1.SignMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.SignMessage is not implemented"))
}

func (UnimplementedWalletServiceHandler) VerifyMessage(context.Context, *connect.Request[v1.VerifyMessageRequest]) (*connect.Response[v1.VerifyMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.VerifyMessage is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetStats(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.GetStats is not implemented"))
}

func (UnimplementedWalletServiceHandler) UnlockWallet(context.Context, *connect.Request[v1.UnlockWalletRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.UnlockWallet is not implemented"))
}

func (UnimplementedWalletServiceHandler) LockWallet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.LockWallet is not implemented"))
}

func (UnimplementedWalletServiceHandler) IsWalletUnlocked(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.IsWalletUnlocked is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateCheque(context.Context, *connect.Request[v1.CreateChequeRequest]) (*connect.Response[v1.CreateChequeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.CreateCheque is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetCheque(context.Context, *connect.Request[v1.GetChequeRequest]) (*connect.Response[v1.GetChequeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.GetCheque is not implemented"))
}

func (UnimplementedWalletServiceHandler) ListCheques(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListChequesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.ListCheques is not implemented"))
}

func (UnimplementedWalletServiceHandler) CheckChequeFunding(context.Context, *connect.Request[v1.CheckChequeFundingRequest]) (*connect.Response[v1.CheckChequeFundingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.CheckChequeFunding is not implemented"))
}

func (UnimplementedWalletServiceHandler) SweepCheque(context.Context, *connect.Request[v1.SweepChequeRequest]) (*connect.Response[v1.SweepChequeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.SweepCheque is not implemented"))
}
