// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: misc/v1/misc.proto

package miscv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/servers/bitwindow/gen/misc/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MiscServiceName is the fully-qualified name of the MiscService service.
	MiscServiceName = "misc.v1.MiscService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MiscServiceListOPReturnProcedure is the fully-qualified name of the MiscService's ListOPReturn
	// RPC.
	MiscServiceListOPReturnProcedure = "/misc.v1.MiscService/ListOPReturn"
	// MiscServiceBroadcastNewsProcedure is the fully-qualified name of the MiscService's BroadcastNews
	// RPC.
	MiscServiceBroadcastNewsProcedure = "/misc.v1.MiscService/BroadcastNews"
	// MiscServiceCreateTopicProcedure is the fully-qualified name of the MiscService's CreateTopic RPC.
	MiscServiceCreateTopicProcedure = "/misc.v1.MiscService/CreateTopic"
	// MiscServiceListTopicsProcedure is the fully-qualified name of the MiscService's ListTopics RPC.
	MiscServiceListTopicsProcedure = "/misc.v1.MiscService/ListTopics"
	// MiscServiceListCoinNewsProcedure is the fully-qualified name of the MiscService's ListCoinNews
	// RPC.
	MiscServiceListCoinNewsProcedure = "/misc.v1.MiscService/ListCoinNews"
)

// MiscServiceClient is a client for the misc.v1.MiscService service.
type MiscServiceClient interface {
	ListOPReturn(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListOPReturnResponse], error)
	BroadcastNews(context.Context, *connect.Request[v1.BroadcastNewsRequest]) (*connect.Response[v1.BroadcastNewsResponse], error)
	CreateTopic(context.Context, *connect.Request[v1.CreateTopicRequest]) (*connect.Response[v1.CreateTopicResponse], error)
	ListTopics(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTopicsResponse], error)
	ListCoinNews(context.Context, *connect.Request[v1.ListCoinNewsRequest]) (*connect.Response[v1.ListCoinNewsResponse], error)
}

// NewMiscServiceClient constructs a client for the misc.v1.MiscService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMiscServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MiscServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	miscServiceMethods := v1.File_misc_v1_misc_proto.Services().ByName("MiscService").Methods()
	return &miscServiceClient{
		listOPReturn: connect.NewClient[emptypb.Empty, v1.ListOPReturnResponse](
			httpClient,
			baseURL+MiscServiceListOPReturnProcedure,
			connect.WithSchema(miscServiceMethods.ByName("ListOPReturn")),
			connect.WithClientOptions(opts...),
		),
		broadcastNews: connect.NewClient[v1.BroadcastNewsRequest, v1.BroadcastNewsResponse](
			httpClient,
			baseURL+MiscServiceBroadcastNewsProcedure,
			connect.WithSchema(miscServiceMethods.ByName("BroadcastNews")),
			connect.WithClientOptions(opts...),
		),
		createTopic: connect.NewClient[v1.CreateTopicRequest, v1.CreateTopicResponse](
			httpClient,
			baseURL+MiscServiceCreateTopicProcedure,
			connect.WithSchema(miscServiceMethods.ByName("CreateTopic")),
			connect.WithClientOptions(opts...),
		),
		listTopics: connect.NewClient[emptypb.Empty, v1.ListTopicsResponse](
			httpClient,
			baseURL+MiscServiceListTopicsProcedure,
			connect.WithSchema(miscServiceMethods.ByName("ListTopics")),
			connect.WithClientOptions(opts...),
		),
		listCoinNews: connect.NewClient[v1.ListCoinNewsRequest, v1.ListCoinNewsResponse](
			httpClient,
			baseURL+MiscServiceListCoinNewsProcedure,
			connect.WithSchema(miscServiceMethods.ByName("ListCoinNews")),
			connect.WithClientOptions(opts...),
		),
	}
}

// miscServiceClient implements MiscServiceClient.
type miscServiceClient struct {
	listOPReturn  *connect.Client[emptypb.Empty, v1.ListOPReturnResponse]
	broadcastNews *connect.Client[v1.BroadcastNewsRequest, v1.BroadcastNewsResponse]
	createTopic   *connect.Client[v1.CreateTopicRequest, v1.CreateTopicResponse]
	listTopics    *connect.Client[emptypb.Empty, v1.ListTopicsResponse]
	listCoinNews  *connect.Client[v1.ListCoinNewsRequest, v1.ListCoinNewsResponse]
}

// ListOPReturn calls misc.v1.MiscService.ListOPReturn.
func (c *miscServiceClient) ListOPReturn(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListOPReturnResponse], error) {
	return c.listOPReturn.CallUnary(ctx, req)
}

// BroadcastNews calls misc.v1.MiscService.BroadcastNews.
func (c *miscServiceClient) BroadcastNews(ctx context.Context, req *connect.Request[v1.BroadcastNewsRequest]) (*connect.Response[v1.BroadcastNewsResponse], error) {
	return c.broadcastNews.CallUnary(ctx, req)
}

// CreateTopic calls misc.v1.MiscService.CreateTopic.
func (c *miscServiceClient) CreateTopic(ctx context.Context, req *connect.Request[v1.CreateTopicRequest]) (*connect.Response[v1.CreateTopicResponse], error) {
	return c.createTopic.CallUnary(ctx, req)
}

// ListTopics calls misc.v1.MiscService.ListTopics.
func (c *miscServiceClient) ListTopics(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTopicsResponse], error) {
	return c.listTopics.CallUnary(ctx, req)
}

// ListCoinNews calls misc.v1.MiscService.ListCoinNews.
func (c *miscServiceClient) ListCoinNews(ctx context.Context, req *connect.Request[v1.ListCoinNewsRequest]) (*connect.Response[v1.ListCoinNewsResponse], error) {
	return c.listCoinNews.CallUnary(ctx, req)
}

// MiscServiceHandler is an implementation of the misc.v1.MiscService service.
type MiscServiceHandler interface {
	ListOPReturn(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListOPReturnResponse], error)
	BroadcastNews(context.Context, *connect.Request[v1.BroadcastNewsRequest]) (*connect.Response[v1.BroadcastNewsResponse], error)
	CreateTopic(context.Context, *connect.Request[v1.CreateTopicRequest]) (*connect.Response[v1.CreateTopicResponse], error)
	ListTopics(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTopicsResponse], error)
	ListCoinNews(context.Context, *connect.Request[v1.ListCoinNewsRequest]) (*connect.Response[v1.ListCoinNewsResponse], error)
}

// NewMiscServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMiscServiceHandler(svc MiscServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	miscServiceMethods := v1.File_misc_v1_misc_proto.Services().ByName("MiscService").Methods()
	miscServiceListOPReturnHandler := connect.NewUnaryHandler(
		MiscServiceListOPReturnProcedure,
		svc.ListOPReturn,
		connect.WithSchema(miscServiceMethods.ByName("ListOPReturn")),
		connect.WithHandlerOptions(opts...),
	)
	miscServiceBroadcastNewsHandler := connect.NewUnaryHandler(
		MiscServiceBroadcastNewsProcedure,
		svc.BroadcastNews,
		connect.WithSchema(miscServiceMethods.ByName("BroadcastNews")),
		connect.WithHandlerOptions(opts...),
	)
	miscServiceCreateTopicHandler := connect.NewUnaryHandler(
		MiscServiceCreateTopicProcedure,
		svc.CreateTopic,
		connect.WithSchema(miscServiceMethods.ByName("CreateTopic")),
		connect.WithHandlerOptions(opts...),
	)
	miscServiceListTopicsHandler := connect.NewUnaryHandler(
		MiscServiceListTopicsProcedure,
		svc.ListTopics,
		connect.WithSchema(miscServiceMethods.ByName("ListTopics")),
		connect.WithHandlerOptions(opts...),
	)
	miscServiceListCoinNewsHandler := connect.NewUnaryHandler(
		MiscServiceListCoinNewsProcedure,
		svc.ListCoinNews,
		connect.WithSchema(miscServiceMethods.ByName("ListCoinNews")),
		connect.WithHandlerOptions(opts...),
	)
	return "/misc.v1.MiscService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MiscServiceListOPReturnProcedure:
			miscServiceListOPReturnHandler.ServeHTTP(w, r)
		case MiscServiceBroadcastNewsProcedure:
			miscServiceBroadcastNewsHandler.ServeHTTP(w, r)
		case MiscServiceCreateTopicProcedure:
			miscServiceCreateTopicHandler.ServeHTTP(w, r)
		case MiscServiceListTopicsProcedure:
			miscServiceListTopicsHandler.ServeHTTP(w, r)
		case MiscServiceListCoinNewsProcedure:
			miscServiceListCoinNewsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMiscServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMiscServiceHandler struct{}

func (UnimplementedMiscServiceHandler) ListOPReturn(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListOPReturnResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("misc.v1.MiscService.ListOPReturn is not implemented"))
}

func (UnimplementedMiscServiceHandler) BroadcastNews(context.Context, *connect.Request[v1.BroadcastNewsRequest]) (*connect.Response[v1.BroadcastNewsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("misc.v1.MiscService.BroadcastNews is not implemented"))
}

func (UnimplementedMiscServiceHandler) CreateTopic(context.Context, *connect.Request[v1.CreateTopicRequest]) (*connect.Response[v1.CreateTopicResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("misc.v1.MiscService.CreateTopic is not implemented"))
}

func (UnimplementedMiscServiceHandler) ListTopics(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTopicsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("misc.v1.MiscService.ListTopics is not implemented"))
}

func (UnimplementedMiscServiceHandler) ListCoinNews(context.Context, *connect.Request[v1.ListCoinNewsRequest]) (*connect.Response[v1.ListCoinNewsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("misc.v1.MiscService.ListCoinNews is not implemented"))
}
