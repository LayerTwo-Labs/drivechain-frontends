// Code generated by MockGen. DO NOT EDIT.
// Source: ../gen/bitcoin/bitcoind/v1alpha/bitcoindv1alphaconnect/bitcoin.connect.go
//
// Generated by this command:
//
//	mockgen -source=../gen/bitcoin/bitcoind/v1alpha/bitcoindv1alphaconnect/bitcoin.connect.go -destination=mocks/mock_bitcoind.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	bitcoindv1alpha "github.com/barebitcoin/btc-buf/gen/bitcoin/bitcoind/v1alpha"
	gomock "go.uber.org/mock/gomock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockBitcoinServiceClient is a mock of BitcoinServiceClient interface.
type MockBitcoinServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBitcoinServiceClientMockRecorder
	isgomock struct{}
}

// MockBitcoinServiceClientMockRecorder is the mock recorder for MockBitcoinServiceClient.
type MockBitcoinServiceClientMockRecorder struct {
	mock *MockBitcoinServiceClient
}

// NewMockBitcoinServiceClient creates a new mock instance.
func NewMockBitcoinServiceClient(ctrl *gomock.Controller) *MockBitcoinServiceClient {
	mock := &MockBitcoinServiceClient{ctrl: ctrl}
	mock.recorder = &MockBitcoinServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBitcoinServiceClient) EXPECT() *MockBitcoinServiceClientMockRecorder {
	return m.recorder
}

// AddMultisigAddress mocks base method.
func (m *MockBitcoinServiceClient) AddMultisigAddress(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.AddMultisigAddressRequest]) (*connect.Response[bitcoindv1alpha.AddMultisigAddressResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMultisigAddress", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.AddMultisigAddressResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMultisigAddress indicates an expected call of AddMultisigAddress.
func (mr *MockBitcoinServiceClientMockRecorder) AddMultisigAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMultisigAddress", reflect.TypeOf((*MockBitcoinServiceClient)(nil).AddMultisigAddress), arg0, arg1)
}

// AnalyzePsbt mocks base method.
func (m *MockBitcoinServiceClient) AnalyzePsbt(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.AnalyzePsbtRequest]) (*connect.Response[bitcoindv1alpha.AnalyzePsbtResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzePsbt", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.AnalyzePsbtResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzePsbt indicates an expected call of AnalyzePsbt.
func (mr *MockBitcoinServiceClientMockRecorder) AnalyzePsbt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzePsbt", reflect.TypeOf((*MockBitcoinServiceClient)(nil).AnalyzePsbt), arg0, arg1)
}

// BackupWallet mocks base method.
func (m *MockBitcoinServiceClient) BackupWallet(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.BackupWalletRequest]) (*connect.Response[bitcoindv1alpha.BackupWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.BackupWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupWallet indicates an expected call of BackupWallet.
func (mr *MockBitcoinServiceClientMockRecorder) BackupWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupWallet", reflect.TypeOf((*MockBitcoinServiceClient)(nil).BackupWallet), arg0, arg1)
}

// BumpFee mocks base method.
func (m *MockBitcoinServiceClient) BumpFee(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.BumpFeeRequest]) (*connect.Response[bitcoindv1alpha.BumpFeeResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BumpFee", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.BumpFeeResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BumpFee indicates an expected call of BumpFee.
func (mr *MockBitcoinServiceClientMockRecorder) BumpFee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BumpFee", reflect.TypeOf((*MockBitcoinServiceClient)(nil).BumpFee), arg0, arg1)
}

// CombinePsbt mocks base method.
func (m *MockBitcoinServiceClient) CombinePsbt(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.CombinePsbtRequest]) (*connect.Response[bitcoindv1alpha.CombinePsbtResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CombinePsbt", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.CombinePsbtResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CombinePsbt indicates an expected call of CombinePsbt.
func (mr *MockBitcoinServiceClientMockRecorder) CombinePsbt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CombinePsbt", reflect.TypeOf((*MockBitcoinServiceClient)(nil).CombinePsbt), arg0, arg1)
}

// CreateMultisig mocks base method.
func (m *MockBitcoinServiceClient) CreateMultisig(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.CreateMultisigRequest]) (*connect.Response[bitcoindv1alpha.CreateMultisigResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultisig", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.CreateMultisigResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultisig indicates an expected call of CreateMultisig.
func (mr *MockBitcoinServiceClientMockRecorder) CreateMultisig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultisig", reflect.TypeOf((*MockBitcoinServiceClient)(nil).CreateMultisig), arg0, arg1)
}

// CreatePsbt mocks base method.
func (m *MockBitcoinServiceClient) CreatePsbt(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.CreatePsbtRequest]) (*connect.Response[bitcoindv1alpha.CreatePsbtResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePsbt", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.CreatePsbtResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePsbt indicates an expected call of CreatePsbt.
func (mr *MockBitcoinServiceClientMockRecorder) CreatePsbt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePsbt", reflect.TypeOf((*MockBitcoinServiceClient)(nil).CreatePsbt), arg0, arg1)
}

// CreateRawTransaction mocks base method.
func (m *MockBitcoinServiceClient) CreateRawTransaction(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.CreateRawTransactionRequest]) (*connect.Response[bitcoindv1alpha.CreateRawTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRawTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.CreateRawTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRawTransaction indicates an expected call of CreateRawTransaction.
func (mr *MockBitcoinServiceClientMockRecorder) CreateRawTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRawTransaction", reflect.TypeOf((*MockBitcoinServiceClient)(nil).CreateRawTransaction), arg0, arg1)
}

// CreateWallet mocks base method.
func (m *MockBitcoinServiceClient) CreateWallet(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.CreateWalletRequest]) (*connect.Response[bitcoindv1alpha.CreateWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.CreateWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockBitcoinServiceClientMockRecorder) CreateWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockBitcoinServiceClient)(nil).CreateWallet), arg0, arg1)
}

// DecodePsbt mocks base method.
func (m *MockBitcoinServiceClient) DecodePsbt(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.DecodePsbtRequest]) (*connect.Response[bitcoindv1alpha.DecodePsbtResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodePsbt", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.DecodePsbtResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodePsbt indicates an expected call of DecodePsbt.
func (mr *MockBitcoinServiceClientMockRecorder) DecodePsbt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodePsbt", reflect.TypeOf((*MockBitcoinServiceClient)(nil).DecodePsbt), arg0, arg1)
}

// DecodeRawTransaction mocks base method.
func (m *MockBitcoinServiceClient) DecodeRawTransaction(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.DecodeRawTransactionRequest]) (*connect.Response[bitcoindv1alpha.DecodeRawTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRawTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.DecodeRawTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRawTransaction indicates an expected call of DecodeRawTransaction.
func (mr *MockBitcoinServiceClientMockRecorder) DecodeRawTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRawTransaction", reflect.TypeOf((*MockBitcoinServiceClient)(nil).DecodeRawTransaction), arg0, arg1)
}

// DumpPrivKey mocks base method.
func (m *MockBitcoinServiceClient) DumpPrivKey(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.DumpPrivKeyRequest]) (*connect.Response[bitcoindv1alpha.DumpPrivKeyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpPrivKey", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.DumpPrivKeyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpPrivKey indicates an expected call of DumpPrivKey.
func (mr *MockBitcoinServiceClientMockRecorder) DumpPrivKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpPrivKey", reflect.TypeOf((*MockBitcoinServiceClient)(nil).DumpPrivKey), arg0, arg1)
}

// DumpWallet mocks base method.
func (m *MockBitcoinServiceClient) DumpWallet(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.DumpWalletRequest]) (*connect.Response[bitcoindv1alpha.DumpWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.DumpWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpWallet indicates an expected call of DumpWallet.
func (mr *MockBitcoinServiceClientMockRecorder) DumpWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpWallet", reflect.TypeOf((*MockBitcoinServiceClient)(nil).DumpWallet), arg0, arg1)
}

// EstimateSmartFee mocks base method.
func (m *MockBitcoinServiceClient) EstimateSmartFee(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.EstimateSmartFeeRequest]) (*connect.Response[bitcoindv1alpha.EstimateSmartFeeResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateSmartFee", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.EstimateSmartFeeResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateSmartFee indicates an expected call of EstimateSmartFee.
func (mr *MockBitcoinServiceClientMockRecorder) EstimateSmartFee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateSmartFee", reflect.TypeOf((*MockBitcoinServiceClient)(nil).EstimateSmartFee), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockBitcoinServiceClient) GetAccount(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetAccountRequest]) (*connect.Response[bitcoindv1alpha.GetAccountResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetAccountResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockBitcoinServiceClientMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetAccount), arg0, arg1)
}

// GetAddressInfo mocks base method.
func (m *MockBitcoinServiceClient) GetAddressInfo(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetAddressInfoRequest]) (*connect.Response[bitcoindv1alpha.GetAddressInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetAddressInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressInfo indicates an expected call of GetAddressInfo.
func (mr *MockBitcoinServiceClientMockRecorder) GetAddressInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressInfo", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetAddressInfo), arg0, arg1)
}

// GetAddressesByAccount mocks base method.
func (m *MockBitcoinServiceClient) GetAddressesByAccount(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetAddressesByAccountRequest]) (*connect.Response[bitcoindv1alpha.GetAddressesByAccountResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressesByAccount", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetAddressesByAccountResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressesByAccount indicates an expected call of GetAddressesByAccount.
func (mr *MockBitcoinServiceClientMockRecorder) GetAddressesByAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressesByAccount", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetAddressesByAccount), arg0, arg1)
}

// GetBalances mocks base method.
func (m *MockBitcoinServiceClient) GetBalances(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetBalancesRequest]) (*connect.Response[bitcoindv1alpha.GetBalancesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalances", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetBalancesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalances indicates an expected call of GetBalances.
func (mr *MockBitcoinServiceClientMockRecorder) GetBalances(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalances", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetBalances), arg0, arg1)
}

// GetBlock mocks base method.
func (m *MockBitcoinServiceClient) GetBlock(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetBlockRequest]) (*connect.Response[bitcoindv1alpha.GetBlockResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetBlockResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBitcoinServiceClientMockRecorder) GetBlock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetBlock), arg0, arg1)
}

// GetBlockHash mocks base method.
func (m *MockBitcoinServiceClient) GetBlockHash(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetBlockHashRequest]) (*connect.Response[bitcoindv1alpha.GetBlockHashResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetBlockHashResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockBitcoinServiceClientMockRecorder) GetBlockHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetBlockHash), arg0, arg1)
}

// GetBlockchainInfo mocks base method.
func (m *MockBitcoinServiceClient) GetBlockchainInfo(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetBlockchainInfoRequest]) (*connect.Response[bitcoindv1alpha.GetBlockchainInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockchainInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetBlockchainInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainInfo indicates an expected call of GetBlockchainInfo.
func (mr *MockBitcoinServiceClientMockRecorder) GetBlockchainInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainInfo", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetBlockchainInfo), arg0, arg1)
}

// GetDescriptorInfo mocks base method.
func (m *MockBitcoinServiceClient) GetDescriptorInfo(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetDescriptorInfoRequest]) (*connect.Response[bitcoindv1alpha.GetDescriptorInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescriptorInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetDescriptorInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDescriptorInfo indicates an expected call of GetDescriptorInfo.
func (mr *MockBitcoinServiceClientMockRecorder) GetDescriptorInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescriptorInfo", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetDescriptorInfo), arg0, arg1)
}

// GetNewAddress mocks base method.
func (m *MockBitcoinServiceClient) GetNewAddress(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetNewAddressRequest]) (*connect.Response[bitcoindv1alpha.GetNewAddressResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewAddress", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetNewAddressResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewAddress indicates an expected call of GetNewAddress.
func (mr *MockBitcoinServiceClientMockRecorder) GetNewAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewAddress", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetNewAddress), arg0, arg1)
}

// GetPeerInfo mocks base method.
func (m *MockBitcoinServiceClient) GetPeerInfo(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetPeerInfoRequest]) (*connect.Response[bitcoindv1alpha.GetPeerInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetPeerInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerInfo indicates an expected call of GetPeerInfo.
func (mr *MockBitcoinServiceClientMockRecorder) GetPeerInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerInfo", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetPeerInfo), arg0, arg1)
}

// GetRawMempool mocks base method.
func (m *MockBitcoinServiceClient) GetRawMempool(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetRawMempoolRequest]) (*connect.Response[bitcoindv1alpha.GetRawMempoolResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawMempool", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetRawMempoolResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawMempool indicates an expected call of GetRawMempool.
func (mr *MockBitcoinServiceClientMockRecorder) GetRawMempool(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawMempool", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetRawMempool), arg0, arg1)
}

// GetRawTransaction mocks base method.
func (m *MockBitcoinServiceClient) GetRawTransaction(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetRawTransactionRequest]) (*connect.Response[bitcoindv1alpha.GetRawTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetRawTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransaction indicates an expected call of GetRawTransaction.
func (mr *MockBitcoinServiceClientMockRecorder) GetRawTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransaction", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetRawTransaction), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockBitcoinServiceClient) GetTransaction(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetTransactionRequest]) (*connect.Response[bitcoindv1alpha.GetTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockBitcoinServiceClientMockRecorder) GetTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetTransaction), arg0, arg1)
}

// GetWalletInfo mocks base method.
func (m *MockBitcoinServiceClient) GetWalletInfo(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetWalletInfoRequest]) (*connect.Response[bitcoindv1alpha.GetWalletInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetWalletInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletInfo indicates an expected call of GetWalletInfo.
func (mr *MockBitcoinServiceClientMockRecorder) GetWalletInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletInfo", reflect.TypeOf((*MockBitcoinServiceClient)(nil).GetWalletInfo), arg0, arg1)
}

// ImportAddress mocks base method.
func (m *MockBitcoinServiceClient) ImportAddress(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ImportAddressRequest]) (*connect.Response[bitcoindv1alpha.ImportAddressResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAddress", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ImportAddressResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportAddress indicates an expected call of ImportAddress.
func (mr *MockBitcoinServiceClientMockRecorder) ImportAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAddress", reflect.TypeOf((*MockBitcoinServiceClient)(nil).ImportAddress), arg0, arg1)
}

// ImportDescriptors mocks base method.
func (m *MockBitcoinServiceClient) ImportDescriptors(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ImportDescriptorsRequest]) (*connect.Response[bitcoindv1alpha.ImportDescriptorsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDescriptors", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ImportDescriptorsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDescriptors indicates an expected call of ImportDescriptors.
func (mr *MockBitcoinServiceClientMockRecorder) ImportDescriptors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDescriptors", reflect.TypeOf((*MockBitcoinServiceClient)(nil).ImportDescriptors), arg0, arg1)
}

// ImportPrivKey mocks base method.
func (m *MockBitcoinServiceClient) ImportPrivKey(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ImportPrivKeyRequest]) (*connect.Response[bitcoindv1alpha.ImportPrivKeyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPrivKey", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ImportPrivKeyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportPrivKey indicates an expected call of ImportPrivKey.
func (mr *MockBitcoinServiceClientMockRecorder) ImportPrivKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPrivKey", reflect.TypeOf((*MockBitcoinServiceClient)(nil).ImportPrivKey), arg0, arg1)
}

// ImportPubKey mocks base method.
func (m *MockBitcoinServiceClient) ImportPubKey(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ImportPubKeyRequest]) (*connect.Response[bitcoindv1alpha.ImportPubKeyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPubKey", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ImportPubKeyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportPubKey indicates an expected call of ImportPubKey.
func (mr *MockBitcoinServiceClientMockRecorder) ImportPubKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPubKey", reflect.TypeOf((*MockBitcoinServiceClient)(nil).ImportPubKey), arg0, arg1)
}

// ImportWallet mocks base method.
func (m *MockBitcoinServiceClient) ImportWallet(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ImportWalletRequest]) (*connect.Response[bitcoindv1alpha.ImportWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ImportWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportWallet indicates an expected call of ImportWallet.
func (mr *MockBitcoinServiceClientMockRecorder) ImportWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportWallet", reflect.TypeOf((*MockBitcoinServiceClient)(nil).ImportWallet), arg0, arg1)
}

// JoinPsbts mocks base method.
func (m *MockBitcoinServiceClient) JoinPsbts(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.JoinPsbtsRequest]) (*connect.Response[bitcoindv1alpha.JoinPsbtsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinPsbts", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.JoinPsbtsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinPsbts indicates an expected call of JoinPsbts.
func (mr *MockBitcoinServiceClientMockRecorder) JoinPsbts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinPsbts", reflect.TypeOf((*MockBitcoinServiceClient)(nil).JoinPsbts), arg0, arg1)
}

// KeyPoolRefill mocks base method.
func (m *MockBitcoinServiceClient) KeyPoolRefill(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.KeyPoolRefillRequest]) (*connect.Response[bitcoindv1alpha.KeyPoolRefillResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyPoolRefill", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.KeyPoolRefillResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyPoolRefill indicates an expected call of KeyPoolRefill.
func (mr *MockBitcoinServiceClientMockRecorder) KeyPoolRefill(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyPoolRefill", reflect.TypeOf((*MockBitcoinServiceClient)(nil).KeyPoolRefill), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockBitcoinServiceClient) ListAccounts(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ListAccountsRequest]) (*connect.Response[bitcoindv1alpha.ListAccountsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ListAccountsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockBitcoinServiceClientMockRecorder) ListAccounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockBitcoinServiceClient)(nil).ListAccounts), arg0, arg1)
}

// ListSinceBlock mocks base method.
func (m *MockBitcoinServiceClient) ListSinceBlock(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ListSinceBlockRequest]) (*connect.Response[bitcoindv1alpha.ListSinceBlockResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSinceBlock", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ListSinceBlockResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSinceBlock indicates an expected call of ListSinceBlock.
func (mr *MockBitcoinServiceClientMockRecorder) ListSinceBlock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSinceBlock", reflect.TypeOf((*MockBitcoinServiceClient)(nil).ListSinceBlock), arg0, arg1)
}

// ListTransactions mocks base method.
func (m *MockBitcoinServiceClient) ListTransactions(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ListTransactionsRequest]) (*connect.Response[bitcoindv1alpha.ListTransactionsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ListTransactionsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockBitcoinServiceClientMockRecorder) ListTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockBitcoinServiceClient)(nil).ListTransactions), arg0, arg1)
}

// ListWallets mocks base method.
func (m *MockBitcoinServiceClient) ListWallets(arg0 context.Context, arg1 *connect.Request[emptypb.Empty]) (*connect.Response[bitcoindv1alpha.ListWalletsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWallets", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ListWalletsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWallets indicates an expected call of ListWallets.
func (mr *MockBitcoinServiceClientMockRecorder) ListWallets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWallets", reflect.TypeOf((*MockBitcoinServiceClient)(nil).ListWallets), arg0, arg1)
}

// Send mocks base method.
func (m *MockBitcoinServiceClient) Send(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.SendRequest]) (*connect.Response[bitcoindv1alpha.SendResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.SendResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockBitcoinServiceClientMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBitcoinServiceClient)(nil).Send), arg0, arg1)
}

// SendToAddress mocks base method.
func (m *MockBitcoinServiceClient) SendToAddress(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.SendToAddressRequest]) (*connect.Response[bitcoindv1alpha.SendToAddressResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToAddress", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.SendToAddressResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToAddress indicates an expected call of SendToAddress.
func (mr *MockBitcoinServiceClientMockRecorder) SendToAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToAddress", reflect.TypeOf((*MockBitcoinServiceClient)(nil).SendToAddress), arg0, arg1)
}

// SetAccount mocks base method.
func (m *MockBitcoinServiceClient) SetAccount(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.SetAccountRequest]) (*connect.Response[bitcoindv1alpha.SetAccountResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccount", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.SetAccountResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAccount indicates an expected call of SetAccount.
func (mr *MockBitcoinServiceClientMockRecorder) SetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccount", reflect.TypeOf((*MockBitcoinServiceClient)(nil).SetAccount), arg0, arg1)
}

// TestMempoolAccept mocks base method.
func (m *MockBitcoinServiceClient) TestMempoolAccept(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.TestMempoolAcceptRequest]) (*connect.Response[bitcoindv1alpha.TestMempoolAcceptResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestMempoolAccept", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.TestMempoolAcceptResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestMempoolAccept indicates an expected call of TestMempoolAccept.
func (mr *MockBitcoinServiceClientMockRecorder) TestMempoolAccept(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMempoolAccept", reflect.TypeOf((*MockBitcoinServiceClient)(nil).TestMempoolAccept), arg0, arg1)
}

// UnloadWallet mocks base method.
func (m *MockBitcoinServiceClient) UnloadWallet(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.UnloadWalletRequest]) (*connect.Response[bitcoindv1alpha.UnloadWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnloadWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.UnloadWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnloadWallet indicates an expected call of UnloadWallet.
func (mr *MockBitcoinServiceClientMockRecorder) UnloadWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnloadWallet", reflect.TypeOf((*MockBitcoinServiceClient)(nil).UnloadWallet), arg0, arg1)
}

// UtxoUpdatePsbt mocks base method.
func (m *MockBitcoinServiceClient) UtxoUpdatePsbt(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.UtxoUpdatePsbtRequest]) (*connect.Response[bitcoindv1alpha.UtxoUpdatePsbtResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UtxoUpdatePsbt", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.UtxoUpdatePsbtResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UtxoUpdatePsbt indicates an expected call of UtxoUpdatePsbt.
func (mr *MockBitcoinServiceClientMockRecorder) UtxoUpdatePsbt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UtxoUpdatePsbt", reflect.TypeOf((*MockBitcoinServiceClient)(nil).UtxoUpdatePsbt), arg0, arg1)
}

// MockBitcoinServiceHandler is a mock of BitcoinServiceHandler interface.
type MockBitcoinServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBitcoinServiceHandlerMockRecorder
	isgomock struct{}
}

// MockBitcoinServiceHandlerMockRecorder is the mock recorder for MockBitcoinServiceHandler.
type MockBitcoinServiceHandlerMockRecorder struct {
	mock *MockBitcoinServiceHandler
}

// NewMockBitcoinServiceHandler creates a new mock instance.
func NewMockBitcoinServiceHandler(ctrl *gomock.Controller) *MockBitcoinServiceHandler {
	mock := &MockBitcoinServiceHandler{ctrl: ctrl}
	mock.recorder = &MockBitcoinServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBitcoinServiceHandler) EXPECT() *MockBitcoinServiceHandlerMockRecorder {
	return m.recorder
}

// AddMultisigAddress mocks base method.
func (m *MockBitcoinServiceHandler) AddMultisigAddress(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.AddMultisigAddressRequest]) (*connect.Response[bitcoindv1alpha.AddMultisigAddressResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMultisigAddress", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.AddMultisigAddressResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMultisigAddress indicates an expected call of AddMultisigAddress.
func (mr *MockBitcoinServiceHandlerMockRecorder) AddMultisigAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMultisigAddress", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).AddMultisigAddress), arg0, arg1)
}

// AnalyzePsbt mocks base method.
func (m *MockBitcoinServiceHandler) AnalyzePsbt(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.AnalyzePsbtRequest]) (*connect.Response[bitcoindv1alpha.AnalyzePsbtResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzePsbt", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.AnalyzePsbtResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzePsbt indicates an expected call of AnalyzePsbt.
func (mr *MockBitcoinServiceHandlerMockRecorder) AnalyzePsbt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzePsbt", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).AnalyzePsbt), arg0, arg1)
}

// BackupWallet mocks base method.
func (m *MockBitcoinServiceHandler) BackupWallet(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.BackupWalletRequest]) (*connect.Response[bitcoindv1alpha.BackupWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.BackupWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupWallet indicates an expected call of BackupWallet.
func (mr *MockBitcoinServiceHandlerMockRecorder) BackupWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupWallet", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).BackupWallet), arg0, arg1)
}

// BumpFee mocks base method.
func (m *MockBitcoinServiceHandler) BumpFee(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.BumpFeeRequest]) (*connect.Response[bitcoindv1alpha.BumpFeeResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BumpFee", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.BumpFeeResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BumpFee indicates an expected call of BumpFee.
func (mr *MockBitcoinServiceHandlerMockRecorder) BumpFee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BumpFee", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).BumpFee), arg0, arg1)
}

// CombinePsbt mocks base method.
func (m *MockBitcoinServiceHandler) CombinePsbt(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.CombinePsbtRequest]) (*connect.Response[bitcoindv1alpha.CombinePsbtResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CombinePsbt", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.CombinePsbtResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CombinePsbt indicates an expected call of CombinePsbt.
func (mr *MockBitcoinServiceHandlerMockRecorder) CombinePsbt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CombinePsbt", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).CombinePsbt), arg0, arg1)
}

// CreateMultisig mocks base method.
func (m *MockBitcoinServiceHandler) CreateMultisig(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.CreateMultisigRequest]) (*connect.Response[bitcoindv1alpha.CreateMultisigResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultisig", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.CreateMultisigResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultisig indicates an expected call of CreateMultisig.
func (mr *MockBitcoinServiceHandlerMockRecorder) CreateMultisig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultisig", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).CreateMultisig), arg0, arg1)
}

// CreatePsbt mocks base method.
func (m *MockBitcoinServiceHandler) CreatePsbt(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.CreatePsbtRequest]) (*connect.Response[bitcoindv1alpha.CreatePsbtResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePsbt", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.CreatePsbtResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePsbt indicates an expected call of CreatePsbt.
func (mr *MockBitcoinServiceHandlerMockRecorder) CreatePsbt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePsbt", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).CreatePsbt), arg0, arg1)
}

// CreateRawTransaction mocks base method.
func (m *MockBitcoinServiceHandler) CreateRawTransaction(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.CreateRawTransactionRequest]) (*connect.Response[bitcoindv1alpha.CreateRawTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRawTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.CreateRawTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRawTransaction indicates an expected call of CreateRawTransaction.
func (mr *MockBitcoinServiceHandlerMockRecorder) CreateRawTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRawTransaction", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).CreateRawTransaction), arg0, arg1)
}

// CreateWallet mocks base method.
func (m *MockBitcoinServiceHandler) CreateWallet(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.CreateWalletRequest]) (*connect.Response[bitcoindv1alpha.CreateWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.CreateWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockBitcoinServiceHandlerMockRecorder) CreateWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).CreateWallet), arg0, arg1)
}

// DecodePsbt mocks base method.
func (m *MockBitcoinServiceHandler) DecodePsbt(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.DecodePsbtRequest]) (*connect.Response[bitcoindv1alpha.DecodePsbtResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodePsbt", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.DecodePsbtResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodePsbt indicates an expected call of DecodePsbt.
func (mr *MockBitcoinServiceHandlerMockRecorder) DecodePsbt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodePsbt", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).DecodePsbt), arg0, arg1)
}

// DecodeRawTransaction mocks base method.
func (m *MockBitcoinServiceHandler) DecodeRawTransaction(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.DecodeRawTransactionRequest]) (*connect.Response[bitcoindv1alpha.DecodeRawTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRawTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.DecodeRawTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRawTransaction indicates an expected call of DecodeRawTransaction.
func (mr *MockBitcoinServiceHandlerMockRecorder) DecodeRawTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRawTransaction", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).DecodeRawTransaction), arg0, arg1)
}

// DumpPrivKey mocks base method.
func (m *MockBitcoinServiceHandler) DumpPrivKey(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.DumpPrivKeyRequest]) (*connect.Response[bitcoindv1alpha.DumpPrivKeyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpPrivKey", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.DumpPrivKeyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpPrivKey indicates an expected call of DumpPrivKey.
func (mr *MockBitcoinServiceHandlerMockRecorder) DumpPrivKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpPrivKey", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).DumpPrivKey), arg0, arg1)
}

// DumpWallet mocks base method.
func (m *MockBitcoinServiceHandler) DumpWallet(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.DumpWalletRequest]) (*connect.Response[bitcoindv1alpha.DumpWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.DumpWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpWallet indicates an expected call of DumpWallet.
func (mr *MockBitcoinServiceHandlerMockRecorder) DumpWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpWallet", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).DumpWallet), arg0, arg1)
}

// EstimateSmartFee mocks base method.
func (m *MockBitcoinServiceHandler) EstimateSmartFee(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.EstimateSmartFeeRequest]) (*connect.Response[bitcoindv1alpha.EstimateSmartFeeResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateSmartFee", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.EstimateSmartFeeResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateSmartFee indicates an expected call of EstimateSmartFee.
func (mr *MockBitcoinServiceHandlerMockRecorder) EstimateSmartFee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateSmartFee", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).EstimateSmartFee), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockBitcoinServiceHandler) GetAccount(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetAccountRequest]) (*connect.Response[bitcoindv1alpha.GetAccountResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetAccountResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetAccount), arg0, arg1)
}

// GetAddressInfo mocks base method.
func (m *MockBitcoinServiceHandler) GetAddressInfo(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetAddressInfoRequest]) (*connect.Response[bitcoindv1alpha.GetAddressInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetAddressInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressInfo indicates an expected call of GetAddressInfo.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetAddressInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressInfo", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetAddressInfo), arg0, arg1)
}

// GetAddressesByAccount mocks base method.
func (m *MockBitcoinServiceHandler) GetAddressesByAccount(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetAddressesByAccountRequest]) (*connect.Response[bitcoindv1alpha.GetAddressesByAccountResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressesByAccount", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetAddressesByAccountResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressesByAccount indicates an expected call of GetAddressesByAccount.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetAddressesByAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressesByAccount", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetAddressesByAccount), arg0, arg1)
}

// GetBalances mocks base method.
func (m *MockBitcoinServiceHandler) GetBalances(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetBalancesRequest]) (*connect.Response[bitcoindv1alpha.GetBalancesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalances", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetBalancesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalances indicates an expected call of GetBalances.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetBalances(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalances", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetBalances), arg0, arg1)
}

// GetBlock mocks base method.
func (m *MockBitcoinServiceHandler) GetBlock(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetBlockRequest]) (*connect.Response[bitcoindv1alpha.GetBlockResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetBlockResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetBlock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetBlock), arg0, arg1)
}

// GetBlockHash mocks base method.
func (m *MockBitcoinServiceHandler) GetBlockHash(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetBlockHashRequest]) (*connect.Response[bitcoindv1alpha.GetBlockHashResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetBlockHashResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetBlockHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetBlockHash), arg0, arg1)
}

// GetBlockchainInfo mocks base method.
func (m *MockBitcoinServiceHandler) GetBlockchainInfo(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetBlockchainInfoRequest]) (*connect.Response[bitcoindv1alpha.GetBlockchainInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockchainInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetBlockchainInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainInfo indicates an expected call of GetBlockchainInfo.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetBlockchainInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainInfo", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetBlockchainInfo), arg0, arg1)
}

// GetDescriptorInfo mocks base method.
func (m *MockBitcoinServiceHandler) GetDescriptorInfo(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetDescriptorInfoRequest]) (*connect.Response[bitcoindv1alpha.GetDescriptorInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescriptorInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetDescriptorInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDescriptorInfo indicates an expected call of GetDescriptorInfo.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetDescriptorInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescriptorInfo", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetDescriptorInfo), arg0, arg1)
}

// GetNewAddress mocks base method.
func (m *MockBitcoinServiceHandler) GetNewAddress(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetNewAddressRequest]) (*connect.Response[bitcoindv1alpha.GetNewAddressResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewAddress", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetNewAddressResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewAddress indicates an expected call of GetNewAddress.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetNewAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewAddress", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetNewAddress), arg0, arg1)
}

// GetPeerInfo mocks base method.
func (m *MockBitcoinServiceHandler) GetPeerInfo(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetPeerInfoRequest]) (*connect.Response[bitcoindv1alpha.GetPeerInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetPeerInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerInfo indicates an expected call of GetPeerInfo.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetPeerInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerInfo", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetPeerInfo), arg0, arg1)
}

// GetRawMempool mocks base method.
func (m *MockBitcoinServiceHandler) GetRawMempool(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetRawMempoolRequest]) (*connect.Response[bitcoindv1alpha.GetRawMempoolResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawMempool", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetRawMempoolResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawMempool indicates an expected call of GetRawMempool.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetRawMempool(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawMempool", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetRawMempool), arg0, arg1)
}

// GetRawTransaction mocks base method.
func (m *MockBitcoinServiceHandler) GetRawTransaction(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetRawTransactionRequest]) (*connect.Response[bitcoindv1alpha.GetRawTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetRawTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransaction indicates an expected call of GetRawTransaction.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetRawTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransaction", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetRawTransaction), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockBitcoinServiceHandler) GetTransaction(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetTransactionRequest]) (*connect.Response[bitcoindv1alpha.GetTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetTransaction), arg0, arg1)
}

// GetWalletInfo mocks base method.
func (m *MockBitcoinServiceHandler) GetWalletInfo(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.GetWalletInfoRequest]) (*connect.Response[bitcoindv1alpha.GetWalletInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.GetWalletInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletInfo indicates an expected call of GetWalletInfo.
func (mr *MockBitcoinServiceHandlerMockRecorder) GetWalletInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletInfo", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).GetWalletInfo), arg0, arg1)
}

// ImportAddress mocks base method.
func (m *MockBitcoinServiceHandler) ImportAddress(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ImportAddressRequest]) (*connect.Response[bitcoindv1alpha.ImportAddressResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAddress", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ImportAddressResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportAddress indicates an expected call of ImportAddress.
func (mr *MockBitcoinServiceHandlerMockRecorder) ImportAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAddress", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).ImportAddress), arg0, arg1)
}

// ImportDescriptors mocks base method.
func (m *MockBitcoinServiceHandler) ImportDescriptors(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ImportDescriptorsRequest]) (*connect.Response[bitcoindv1alpha.ImportDescriptorsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDescriptors", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ImportDescriptorsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDescriptors indicates an expected call of ImportDescriptors.
func (mr *MockBitcoinServiceHandlerMockRecorder) ImportDescriptors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDescriptors", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).ImportDescriptors), arg0, arg1)
}

// ImportPrivKey mocks base method.
func (m *MockBitcoinServiceHandler) ImportPrivKey(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ImportPrivKeyRequest]) (*connect.Response[bitcoindv1alpha.ImportPrivKeyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPrivKey", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ImportPrivKeyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportPrivKey indicates an expected call of ImportPrivKey.
func (mr *MockBitcoinServiceHandlerMockRecorder) ImportPrivKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPrivKey", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).ImportPrivKey), arg0, arg1)
}

// ImportPubKey mocks base method.
func (m *MockBitcoinServiceHandler) ImportPubKey(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ImportPubKeyRequest]) (*connect.Response[bitcoindv1alpha.ImportPubKeyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPubKey", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ImportPubKeyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportPubKey indicates an expected call of ImportPubKey.
func (mr *MockBitcoinServiceHandlerMockRecorder) ImportPubKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPubKey", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).ImportPubKey), arg0, arg1)
}

// ImportWallet mocks base method.
func (m *MockBitcoinServiceHandler) ImportWallet(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ImportWalletRequest]) (*connect.Response[bitcoindv1alpha.ImportWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ImportWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportWallet indicates an expected call of ImportWallet.
func (mr *MockBitcoinServiceHandlerMockRecorder) ImportWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportWallet", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).ImportWallet), arg0, arg1)
}

// JoinPsbts mocks base method.
func (m *MockBitcoinServiceHandler) JoinPsbts(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.JoinPsbtsRequest]) (*connect.Response[bitcoindv1alpha.JoinPsbtsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinPsbts", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.JoinPsbtsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinPsbts indicates an expected call of JoinPsbts.
func (mr *MockBitcoinServiceHandlerMockRecorder) JoinPsbts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinPsbts", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).JoinPsbts), arg0, arg1)
}

// KeyPoolRefill mocks base method.
func (m *MockBitcoinServiceHandler) KeyPoolRefill(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.KeyPoolRefillRequest]) (*connect.Response[bitcoindv1alpha.KeyPoolRefillResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyPoolRefill", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.KeyPoolRefillResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyPoolRefill indicates an expected call of KeyPoolRefill.
func (mr *MockBitcoinServiceHandlerMockRecorder) KeyPoolRefill(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyPoolRefill", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).KeyPoolRefill), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockBitcoinServiceHandler) ListAccounts(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ListAccountsRequest]) (*connect.Response[bitcoindv1alpha.ListAccountsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ListAccountsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockBitcoinServiceHandlerMockRecorder) ListAccounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).ListAccounts), arg0, arg1)
}

// ListSinceBlock mocks base method.
func (m *MockBitcoinServiceHandler) ListSinceBlock(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ListSinceBlockRequest]) (*connect.Response[bitcoindv1alpha.ListSinceBlockResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSinceBlock", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ListSinceBlockResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSinceBlock indicates an expected call of ListSinceBlock.
func (mr *MockBitcoinServiceHandlerMockRecorder) ListSinceBlock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSinceBlock", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).ListSinceBlock), arg0, arg1)
}

// ListTransactions mocks base method.
func (m *MockBitcoinServiceHandler) ListTransactions(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.ListTransactionsRequest]) (*connect.Response[bitcoindv1alpha.ListTransactionsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ListTransactionsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockBitcoinServiceHandlerMockRecorder) ListTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).ListTransactions), arg0, arg1)
}

// ListWallets mocks base method.
func (m *MockBitcoinServiceHandler) ListWallets(arg0 context.Context, arg1 *connect.Request[emptypb.Empty]) (*connect.Response[bitcoindv1alpha.ListWalletsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWallets", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.ListWalletsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWallets indicates an expected call of ListWallets.
func (mr *MockBitcoinServiceHandlerMockRecorder) ListWallets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWallets", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).ListWallets), arg0, arg1)
}

// Send mocks base method.
func (m *MockBitcoinServiceHandler) Send(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.SendRequest]) (*connect.Response[bitcoindv1alpha.SendResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.SendResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockBitcoinServiceHandlerMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).Send), arg0, arg1)
}

// SendToAddress mocks base method.
func (m *MockBitcoinServiceHandler) SendToAddress(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.SendToAddressRequest]) (*connect.Response[bitcoindv1alpha.SendToAddressResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToAddress", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.SendToAddressResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToAddress indicates an expected call of SendToAddress.
func (mr *MockBitcoinServiceHandlerMockRecorder) SendToAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToAddress", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).SendToAddress), arg0, arg1)
}

// SetAccount mocks base method.
func (m *MockBitcoinServiceHandler) SetAccount(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.SetAccountRequest]) (*connect.Response[bitcoindv1alpha.SetAccountResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccount", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.SetAccountResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAccount indicates an expected call of SetAccount.
func (mr *MockBitcoinServiceHandlerMockRecorder) SetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccount", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).SetAccount), arg0, arg1)
}

// TestMempoolAccept mocks base method.
func (m *MockBitcoinServiceHandler) TestMempoolAccept(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.TestMempoolAcceptRequest]) (*connect.Response[bitcoindv1alpha.TestMempoolAcceptResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestMempoolAccept", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.TestMempoolAcceptResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestMempoolAccept indicates an expected call of TestMempoolAccept.
func (mr *MockBitcoinServiceHandlerMockRecorder) TestMempoolAccept(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMempoolAccept", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).TestMempoolAccept), arg0, arg1)
}

// UnloadWallet mocks base method.
func (m *MockBitcoinServiceHandler) UnloadWallet(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.UnloadWalletRequest]) (*connect.Response[bitcoindv1alpha.UnloadWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnloadWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.UnloadWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnloadWallet indicates an expected call of UnloadWallet.
func (mr *MockBitcoinServiceHandlerMockRecorder) UnloadWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnloadWallet", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).UnloadWallet), arg0, arg1)
}

// UtxoUpdatePsbt mocks base method.
func (m *MockBitcoinServiceHandler) UtxoUpdatePsbt(arg0 context.Context, arg1 *connect.Request[bitcoindv1alpha.UtxoUpdatePsbtRequest]) (*connect.Response[bitcoindv1alpha.UtxoUpdatePsbtResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UtxoUpdatePsbt", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[bitcoindv1alpha.UtxoUpdatePsbtResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UtxoUpdatePsbt indicates an expected call of UtxoUpdatePsbt.
func (mr *MockBitcoinServiceHandlerMockRecorder) UtxoUpdatePsbt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UtxoUpdatePsbt", reflect.TypeOf((*MockBitcoinServiceHandler)(nil).UtxoUpdatePsbt), arg0, arg1)
}
