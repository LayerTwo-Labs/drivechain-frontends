// Code generated by MockGen. DO NOT EDIT.
// Source: ../gen/cusf/mainchain/v1/mainchainv1connect/wallet.connect.go
//
// Generated by this command:
//
//	mockgen -source=../gen/cusf/mainchain/v1/mainchainv1connect/wallet.connect.go -destination=mocks/mock_wallet.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	mainchainv1 "github.com/LayerTwo-Labs/sidesail/bitwindow/server/gen/cusf/mainchain/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletServiceClient is a mock of WalletServiceClient interface.
type MockWalletServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceClientMockRecorder
	isgomock struct{}
}

// MockWalletServiceClientMockRecorder is the mock recorder for MockWalletServiceClient.
type MockWalletServiceClientMockRecorder struct {
	mock *MockWalletServiceClient
}

// NewMockWalletServiceClient creates a new mock instance.
func NewMockWalletServiceClient(ctrl *gomock.Controller) *MockWalletServiceClient {
	mock := &MockWalletServiceClient{ctrl: ctrl}
	mock.recorder = &MockWalletServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletServiceClient) EXPECT() *MockWalletServiceClientMockRecorder {
	return m.recorder
}

// BroadcastWithdrawalBundle mocks base method.
func (m *MockWalletServiceClient) BroadcastWithdrawalBundle(arg0 context.Context, arg1 *connect.Request[mainchainv1.BroadcastWithdrawalBundleRequest]) (*connect.Response[mainchainv1.BroadcastWithdrawalBundleResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastWithdrawalBundle", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.BroadcastWithdrawalBundleResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastWithdrawalBundle indicates an expected call of BroadcastWithdrawalBundle.
func (mr *MockWalletServiceClientMockRecorder) BroadcastWithdrawalBundle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastWithdrawalBundle", reflect.TypeOf((*MockWalletServiceClient)(nil).BroadcastWithdrawalBundle), arg0, arg1)
}

// CreateBmmCriticalDataTransaction mocks base method.
func (m *MockWalletServiceClient) CreateBmmCriticalDataTransaction(arg0 context.Context, arg1 *connect.Request[mainchainv1.CreateBmmCriticalDataTransactionRequest]) (*connect.Response[mainchainv1.CreateBmmCriticalDataTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBmmCriticalDataTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.CreateBmmCriticalDataTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBmmCriticalDataTransaction indicates an expected call of CreateBmmCriticalDataTransaction.
func (mr *MockWalletServiceClientMockRecorder) CreateBmmCriticalDataTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBmmCriticalDataTransaction", reflect.TypeOf((*MockWalletServiceClient)(nil).CreateBmmCriticalDataTransaction), arg0, arg1)
}

// CreateDepositTransaction mocks base method.
func (m *MockWalletServiceClient) CreateDepositTransaction(arg0 context.Context, arg1 *connect.Request[mainchainv1.CreateDepositTransactionRequest]) (*connect.Response[mainchainv1.CreateDepositTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepositTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.CreateDepositTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDepositTransaction indicates an expected call of CreateDepositTransaction.
func (mr *MockWalletServiceClientMockRecorder) CreateDepositTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepositTransaction", reflect.TypeOf((*MockWalletServiceClient)(nil).CreateDepositTransaction), arg0, arg1)
}

// CreateNewAddress mocks base method.
func (m *MockWalletServiceClient) CreateNewAddress(arg0 context.Context, arg1 *connect.Request[mainchainv1.CreateNewAddressRequest]) (*connect.Response[mainchainv1.CreateNewAddressResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewAddress", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.CreateNewAddressResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewAddress indicates an expected call of CreateNewAddress.
func (mr *MockWalletServiceClientMockRecorder) CreateNewAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewAddress", reflect.TypeOf((*MockWalletServiceClient)(nil).CreateNewAddress), arg0, arg1)
}

// CreateSidechainProposal mocks base method.
func (m *MockWalletServiceClient) CreateSidechainProposal(arg0 context.Context, arg1 *connect.Request[mainchainv1.CreateSidechainProposalRequest]) (*connect.ServerStreamForClient[mainchainv1.CreateSidechainProposalResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSidechainProposal", arg0, arg1)
	ret0, _ := ret[0].(*connect.ServerStreamForClient[mainchainv1.CreateSidechainProposalResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSidechainProposal indicates an expected call of CreateSidechainProposal.
func (mr *MockWalletServiceClientMockRecorder) CreateSidechainProposal(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSidechainProposal", reflect.TypeOf((*MockWalletServiceClient)(nil).CreateSidechainProposal), arg0, arg1)
}

// CreateWallet mocks base method.
func (m *MockWalletServiceClient) CreateWallet(arg0 context.Context, arg1 *connect.Request[mainchainv1.CreateWalletRequest]) (*connect.Response[mainchainv1.CreateWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.CreateWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletServiceClientMockRecorder) CreateWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletServiceClient)(nil).CreateWallet), arg0, arg1)
}

// GenerateBlocks mocks base method.
func (m *MockWalletServiceClient) GenerateBlocks(arg0 context.Context, arg1 *connect.Request[mainchainv1.GenerateBlocksRequest]) (*connect.ServerStreamForClient[mainchainv1.GenerateBlocksResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBlocks", arg0, arg1)
	ret0, _ := ret[0].(*connect.ServerStreamForClient[mainchainv1.GenerateBlocksResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateBlocks indicates an expected call of GenerateBlocks.
func (mr *MockWalletServiceClientMockRecorder) GenerateBlocks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBlocks", reflect.TypeOf((*MockWalletServiceClient)(nil).GenerateBlocks), arg0, arg1)
}

// GetBalance mocks base method.
func (m *MockWalletServiceClient) GetBalance(arg0 context.Context, arg1 *connect.Request[mainchainv1.GetBalanceRequest]) (*connect.Response[mainchainv1.GetBalanceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.GetBalanceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWalletServiceClientMockRecorder) GetBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWalletServiceClient)(nil).GetBalance), arg0, arg1)
}

// GetInfo mocks base method.
func (m *MockWalletServiceClient) GetInfo(arg0 context.Context, arg1 *connect.Request[mainchainv1.GetInfoRequest]) (*connect.Response[mainchainv1.GetInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.GetInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockWalletServiceClientMockRecorder) GetInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockWalletServiceClient)(nil).GetInfo), arg0, arg1)
}

// ListSidechainDepositTransactions mocks base method.
func (m *MockWalletServiceClient) ListSidechainDepositTransactions(arg0 context.Context, arg1 *connect.Request[mainchainv1.ListSidechainDepositTransactionsRequest]) (*connect.Response[mainchainv1.ListSidechainDepositTransactionsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSidechainDepositTransactions", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.ListSidechainDepositTransactionsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSidechainDepositTransactions indicates an expected call of ListSidechainDepositTransactions.
func (mr *MockWalletServiceClientMockRecorder) ListSidechainDepositTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSidechainDepositTransactions", reflect.TypeOf((*MockWalletServiceClient)(nil).ListSidechainDepositTransactions), arg0, arg1)
}

// ListTransactions mocks base method.
func (m *MockWalletServiceClient) ListTransactions(arg0 context.Context, arg1 *connect.Request[mainchainv1.ListTransactionsRequest]) (*connect.Response[mainchainv1.ListTransactionsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.ListTransactionsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockWalletServiceClientMockRecorder) ListTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockWalletServiceClient)(nil).ListTransactions), arg0, arg1)
}

// ListUnspentOutputs mocks base method.
func (m *MockWalletServiceClient) ListUnspentOutputs(arg0 context.Context, arg1 *connect.Request[mainchainv1.ListUnspentOutputsRequest]) (*connect.Response[mainchainv1.ListUnspentOutputsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnspentOutputs", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.ListUnspentOutputsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnspentOutputs indicates an expected call of ListUnspentOutputs.
func (mr *MockWalletServiceClientMockRecorder) ListUnspentOutputs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnspentOutputs", reflect.TypeOf((*MockWalletServiceClient)(nil).ListUnspentOutputs), arg0, arg1)
}

// SendTransaction mocks base method.
func (m *MockWalletServiceClient) SendTransaction(arg0 context.Context, arg1 *connect.Request[mainchainv1.SendTransactionRequest]) (*connect.Response[mainchainv1.SendTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.SendTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockWalletServiceClientMockRecorder) SendTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockWalletServiceClient)(nil).SendTransaction), arg0, arg1)
}

// UnlockWallet mocks base method.
func (m *MockWalletServiceClient) UnlockWallet(arg0 context.Context, arg1 *connect.Request[mainchainv1.UnlockWalletRequest]) (*connect.Response[mainchainv1.UnlockWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.UnlockWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockWallet indicates an expected call of UnlockWallet.
func (mr *MockWalletServiceClientMockRecorder) UnlockWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockWallet", reflect.TypeOf((*MockWalletServiceClient)(nil).UnlockWallet), arg0, arg1)
}

// MockWalletServiceHandler is a mock of WalletServiceHandler interface.
type MockWalletServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceHandlerMockRecorder
	isgomock struct{}
}

// MockWalletServiceHandlerMockRecorder is the mock recorder for MockWalletServiceHandler.
type MockWalletServiceHandlerMockRecorder struct {
	mock *MockWalletServiceHandler
}

// NewMockWalletServiceHandler creates a new mock instance.
func NewMockWalletServiceHandler(ctrl *gomock.Controller) *MockWalletServiceHandler {
	mock := &MockWalletServiceHandler{ctrl: ctrl}
	mock.recorder = &MockWalletServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletServiceHandler) EXPECT() *MockWalletServiceHandlerMockRecorder {
	return m.recorder
}

// BroadcastWithdrawalBundle mocks base method.
func (m *MockWalletServiceHandler) BroadcastWithdrawalBundle(arg0 context.Context, arg1 *connect.Request[mainchainv1.BroadcastWithdrawalBundleRequest]) (*connect.Response[mainchainv1.BroadcastWithdrawalBundleResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastWithdrawalBundle", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.BroadcastWithdrawalBundleResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastWithdrawalBundle indicates an expected call of BroadcastWithdrawalBundle.
func (mr *MockWalletServiceHandlerMockRecorder) BroadcastWithdrawalBundle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastWithdrawalBundle", reflect.TypeOf((*MockWalletServiceHandler)(nil).BroadcastWithdrawalBundle), arg0, arg1)
}

// CreateBmmCriticalDataTransaction mocks base method.
func (m *MockWalletServiceHandler) CreateBmmCriticalDataTransaction(arg0 context.Context, arg1 *connect.Request[mainchainv1.CreateBmmCriticalDataTransactionRequest]) (*connect.Response[mainchainv1.CreateBmmCriticalDataTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBmmCriticalDataTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.CreateBmmCriticalDataTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBmmCriticalDataTransaction indicates an expected call of CreateBmmCriticalDataTransaction.
func (mr *MockWalletServiceHandlerMockRecorder) CreateBmmCriticalDataTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBmmCriticalDataTransaction", reflect.TypeOf((*MockWalletServiceHandler)(nil).CreateBmmCriticalDataTransaction), arg0, arg1)
}

// CreateDepositTransaction mocks base method.
func (m *MockWalletServiceHandler) CreateDepositTransaction(arg0 context.Context, arg1 *connect.Request[mainchainv1.CreateDepositTransactionRequest]) (*connect.Response[mainchainv1.CreateDepositTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepositTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.CreateDepositTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDepositTransaction indicates an expected call of CreateDepositTransaction.
func (mr *MockWalletServiceHandlerMockRecorder) CreateDepositTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepositTransaction", reflect.TypeOf((*MockWalletServiceHandler)(nil).CreateDepositTransaction), arg0, arg1)
}

// CreateNewAddress mocks base method.
func (m *MockWalletServiceHandler) CreateNewAddress(arg0 context.Context, arg1 *connect.Request[mainchainv1.CreateNewAddressRequest]) (*connect.Response[mainchainv1.CreateNewAddressResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewAddress", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.CreateNewAddressResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewAddress indicates an expected call of CreateNewAddress.
func (mr *MockWalletServiceHandlerMockRecorder) CreateNewAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewAddress", reflect.TypeOf((*MockWalletServiceHandler)(nil).CreateNewAddress), arg0, arg1)
}

// CreateSidechainProposal mocks base method.
func (m *MockWalletServiceHandler) CreateSidechainProposal(arg0 context.Context, arg1 *connect.Request[mainchainv1.CreateSidechainProposalRequest], arg2 *connect.ServerStream[mainchainv1.CreateSidechainProposalResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSidechainProposal", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSidechainProposal indicates an expected call of CreateSidechainProposal.
func (mr *MockWalletServiceHandlerMockRecorder) CreateSidechainProposal(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSidechainProposal", reflect.TypeOf((*MockWalletServiceHandler)(nil).CreateSidechainProposal), arg0, arg1, arg2)
}

// CreateWallet mocks base method.
func (m *MockWalletServiceHandler) CreateWallet(arg0 context.Context, arg1 *connect.Request[mainchainv1.CreateWalletRequest]) (*connect.Response[mainchainv1.CreateWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.CreateWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletServiceHandlerMockRecorder) CreateWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletServiceHandler)(nil).CreateWallet), arg0, arg1)
}

// GenerateBlocks mocks base method.
func (m *MockWalletServiceHandler) GenerateBlocks(arg0 context.Context, arg1 *connect.Request[mainchainv1.GenerateBlocksRequest], arg2 *connect.ServerStream[mainchainv1.GenerateBlocksResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBlocks", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateBlocks indicates an expected call of GenerateBlocks.
func (mr *MockWalletServiceHandlerMockRecorder) GenerateBlocks(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBlocks", reflect.TypeOf((*MockWalletServiceHandler)(nil).GenerateBlocks), arg0, arg1, arg2)
}

// GetBalance mocks base method.
func (m *MockWalletServiceHandler) GetBalance(arg0 context.Context, arg1 *connect.Request[mainchainv1.GetBalanceRequest]) (*connect.Response[mainchainv1.GetBalanceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.GetBalanceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWalletServiceHandlerMockRecorder) GetBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWalletServiceHandler)(nil).GetBalance), arg0, arg1)
}

// GetInfo mocks base method.
func (m *MockWalletServiceHandler) GetInfo(arg0 context.Context, arg1 *connect.Request[mainchainv1.GetInfoRequest]) (*connect.Response[mainchainv1.GetInfoResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.GetInfoResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockWalletServiceHandlerMockRecorder) GetInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockWalletServiceHandler)(nil).GetInfo), arg0, arg1)
}

// ListSidechainDepositTransactions mocks base method.
func (m *MockWalletServiceHandler) ListSidechainDepositTransactions(arg0 context.Context, arg1 *connect.Request[mainchainv1.ListSidechainDepositTransactionsRequest]) (*connect.Response[mainchainv1.ListSidechainDepositTransactionsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSidechainDepositTransactions", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.ListSidechainDepositTransactionsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSidechainDepositTransactions indicates an expected call of ListSidechainDepositTransactions.
func (mr *MockWalletServiceHandlerMockRecorder) ListSidechainDepositTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSidechainDepositTransactions", reflect.TypeOf((*MockWalletServiceHandler)(nil).ListSidechainDepositTransactions), arg0, arg1)
}

// ListTransactions mocks base method.
func (m *MockWalletServiceHandler) ListTransactions(arg0 context.Context, arg1 *connect.Request[mainchainv1.ListTransactionsRequest]) (*connect.Response[mainchainv1.ListTransactionsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.ListTransactionsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockWalletServiceHandlerMockRecorder) ListTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockWalletServiceHandler)(nil).ListTransactions), arg0, arg1)
}

// ListUnspentOutputs mocks base method.
func (m *MockWalletServiceHandler) ListUnspentOutputs(arg0 context.Context, arg1 *connect.Request[mainchainv1.ListUnspentOutputsRequest]) (*connect.Response[mainchainv1.ListUnspentOutputsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnspentOutputs", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.ListUnspentOutputsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnspentOutputs indicates an expected call of ListUnspentOutputs.
func (mr *MockWalletServiceHandlerMockRecorder) ListUnspentOutputs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnspentOutputs", reflect.TypeOf((*MockWalletServiceHandler)(nil).ListUnspentOutputs), arg0, arg1)
}

// SendTransaction mocks base method.
func (m *MockWalletServiceHandler) SendTransaction(arg0 context.Context, arg1 *connect.Request[mainchainv1.SendTransactionRequest]) (*connect.Response[mainchainv1.SendTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.SendTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockWalletServiceHandlerMockRecorder) SendTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockWalletServiceHandler)(nil).SendTransaction), arg0, arg1)
}

// UnlockWallet mocks base method.
func (m *MockWalletServiceHandler) UnlockWallet(arg0 context.Context, arg1 *connect.Request[mainchainv1.UnlockWalletRequest]) (*connect.Response[mainchainv1.UnlockWalletResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockWallet", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[mainchainv1.UnlockWalletResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockWallet indicates an expected call of UnlockWallet.
func (mr *MockWalletServiceHandlerMockRecorder) UnlockWallet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockWallet", reflect.TypeOf((*MockWalletServiceHandler)(nil).UnlockWallet), arg0, arg1)
}
