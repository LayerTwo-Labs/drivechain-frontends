// Code generated by MockGen. DO NOT EDIT.
// Source: ../gen/cusf/crypto/v1/cryptov1connect/crypto.connect.go
//
// Generated by this command:
//
//	mockgen -source=../gen/cusf/crypto/v1/cryptov1connect/crypto.connect.go -destination=mocks/mock_crypto.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	cryptov1 "github.com/LayerTwo-Labs/sidesail/bitwindow/server/gen/cusf/crypto/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockCryptoServiceClient is a mock of CryptoServiceClient interface.
type MockCryptoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoServiceClientMockRecorder
	isgomock struct{}
}

// MockCryptoServiceClientMockRecorder is the mock recorder for MockCryptoServiceClient.
type MockCryptoServiceClientMockRecorder struct {
	mock *MockCryptoServiceClient
}

// NewMockCryptoServiceClient creates a new mock instance.
func NewMockCryptoServiceClient(ctrl *gomock.Controller) *MockCryptoServiceClient {
	mock := &MockCryptoServiceClient{ctrl: ctrl}
	mock.recorder = &MockCryptoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoServiceClient) EXPECT() *MockCryptoServiceClientMockRecorder {
	return m.recorder
}

// HmacSha512 mocks base method.
func (m *MockCryptoServiceClient) HmacSha512(arg0 context.Context, arg1 *connect.Request[cryptov1.HmacSha512Request]) (*connect.Response[cryptov1.HmacSha512Response], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HmacSha512", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[cryptov1.HmacSha512Response])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HmacSha512 indicates an expected call of HmacSha512.
func (mr *MockCryptoServiceClientMockRecorder) HmacSha512(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HmacSha512", reflect.TypeOf((*MockCryptoServiceClient)(nil).HmacSha512), arg0, arg1)
}

// Ripemd160 mocks base method.
func (m *MockCryptoServiceClient) Ripemd160(arg0 context.Context, arg1 *connect.Request[cryptov1.Ripemd160Request]) (*connect.Response[cryptov1.Ripemd160Response], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ripemd160", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[cryptov1.Ripemd160Response])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ripemd160 indicates an expected call of Ripemd160.
func (mr *MockCryptoServiceClientMockRecorder) Ripemd160(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ripemd160", reflect.TypeOf((*MockCryptoServiceClient)(nil).Ripemd160), arg0, arg1)
}

// Secp256K1SecretKeyToPublicKey mocks base method.
func (m *MockCryptoServiceClient) Secp256K1SecretKeyToPublicKey(arg0 context.Context, arg1 *connect.Request[cryptov1.Secp256K1SecretKeyToPublicKeyRequest]) (*connect.Response[cryptov1.Secp256K1SecretKeyToPublicKeyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secp256K1SecretKeyToPublicKey", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[cryptov1.Secp256K1SecretKeyToPublicKeyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Secp256K1SecretKeyToPublicKey indicates an expected call of Secp256K1SecretKeyToPublicKey.
func (mr *MockCryptoServiceClientMockRecorder) Secp256K1SecretKeyToPublicKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secp256K1SecretKeyToPublicKey", reflect.TypeOf((*MockCryptoServiceClient)(nil).Secp256K1SecretKeyToPublicKey), arg0, arg1)
}

// Secp256K1Sign mocks base method.
func (m *MockCryptoServiceClient) Secp256K1Sign(arg0 context.Context, arg1 *connect.Request[cryptov1.Secp256K1SignRequest]) (*connect.Response[cryptov1.Secp256K1SignResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secp256K1Sign", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[cryptov1.Secp256K1SignResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Secp256K1Sign indicates an expected call of Secp256K1Sign.
func (mr *MockCryptoServiceClientMockRecorder) Secp256K1Sign(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secp256K1Sign", reflect.TypeOf((*MockCryptoServiceClient)(nil).Secp256K1Sign), arg0, arg1)
}

// Secp256K1Verify mocks base method.
func (m *MockCryptoServiceClient) Secp256K1Verify(arg0 context.Context, arg1 *connect.Request[cryptov1.Secp256K1VerifyRequest]) (*connect.Response[cryptov1.Secp256K1VerifyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secp256K1Verify", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[cryptov1.Secp256K1VerifyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Secp256K1Verify indicates an expected call of Secp256K1Verify.
func (mr *MockCryptoServiceClientMockRecorder) Secp256K1Verify(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secp256K1Verify", reflect.TypeOf((*MockCryptoServiceClient)(nil).Secp256K1Verify), arg0, arg1)
}

// MockCryptoServiceHandler is a mock of CryptoServiceHandler interface.
type MockCryptoServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoServiceHandlerMockRecorder
	isgomock struct{}
}

// MockCryptoServiceHandlerMockRecorder is the mock recorder for MockCryptoServiceHandler.
type MockCryptoServiceHandlerMockRecorder struct {
	mock *MockCryptoServiceHandler
}

// NewMockCryptoServiceHandler creates a new mock instance.
func NewMockCryptoServiceHandler(ctrl *gomock.Controller) *MockCryptoServiceHandler {
	mock := &MockCryptoServiceHandler{ctrl: ctrl}
	mock.recorder = &MockCryptoServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoServiceHandler) EXPECT() *MockCryptoServiceHandlerMockRecorder {
	return m.recorder
}

// HmacSha512 mocks base method.
func (m *MockCryptoServiceHandler) HmacSha512(arg0 context.Context, arg1 *connect.Request[cryptov1.HmacSha512Request]) (*connect.Response[cryptov1.HmacSha512Response], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HmacSha512", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[cryptov1.HmacSha512Response])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HmacSha512 indicates an expected call of HmacSha512.
func (mr *MockCryptoServiceHandlerMockRecorder) HmacSha512(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HmacSha512", reflect.TypeOf((*MockCryptoServiceHandler)(nil).HmacSha512), arg0, arg1)
}

// Ripemd160 mocks base method.
func (m *MockCryptoServiceHandler) Ripemd160(arg0 context.Context, arg1 *connect.Request[cryptov1.Ripemd160Request]) (*connect.Response[cryptov1.Ripemd160Response], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ripemd160", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[cryptov1.Ripemd160Response])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ripemd160 indicates an expected call of Ripemd160.
func (mr *MockCryptoServiceHandlerMockRecorder) Ripemd160(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ripemd160", reflect.TypeOf((*MockCryptoServiceHandler)(nil).Ripemd160), arg0, arg1)
}

// Secp256K1SecretKeyToPublicKey mocks base method.
func (m *MockCryptoServiceHandler) Secp256K1SecretKeyToPublicKey(arg0 context.Context, arg1 *connect.Request[cryptov1.Secp256K1SecretKeyToPublicKeyRequest]) (*connect.Response[cryptov1.Secp256K1SecretKeyToPublicKeyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secp256K1SecretKeyToPublicKey", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[cryptov1.Secp256K1SecretKeyToPublicKeyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Secp256K1SecretKeyToPublicKey indicates an expected call of Secp256K1SecretKeyToPublicKey.
func (mr *MockCryptoServiceHandlerMockRecorder) Secp256K1SecretKeyToPublicKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secp256K1SecretKeyToPublicKey", reflect.TypeOf((*MockCryptoServiceHandler)(nil).Secp256K1SecretKeyToPublicKey), arg0, arg1)
}

// Secp256K1Sign mocks base method.
func (m *MockCryptoServiceHandler) Secp256K1Sign(arg0 context.Context, arg1 *connect.Request[cryptov1.Secp256K1SignRequest]) (*connect.Response[cryptov1.Secp256K1SignResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secp256K1Sign", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[cryptov1.Secp256K1SignResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Secp256K1Sign indicates an expected call of Secp256K1Sign.
func (mr *MockCryptoServiceHandlerMockRecorder) Secp256K1Sign(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secp256K1Sign", reflect.TypeOf((*MockCryptoServiceHandler)(nil).Secp256K1Sign), arg0, arg1)
}

// Secp256K1Verify mocks base method.
func (m *MockCryptoServiceHandler) Secp256K1Verify(arg0 context.Context, arg1 *connect.Request[cryptov1.Secp256K1VerifyRequest]) (*connect.Response[cryptov1.Secp256K1VerifyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secp256K1Verify", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[cryptov1.Secp256K1VerifyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Secp256K1Verify indicates an expected call of Secp256K1Verify.
func (mr *MockCryptoServiceHandlerMockRecorder) Secp256K1Verify(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secp256K1Verify", reflect.TypeOf((*MockCryptoServiceHandler)(nil).Secp256K1Verify), arg0, arg1)
}
