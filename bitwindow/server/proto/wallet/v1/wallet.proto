syntax = "proto3";

package wallet.v1;

import "bitwindowd/v1/bitwindowd.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service WalletService {
  rpc SendTransaction(SendTransactionRequest) returns (SendTransactionResponse);
  rpc GetBalance(google.protobuf.Empty) returns (GetBalanceResponse);
  // Problem: deriving nilly willy here is potentially problematic. There's no way of listing
  // out unused addresses, so we risk crossing the sync gap.
  rpc GetNewAddress(google.protobuf.Empty) returns (GetNewAddressResponse);
  rpc ListTransactions(google.protobuf.Empty) returns (ListTransactionsResponse);
  rpc ListUnspent(google.protobuf.Empty) returns (ListUnspentResponse);
  rpc ListReceiveAddresses(google.protobuf.Empty) returns (ListReceiveAddressesResponse);

  rpc ListSidechainDeposits(ListSidechainDepositsRequest) returns (ListSidechainDepositsResponse);
  rpc CreateSidechainDeposit(CreateSidechainDepositRequest) returns (CreateSidechainDepositResponse);

  rpc SignMessage(SignMessageRequest) returns (SignMessageResponse);
  rpc VerifyMessage(VerifyMessageRequest) returns (VerifyMessageResponse);

  rpc GetStats(google.protobuf.Empty) returns (GetStatsResponse);
}

message GetNewAddressResponse {
  string address = 1;
  uint32 index = 2;
}

message SendTransactionRequest {
  // Map of destination address to amount in satoshi.
  map<string, uint64> destinations = 1;

  // Fee rate, measured in sat/vb. If set to zero, a reasonable
  // rate is used by asking Core for an estimate.
  uint64 fee_sat_per_vbyte = 2;

  // Hard-coded amount, in sats.
  uint64 fixed_fee_sats = 3;

  // Message to include as an OP_RETURN output
  string op_return_message = 4;

  // If set, will save the address with this label in the address book
  string label = 5;

  // UTXOs that must be included in the transaction.
  repeated UnspentOutput required_inputs = 6;
}

message SendTransactionResponse {
  string txid = 1;
}

message GetBalanceResponse {
  uint64 confirmed_satoshi = 1;

  uint64 pending_satoshi = 2;
}

message ListTransactionsResponse {
  repeated WalletTransaction transactions = 1;
}

message UnspentOutput {
  // The vout:index of the utxo
  string output = 1;
  // What address the utxo was received to.
  string address = 2;
  // What label (if any) the address received to is labeled with.
  string label = 3;
  // The value of the output, in satoshis.
  uint64 value_sats = 4;
  // Whether this is a change output.
  bool is_change = 5;
  // Timestamp of the utxo.
  google.protobuf.Timestamp received_at = 6;
  // If set, this utxo is part of a denial chain
  optional bitwindowd.v1.DenialInfo denial_info = 7;
}

message ListUnspentResponse {
  repeated UnspentOutput utxos = 1;
}

message ListReceiveAddressesResponse {
  repeated ReceiveAddress addresses = 1;
}

message ReceiveAddress {
  string address = 1;
  string label = 2;
  uint64 current_balance_sat = 3;
  bool is_change = 4;
  google.protobuf.Timestamp last_used_at = 5;
}

message Confirmation {
  uint32 height = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message WalletTransaction {
  string txid = 1;

  uint64 fee_sats = 2;
  uint64 received_satoshi = 3;
  uint64 sent_satoshi = 4;
  string address = 5;
  string address_label = 6;
  string note = 7;

  Confirmation confirmation_time = 8;
}

message ListSidechainDepositsRequest {
  int32 slot = 1;
}

message ListSidechainDepositsResponse {
  message SidechainDeposit {
    string txid = 1;
    int64 amount = 2;
    int64 fee = 3;
    int32 confirmations = 4;
  }

  repeated SidechainDeposit deposits = 1;
}

message CreateSidechainDepositRequest {
  // The sidechain deposit address to send to.
  int64 slot = 1;
  // The sidechain deposit address to send to.
  string destination = 2;
  // The amount in BTC to send. eg 0.1
  double amount = 3;
  // The fee in BTC
  double fee = 4;
}

message CreateSidechainDepositResponse {
  string txid = 1;
}

message SignMessageRequest {
  string message = 1;
}
message SignMessageResponse {
  string signature = 1;
}

message VerifyMessageRequest {
  string message = 1;
  string signature = 2;
  string public_key = 3;
}
message VerifyMessageResponse {
  bool valid = 1;
}

message GetStatsResponse {
  uint64 utxos_current = 1;
  uint64 utxos_unique_addresses = 2;
  int64 sidechain_deposit_volume = 3;
  int64 sidechain_deposit_volume_last_30_days = 4;
  int64 transaction_count_total = 5;
  int64 transaction_count_since_month = 6;
}
