syntax = "proto3";

package bitwindowd.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service BitwindowdService {
  rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty);

  // Deniability operations
  rpc CreateDenial(CreateDenialRequest) returns (google.protobuf.Empty);
  rpc CancelDenial(CancelDenialRequest) returns (google.protobuf.Empty);

  // Wallet operations
  rpc CreateAddressBookEntry(CreateAddressBookEntryRequest) returns (CreateAddressBookEntryResponse);
  rpc ListAddressBook(google.protobuf.Empty) returns (ListAddressBookResponse);
  rpc UpdateAddressBookEntry(UpdateAddressBookEntryRequest) returns (google.protobuf.Empty);
  rpc DeleteAddressBookEntry(DeleteAddressBookEntryRequest) returns (google.protobuf.Empty);

  rpc GetSyncInfo(google.protobuf.Empty) returns (GetSyncInfoResponse);

  rpc SetTransactionNote(SetTransactionNoteRequest) returns (google.protobuf.Empty);

  rpc GetFireplaceStats(google.protobuf.Empty) returns (GetFireplaceStatsResponse);

  // Non-stock Bitcoin Core RPCs

  // Lists the most recent transactions, both confirmed and unconfirmed.
  rpc ListRecentTransactions(ListRecentTransactionsRequest) returns (ListRecentTransactionsResponse);

  // Lists blocks with pagination support
  rpc ListBlocks(ListBlocksRequest) returns (ListBlocksResponse);
}

message CreateDenialRequest {
  string txid = 1;
  uint32 vout = 2;
  int32 delay_seconds = 3;
  int32 num_hops = 4;
}

message DenialInfo {
  int64 id = 1;
  int32 num_hops = 2;
  int32 delay_seconds = 3;
  google.protobuf.Timestamp create_time = 4;
  optional google.protobuf.Timestamp cancel_time = 5;
  optional string cancel_reason = 6;
  optional google.protobuf.Timestamp next_execution_time = 7;
  repeated ExecutedDenial executions = 8;
  uint32 hops_completed = 9;
  bool is_change = 10;
}

message ExecutedDenial {
  int64 id = 1;
  int64 denial_id = 2;
  string from_txid = 3;
  uint32 from_vout = 4;
  string to_txid = 5;
  google.protobuf.Timestamp create_time = 6;
}

message CancelDenialRequest {
  int64 id = 1;
}

message CreateAddressBookEntryRequest {
  string label = 1;
  string address = 2;
  Direction direction = 3;
}

message CreateAddressBookEntryResponse {
  AddressBookEntry entry = 1;
}

enum Direction {
  DIRECTION_UNSPECIFIED = 0;
  DIRECTION_SEND = 1;
  DIRECTION_RECEIVE = 2;
}

message AddressBookEntry {
  int64 id = 1;
  string label = 2;
  string address = 3;
  Direction direction = 4;
  google.protobuf.Timestamp create_time = 5;
}

message ListAddressBookResponse {
  repeated AddressBookEntry entries = 1;
}

message UpdateAddressBookEntryRequest {
  int64 id = 1;
  string label = 2;
  string address = 3;
}

message DeleteAddressBookEntryRequest {
  int64 id = 1;
}

message GetSyncInfoResponse {
  int64 tip_block_height = 1;
  int64 tip_block_time = 2;
  string tip_block_hash = 3;
  google.protobuf.Timestamp tip_block_processed_at = 4;
  int64 header_height = 5;
  // sync progress between 0 and 1
  double sync_progress = 6;
}

// Request to set a transaction note
message SetTransactionNoteRequest {
  string txid = 1;
  string note = 2;
}

message GetFireplaceStatsResponse {
  int64 transaction_count_24h = 1;
  int64 coinnews_count_7d = 2;
  int64 block_count_24h = 3;
}

message ListRecentTransactionsRequest {
  int64 count = 1;
}

message ListRecentTransactionsResponse {
  repeated RecentTransaction transactions = 1;
}

message RecentTransaction {
  uint32 virtual_size = 1;
  google.protobuf.Timestamp time = 2;
  string txid = 3;
  uint64 fee_sats = 4;

  // Block height of the transaction, if confirmed
  optional uint32 confirmed_in_block = 5;
}

message ListBlocksRequest {
  uint32 start_height = 1; // Start from this height (0 means latest)
  uint32 page_size = 2; // How many blocks to return (0 means default 50)
}

message Block {
  google.protobuf.Timestamp block_time = 1;
  uint32 height = 2;
  string hash = 3;
  int32 confirmations = 4;
  int32 version = 5;
  string version_hex = 6;
  string merkle_root = 7;
  uint32 nonce = 8;
  string bits = 9;
  double difficulty = 10;
  string previous_block_hash = 11;
  string next_block_hash = 12;
  int32 stripped_size = 13;
  int32 size = 14;
  int32 weight = 15;
  repeated string txids = 16;
}

message ListBlocksResponse {
  repeated Block recent_blocks = 4;
  bool has_more = 5; // Whether there are more blocks available
}
