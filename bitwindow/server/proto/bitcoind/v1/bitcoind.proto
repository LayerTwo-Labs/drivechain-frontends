syntax = "proto3";

package bitcoind.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service BitcoindService {
  // Lists the ten most recent transactions, both confirmed and unconfirmed.
  rpc ListRecentTransactions(ListRecentTransactionsRequest) returns (ListRecentTransactionsResponse);

  // Lists blocks with pagination support
  rpc ListBlocks(ListBlocksRequest) returns (ListBlocksResponse);

  // Get a specific block by hash or height
  rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);

  // Get basic blockchain info like height, last block time, peers etc.
  rpc GetBlockchainInfo(google.protobuf.Empty) returns (GetBlockchainInfoResponse);

  // Lists very basic info about all peers
  rpc ListPeers(google.protobuf.Empty) returns (ListPeersResponse);

  // Lists very basic info about all peers
  rpc EstimateSmartFee(EstimateSmartFeeRequest) returns (EstimateSmartFeeResponse);

  rpc GetRawTransaction(GetRawTransactionRequest) returns (GetRawTransactionResponse);
  rpc CreateRawTransaction(CreateRawTransactionRequest) returns (CreateRawTransactionResponse);

  // Wallet management
  rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);
  rpc BackupWallet(BackupWalletRequest) returns (BackupWalletResponse);
  rpc DumpWallet(DumpWalletRequest) returns (DumpWalletResponse);
  rpc ImportWallet(ImportWalletRequest) returns (ImportWalletResponse);
  rpc UnloadWallet(UnloadWalletRequest) returns (UnloadWalletResponse);

  // Key/Address management
  rpc DumpPrivKey(DumpPrivKeyRequest) returns (DumpPrivKeyResponse);
  rpc ImportPrivKey(ImportPrivKeyRequest) returns (ImportPrivKeyResponse);
  rpc ImportAddress(ImportAddressRequest) returns (ImportAddressResponse);
  rpc ImportPubKey(ImportPubKeyRequest) returns (ImportPubKeyResponse);
  rpc KeyPoolRefill(KeyPoolRefillRequest) returns (KeyPoolRefillResponse);

  // Account operations
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse);
  rpc SetAccount(SetAccountRequest) returns (SetAccountResponse);
  rpc GetAddressesByAccount(GetAddressesByAccountRequest) returns (GetAddressesByAccountResponse);
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);

  // Multi-sig operations
  rpc AddMultisigAddress(AddMultisigAddressRequest) returns (AddMultisigAddressResponse);
  rpc CreateMultisig(CreateMultisigRequest) returns (CreateMultisigResponse);

  // PSBT handling
  rpc CreatePsbt(CreatePsbtRequest) returns (CreatePsbtResponse);
  rpc DecodePsbt(DecodePsbtRequest) returns (DecodePsbtResponse);
  rpc AnalyzePsbt(AnalyzePsbtRequest) returns (AnalyzePsbtResponse);
  rpc CombinePsbt(CombinePsbtRequest) returns (CombinePsbtResponse);
  rpc UtxoUpdatePsbt(UtxoUpdatePsbtRequest) returns (UtxoUpdatePsbtResponse);
  rpc JoinPsbts(JoinPsbtsRequest) returns (JoinPsbtsResponse);

  // Transaction misc
  rpc TestMempoolAccept(TestMempoolAcceptRequest) returns (TestMempoolAcceptResponse);
}

message ListBlocksRequest {
  uint32 start_height = 1; // Start from this height (0 means latest)
  uint32 page_size = 2; // How many blocks to return (0 means default 50)
}

message Block {
  google.protobuf.Timestamp block_time = 1;
  uint32 height = 2;
  string hash = 3;
  int32 confirmations = 4;
  int32 version = 5;
  string version_hex = 6;
  string merkle_root = 7;
  uint32 nonce = 8;
  string bits = 9;
  double difficulty = 10;
  string previous_block_hash = 11;
  string next_block_hash = 12;
  int32 stripped_size = 13;
  int32 size = 14;
  int32 weight = 15;
  repeated string txids = 16;
}

message ListBlocksResponse {
  repeated Block recent_blocks = 4;
  bool has_more = 5; // Whether there are more blocks available
}

message ListRecentTransactionsRequest {
  int64 count = 1;
}

message ListRecentTransactionsResponse {
  repeated RecentTransaction transactions = 1;
}

message RecentTransaction {
  uint32 virtual_size = 1;
  google.protobuf.Timestamp time = 2;
  string txid = 3;
  uint64 fee_sats = 4;
  optional Block confirmed_in_block = 5;
}

message GetBlockchainInfoResponse {
  string chain = 1;
  uint32 blocks = 2;
  uint32 headers = 3;
  string best_block_hash = 4;
  bool initial_block_download = 8;
}

message Peer {
  int32 id = 1;
  string addr = 2;
  int32 synced_blocks = 3;
}

message ListPeersResponse {
  repeated Peer peers = 1;
}

message EstimateSmartFeeRequest {
  int64 conf_target = 1;
}

message EstimateSmartFeeResponse {
  double fee_rate = 1;
  repeated string errors = 2;
}

message GetRawTransactionRequest {
  string txid = 1;
}

message RawTransaction {
  // Raw transaction data
  bytes data = 1;

  // Hex-encoded raw transaction data
  string hex = 2;
}

// Transaction creation messages
message CreateRawTransactionRequest {
  message Input {
    string txid = 1;
    uint32 vout = 2;
    uint32 sequence = 3;
  }
  repeated Input inputs = 1;
  map<string, double> outputs = 2; // address -> amount
  uint32 locktime = 3;
}

message CreateRawTransactionResponse {
  RawTransaction tx = 1;
}

message ScriptSig {
  string asm = 1;
  string hex = 2;
}

message Input {
  string txid = 1;
  uint32 vout = 2;
  string coinbase = 3;
  ScriptSig script_sig = 4;
  uint32 sequence = 5;
  repeated string witness = 6;
}

message ScriptPubKey {
  string type = 1;
  string address = 2;
}

message Output {
  double amount = 1;
  uint32 vout = 2;

  ScriptPubKey script_pub_key = 3;
  ScriptSig script_sig = 4;
}

message GetRawTransactionResponse {
  RawTransaction tx = 1;
  string txid = 8;
  string hash = 9;
  int32 size = 10;
  int32 vsize = 11;
  int32 weight = 12;
  uint32 version = 13;
  uint32 locktime = 14;

  repeated Input inputs = 2;
  repeated Output outputs = 3;

  string blockhash = 4;
  uint32 confirmations = 5;
  int64 time = 6;
  int64 blocktime = 7;
}

message GetBlockRequest {
  oneof identifier {
    string hash = 1;
    uint32 height = 2;
  }
}

message GetBlockResponse {
  Block block = 1;
}

message CreateWalletRequest {
  string name = 1;
  bool disable_private_keys = 2;
  bool blank = 3;
  string passphrase = 4;
  bool avoid_reuse = 5;
}

message CreateWalletResponse {
  string name = 1;
  string warning = 2;
}

message BackupWalletRequest {
  string destination = 1;
  string wallet = 2;
}

message BackupWalletResponse {}

message DumpWalletRequest {
  string filename = 1;
  string wallet = 2;
}

message DumpWalletResponse {
  string filename = 1;
}

message ImportWalletRequest {
  string filename = 1;
  string wallet = 2;
}

message ImportWalletResponse {}

message UnloadWalletRequest {
  string wallet_name = 1;
  string wallet = 2;
}

message UnloadWalletResponse {}

message DumpPrivKeyRequest {
  string address = 1;
  string wallet = 2;
}

message DumpPrivKeyResponse {
  string private_key = 1;
}

message ImportPrivKeyRequest {
  string private_key = 1;
  string label = 2;
  bool rescan = 3;
  string wallet = 4;
}

message ImportPrivKeyResponse {}

message ImportAddressRequest {
  string address = 1;
  string label = 2;
  bool rescan = 3;
  string wallet = 4;
}

message ImportAddressResponse {}

message ImportPubKeyRequest {
  string pubkey = 1;
  bool rescan = 2;
  string wallet = 3;
}

message ImportPubKeyResponse {}

message KeyPoolRefillRequest {
  uint32 new_size = 1;
  string wallet = 2;
}

message KeyPoolRefillResponse {}

message GetAccountRequest {
  string address = 1;
  string wallet = 2;
}

message GetAccountResponse {
  string account = 1;
}

message SetAccountRequest {
  string address = 1;
  string account = 2;
  string wallet = 3;
}

message SetAccountResponse {}

message GetAddressesByAccountRequest {
  string account = 1;
  string wallet = 2;
}

message GetAddressesByAccountResponse {
  repeated string addresses = 1;
}

message ListAccountsRequest {
  int32 min_conf = 1;
  string wallet = 2;
}

message ListAccountsResponse {
  map<string, double> accounts = 1;
}

message AddMultisigAddressRequest {
  int32 required_sigs = 1;
  repeated string keys = 2;
  string label = 3;
  string wallet = 4;
}

message AddMultisigAddressResponse {
  string address = 1;
}

message CreateMultisigRequest {
  int32 required_sigs = 1;
  repeated string keys = 2;
}

message CreateMultisigResponse {
  string address = 1;
  string redeem_script = 2;
}

message CreatePsbtRequest {
  message Input {
    string txid = 1;
    uint32 vout = 2;
    uint32 sequence = 3;
  }
  repeated Input inputs = 1;
  map<string, double> outputs = 2; // address -> amount
  uint32 locktime = 3;
  bool replaceable = 4;
}

message CreatePsbtResponse {
  string psbt = 1; // Base64 encoded PSBT
}

message DecodePsbtRequest {
  string psbt = 1; // Base64 encoded PSBT
}

message DecodeRawTransactionResponse {
  string txid = 1;
  string hash = 2;

  // The serialized transaction size
  uint32 size = 3;

  // The virtual transaction size (differs from
  // 'size' for witness transactions).
  uint32 virtual_size = 4;

  // The transaction's weight
  uint32 weight = 5;

  uint32 version = 6;

  uint32 locktime = 7;

  repeated Input inputs = 8;

  repeated Output outputs = 9;
}

message DecodePsbtResponse {
  message WitnessUtxo {
    double amount = 1;
    ScriptPubKey script_pub_key = 2;
  }

  message RedeemScript {
    string asm = 1;
    string hex = 2;
    string type = 3;
  }

  message Bip32Deriv {
    string pubkey = 1;
    string master_fingerprint = 2;
    string path = 3;
  }

  message Input {
    DecodeRawTransactionResponse non_witness_utxo = 1;
    WitnessUtxo witness_utxo = 2;
    map<string, string> partial_signatures = 3;
    string sighash = 4;
    RedeemScript redeem_script = 5;
    RedeemScript witness_script = 6;
    repeated Bip32Deriv bip32_derivs = 7;
    ScriptSig final_scriptsig = 8;
    repeated string final_scriptwitness = 9;
    map<string, string> unknown = 10;
  }

  message Output {
    RedeemScript redeem_script = 1;
    RedeemScript witness_script = 2;
    repeated Bip32Deriv bip32_derivs = 3;
    map<string, string> unknown = 4;
  }

  DecodeRawTransactionResponse tx = 1;
  map<string, string> unknown = 2;
  repeated Input inputs = 3;
  repeated Output outputs = 4;
  double fee = 5;
}

message AnalyzePsbtRequest {
  string psbt = 1; // Base64 encoded PSBT
}

message AnalyzePsbtResponse {
  message Input {
    bool has_utxo = 1;
    bool is_final = 2;
    message Missing {
      repeated string pubkeys = 1;
      repeated string signatures = 2;
      string redeem_script = 3;
      string witness_script = 4;
    }
    Missing missing = 3;
    string next = 4;
  }
  repeated Input inputs = 1;
  double estimated_vsize = 2;
  double estimated_feerate = 3;
  double fee = 4;
  string next = 5;
  string error = 6;
}

message CombinePsbtRequest {
  repeated string psbts = 1; // Array of base64 encoded PSBTs
}

message CombinePsbtResponse {
  string psbt = 1; // Combined base64 encoded PSBT
}

message UtxoUpdatePsbtRequest {
  string psbt = 1; // Base64 encoded PSBT
  repeated Descriptor descriptors = 2; // Array of descriptors
}

message UtxoUpdatePsbtResponse {
  string psbt = 1; // Updated base64 encoded PSBT
}

message JoinPsbtsRequest {
  repeated string psbts = 1; // Array of base64 encoded PSBTs
}

message JoinPsbtsResponse {
  string psbt = 1; // Joined base64 encoded PSBT
}

message TestMempoolAcceptRequest {
  repeated string rawtxs = 1;
  double max_fee_rate = 2;
}

message TestMempoolAcceptResponse {
  message Result {
    string txid = 1;
    bool allowed = 2;
    string reject_reason = 3;
    uint32 vsize = 4;
    double fees = 5;
  }
  repeated Result results = 1;
}

// Add a new message for descriptor range
message DescriptorRange {
  oneof range_type {
    int32 end = 1; // Single number for end (begin defaults to 0)
    Range range = 2; // Begin and end range
  }
}

// Add a new message for begin/end range
message Range {
  int32 begin = 1;
  int32 end = 2;
}

// Add a new message for descriptor
message Descriptor {
  oneof descriptor {
    string string_descriptor = 1; // Plain string descriptor
    DescriptorObject object_descriptor = 2; // Descriptor object with range
  }
}

// Add a new message for descriptor objects
message DescriptorObject {
  string desc = 1; // The output descriptor
  DescriptorRange range = 2; // Optional range, defaults to 1000 if not specified
}
