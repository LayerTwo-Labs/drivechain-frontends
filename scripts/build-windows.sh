#!/usr/bin/env bash

set -e

app_name="$1"
client_dir="$2"
certificate_path="$3"
certificate_password="$4"
certificate_identity="$5"

if [ "$app_name" = "" ] || [ "$client_dir" = "" ]; then
    echo "Usage: $0 app_name client_dir [certificate_path] [certificate_password] [certificate_identity]"
    exit 1
fi

lower_app_name=$(echo "$app_name" | tr '[:upper:]' '[:lower:]')

cd "$client_dir"

# Copy certificate to the expected location if provided
if [ -n "$certificate_path" ] && [ -f "$certificate_path" ]; then
    echo "Copying certificate from $certificate_path to windows/certificate.pfx"
    mkdir -p windows
    cp "$certificate_path" windows/certificate.pfx
fi

# Build Flutter app
git config --system core.longpaths true
clean_cmd="flutter clean"
mkdir -p release

# Create signed MSIX and App Installer
if [ -n "$certificate_path" ] && [ -n "$certificate_password" ]; then
    echo "Building signed MSIX with certificate $certificate_path and identity $certificate_identity"
    msix_cmd="dart run msix:publish --certificate-path windows/certificate.pfx --certificate-password $certificate_password"
else
    echo "Building unsigned MSIX (no certificate or password provided)"
    msix_cmd="dart run msix:create"
fi

powershell.exe -Command "& {$clean_cmd; $msix_cmd; exit}"

# Prepare release directory
zip_name=$lower_app_name-win64.zip

# Copy MSIX to release directory
powershell.exe -Command "Copy-Item build\windows\x64\runner\Release\\$lower_app_name.msix release\\$lower_app_name.msix"

# Copy App Installer files if they exist (generated by msix:publish)
powershell.exe -Command "if (Test-Path 'AppPackages') { Copy-Item -Recurse AppPackages\\* release\\ }"

# Create zip with MSIX and App Installer files
powershell.exe -Command "Compress-Archive -Force release\\ $zip_name"
powershell.exe -Command "Move-Item $zip_name release\\"