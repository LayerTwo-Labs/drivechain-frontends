name: Build Clients

on:
  push:
    branches: [master]
    paths:
      - "scripts/**"
      - "sail_ui/**"
      - "bitwindow/**"
      - "thunder/**"
      - "bitnames/**"
      - "bitassets/**"
      - "zside/**"
      - ".github/workflows/**"
  pull_request:
    branches: [master]
    paths:
      - "scripts/**"
      - "sail_ui/**"
      - "bitwindow/**"
      - "thunder/**"
      - "bitnames/**"
      - "bitassets/**"
      - "zside/**"
      - ".github/workflows/**"

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      thunder: ${{ steps.filter.outputs.thunder }}
      bitnames: ${{ steps.filter.outputs.bitnames }}
      bitassets: ${{ steps.filter.outputs.bitassets }}
      zside: ${{ steps.filter.outputs.zside }}
      bitwindow: ${{ steps.filter.outputs.bitwindow }}
      build_all: ${{ steps.filter.outputs.build_all }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            thunder:
              - 'thunder/**'
              - 'sail_ui/**'
              - '.github/workflows/**'
            bitnames:
              - 'bitnames/**'
              - 'sail_ui/**'
              - '.github/workflows/**'
            bitassets:
              - 'bitassets/**'
              - 'sail_ui/**'
              - '.github/workflows/**'
            zside:
              - 'zside/**'
              - 'sail_ui/**'
              - '.github/workflows/**'
            bitwindow:
              - 'bitwindow/**'
              - 'sail_ui/**'
              - '.github/workflows/**'

  matrix-prep:
    needs: check-changes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # Start with empty array
          configurations=()

          # Helper function to add configurations
          add_client_configs() {
            local client=$1
            local build_flag=$2
            
            if [[ "${{ needs.check-changes.outputs.build_all }}" == "true" || "$build_flag" == "true" ]]; then
              for os in "ubuntu-latest" "macos-latest" "windows-latest"; do
                # Skip macOS and linux for PRs
                if [[ "${{ github.event_name }}" == "pull_request" && "$os" = "ubuntu-latest" ]]; then
                  continue
                fi
                
                # Skip Windows for zside
                if [[ "$client" == "zside" && "$os" == "windows-latest" ]]; then
                  continue
                fi
                
                # No chains - just add the basic config
                configurations+=("{\"os\":\"$os\",\"client\":\"$client\"}")
              done
            fi
          }

          # Add configurations for each client that needs building
          add_client_configs "thunder" "${{ needs.check-changes.outputs.thunder }}"
          add_client_configs "bitnames" "${{ needs.check-changes.outputs.bitnames }}"
          add_client_configs "bitassets" "${{ needs.check-changes.outputs.bitassets }}"
          add_client_configs "zside" "${{ needs.check-changes.outputs.zside }}"
          add_client_configs "bitwindow" "${{ needs.check-changes.outputs.bitwindow }}"

          # Join configurations with commas
          matrix=$(IFS=,; echo "{\"include\":[${configurations[*]}]}")
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: matrix-prep
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-prep.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
      - uses: extractions/setup-just@v1
      # Setup go for building bitwindowd
      - uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Setup build directory
        run: |
          # Create build directory name, to avoid caching assets/bin across OSes
          BUILD_DIR="b-${{ matrix.os }}"
          rm -rf "$BUILD_DIR"
          mkdir -p "$BUILD_DIR"
          # Copy source files to build directory
          cp -r ${{ matrix.client }} "$BUILD_DIR/"
          cp -r scripts "$BUILD_DIR/"
          cp -r sail_ui "$BUILD_DIR/"
          # Recreate assets/bin directory
          mkdir -p "$BUILD_DIR/${{ matrix.client }}/assets/bin"
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          cd ${{ env.BUILD_DIR }}/${{ matrix.client }}
          flutter pub get

        # standard macOS sed has subtle differences from gnu
      - name: Install GNU sed on macOS
        if: runner.os == 'macOS'
        run: |
          brew install gnu-sed
          echo "$(brew --prefix)/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH

        # https://docs.flutter.dev/get-started/install/linux/desktop
      # prettier-ignore
      - run:  sudo apt-get update -y && sudo apt-get upgrade -y && sudo apt-get install -y curl git unzip xz-utils zip libglu1-mesa && sudo apt-get install clang cmake git ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev libcurl4-openssl-dev
        if: runner.os == 'Linux'

      # Install FUSE and other dependencies for AppImage creation
      - name: Install FUSE and AppImage dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y fuse libfuse2 squashfs-tools
          # Enable FUSE for non-root users
          sudo modprobe fuse || echo "FUSE module already loaded or not available"
          sudo chmod 666 /dev/fuse || echo "FUSE device not available"

      # Install appimagetool for AppImage creation on Linux
      - name: Install appimagetool
        if: runner.os == 'Linux'
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool

      - name: Setup macOS app signing
        if: runner.os == 'macOS'
        run: |
          # import certificate into the keychain
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
          KEYCHAIN_PASSWORD=$(uuidgen)

          echo "Creating keychain"
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          echo "Setting default keychain"
          security default-keychain -s build.keychain

          echo "Unlocking keychain"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          echo "Setting keychain timeout to 20 minutes"
          security set-keychain-settings -t 1200 -l ~/Library/Keychains/build.keychain

          echo "Importing certificate into keychain"
          security import ./certificate.p12 -k ~/Library/Keychains/build.keychain -P ${{ secrets.MACOS_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign

          echo "Setting key partition list"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" ~/Library/Keychains/build.keychain

          # Find the Common Name of the certificate we just imported
          security find-certificate -a -p build.keychain > certificate.pem
          cert_subject=$(openssl x509 -in certificate.pem -noout -subject)
          echo Certificate subject: "'$cert_subject'"

          cn_part=$(grep -o 'CN = "[^"]*"' <<< "$cert_subject")
          cn_value=$(sed 's/CN = "\(.*\)"/\1/' <<< "$cn_part")
          echo "Determined code sign identity"

          # Create notarization API key file in the build directory
          echo "Creating notarization API key file in ${{ env.BUILD_DIR }}"
          echo ${{ secrets.GODOT_MACOS_NOTARIZATION_API_KEY }} | base64 --decode > "${{ env.BUILD_DIR }}/notarization_api_key.p8"

          # Set the standardized environment variables
          echo "NOTARIZATION_KEY_PATH=$PWD/${{ env.BUILD_DIR }}/notarization_api_key.p8" >> $GITHUB_ENV
          echo "NOTARIZATION_KEY_PASSWORD=" >> $GITHUB_ENV  # Empty for API key auth
          echo "NOTARIZATION_IDENTITY=$cn_value" >> $GITHUB_ENV

      - name: Setup Windows code signing
        if: runner.os == 'Windows'
        run: |
          # Create windows-certificate file from base64 secret
          echo "${{ secrets.MICROSOFT_CODE_SIGNING_OV_KEY_PFX_BASE64 }}" | base64 --decode > "${{ env.BUILD_DIR }}/windows-certificate.pfx"

          # Convert PFX to PEM to extract subject
          openssl pkcs12 -in "${{ env.BUILD_DIR }}/windows-certificate.pfx" -out "${{ env.BUILD_DIR }}/windows-certificate.pem" -nodes -passin pass:"${{ secrets.MICROSOFT_CODE_SIGNING_OV_KEY_PFX_PASSWORD }}"

          # Extract the subject from the certificate
          cert_subject=$(openssl x509 -in "${{ env.BUILD_DIR }}/windows-certificate.pem" -noout -subject)
          echo "Certificate subject: '$cert_subject'"

          # Extract Common Name from subject - fix the grep pattern to handle CN= format
          cn_value=$(echo "$cert_subject" | grep -o 'CN=[^,]*' | sed 's/CN=//' | tr -d '"')

          echo "Extracted identity: '$cn_value'"

          # Set the standardized environment variables
          echo "NOTARIZATION_KEY_PATH=$PWD/${{ env.BUILD_DIR }}/windows-certificate.pfx" >> $GITHUB_ENV
          echo "NOTARIZATION_KEY_PASSWORD=${{ secrets.MICROSOFT_CODE_SIGNING_OV_KEY_PFX_PASSWORD }}" >> $GITHUB_ENV
          echo "NOTARIZATION_IDENTITY=$cn_value" >> $GITHUB_ENV

        shell: bash

      - name: Build app
        run: |
          cd ${{ env.BUILD_DIR }}

          # Everything after the third line is only relevant for macOS
          ./scripts/build-app.sh ${{ runner.os }} ${{ matrix.client }} \
            "$NOTARIZATION_KEY_PATH" "$NOTARIZATION_KEY_PASSWORD" \
            "$NOTARIZATION_IDENTITY" \
            ${{ secrets.GODOT_MACOS_NOTARIZATION_API_KEY_ID }} \
            ${{ secrets.GODOT_MACOS_NOTARIZATION_API_UUID }}

      # List artifacts for verification
      - name: List build artifacts
        run: |
          echo "=== Contents of release directory ==="
          ls -la "${{ env.BUILD_DIR }}/${{ matrix.client }}/release/" || echo "Release directory not found"
          echo "=== End of artifacts list ==="

      - uses: actions/upload-artifact@v4
        with:
          name:
            ${{ matrix.client }}-binaries-${{ runner.os }}${{ matrix.chain != ''
            && format('-{0}', matrix.chain) || '' }}
          if-no-files-found: error
          path: ${{ env.BUILD_DIR }}/${{ matrix.client }}/release/*

  upload-artifacts-to-releases-drivechain-info:
    name: Upload artifacts to releases.drivechain.info
    runs-on: ubuntu-latest
    needs: build
    # Modified if condition to run even with partial failures
    if: |
      always() && 
      github.event_name == 'push' && 
      github.ref == 'refs/heads/master' && 
      github.repository_owner == 'LayerTwo-Labs'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Rename and move artifacts
        working-directory: .
        continue-on-error: true
        run: |
          # Thunder
          mv thunder-binaries-macOS/thunder-osx64.zip test-thunder-x86_64-apple-darwin.zip || true
          mv thunder-binaries-Linux/thunder-x86_64-linux-gnu.zip test-thunder-x86_64-unknown-linux-gnu.zip || true
          mv thunder-binaries-Linux/Thunder-x86_64.AppImage test-thunder-x86_64-unknown-linux-gnu.AppImage || true
          mv thunder-binaries-Windows/thunder-win64.zip test-thunder-x86_64-pc-windows-msvc.zip || true

          # BitNames
          mv bitnames-binaries-macOS/bitnames-osx64.zip test-bitnames-x86_64-apple-darwin.zip || true
          mv bitnames-binaries-Linux/bitnames-x86_64-linux-gnu.zip test-bitnames-x86_64-unknown-linux-gnu.zip || true
          mv bitnames-binaries-Linux/Bitnames-x86_64.AppImage test-bitnames-x86_64-unknown-linux-gnu.AppImage || true
          mv bitnames-binaries-Windows/bitnames-win64.zip test-bitnames-x86_64-pc-windows-msvc.zip || true

          # BitAssets
          mv bitassets-binaries-macOS/bitassets-osx64.zip test-bitassets-x86_64-apple-darwin.zip || true
          mv bitassets-binaries-Linux/bitassets-x86_64-linux-gnu.zip test-bitassets-x86_64-unknown-linux-gnu.zip || true
          mv bitassets-binaries-Linux/BitAssets-x86_64.AppImage test-bitassets-x86_64-unknown-linux-gnu.AppImage || true
          mv bitassets-binaries-Windows/bitassets-win64.zip test-bitassets-x86_64-pc-windows-msvc.zip || true

          # ZSide
          mv zside-binaries-macOS-zside/zside-osx64.zip L2-S5-ZSide-latest-x86_64-apple-darwin.zip || true
          mv zside-binaries-Linux-zside/zside-x86_64-linux-gnu.zip L2-S5-ZSide-latest-x86_64-unknown-linux-gnu.zip || true
          mv zside-binaries-Linux-zside/ZSide-x86_64.AppImage L2-S5-ZSide-latest-x86_64-unknown-linux-gnu.AppImage || true

          # BitWindow
          mv bitwindow-binaries-macOS/bitwindow-osx64.zip BitWindow-latest-x86_64-apple-darwin.zip || true
          mv bitwindow-binaries-Linux/bitwindow-x86_64-linux-gnu.zip BitWindow-latest-x86_64-unknown-linux-gnu.zip || true
          mv bitwindow-binaries-Linux/BitWindow-x86_64.AppImage BitWindow-latest-x86_64-unknown-linux-gnu.AppImage || true
          mv bitwindow-binaries-Windows/bitwindow-win64.zip BitWindow-latest-x86_64-pc-windows-msvc.zip || true

      - name: Upload artifacts to releases.drivechain.info
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        continue-on-error: true
        with:
          host: 45.33.96.47
          user: root
          pass: ${{ secrets.RELEASES_SERVER_PW }}
          port: 22
          scp: |
            'BitWindow-*.zip' => '/var/www/html/'
            'test-*.zip' => '/var/www/html/'
