name: Dart

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

defaults:
  run:
    working-directory: packages/sidesail

jobs:
  format-lint-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      - uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: flutter pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed . -l 120

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: flutter test

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        chain: [testchain, ethereum, zcash]
        exclude:
          - os: windows-latest
            chain: zcash

    name: Build binaries
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: packages/sidesail # must be specified here as well, otherwise overwrites top most

    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      - uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: flutter pub get

      # standard macOS sed has subtle differences from gnu
      - name: Install GNU sed on macOS
        if: runner.os == 'macOS'
        run: |
          brew install gnu-sed
          echo "$(brew --prefix)/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH

        # https://docs.flutter.dev/get-started/install/linux/desktop
      # prettier-ignore
      - run:  sudo apt-get install clang cmake git ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
        if: runner.os == 'Linux'

      - name: Sign macOS app
        if: runner.os == 'macOS'
        run: |
          # import certificate into the keychain
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
          KEYCHAIN_PASSWORD=$(uuidgen)

          echo "Creating keychain"
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          echo "\nSetting default keychain"
          security default-keychain -s build.keychain

          echo "\nUnlocking keychain"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          echo "\nImporting certificate into keychain"
          security import ./certificate.p12 -k ~/Library/Keychains/build.keychain -P ${{ secrets.MACOS_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign

          echo "\nSetting key partition list"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" ~/Library/Keychains/build.keychain

          # Find the Common Name of the certificate we just imported
          security find-certificate -a -p build.keychain > certificate.pem
          common_name=$(openssl x509 -in certificate.pem -noout -subject | sed -n 's/.*CN *= *\([^,]*\).*/\1/p' | tr -d '\n')
          echo "determined code sign identity: '$common_name'"

          echo "CODESIGN_IDENTITY=$common_name" >> $GITHUB_ENV

          echo "\nCreating notarization API key file"
          echo ${{ secrets.MACOS_NOTARIZATION_API_KEY }} | base64 --decode > notarization_api_key.p8

      - name: Build app
        run: |
          # Everything after first line is only relevant for macOS  
          ./scripts/build-app.sh ${{ runner.os }} ${{ matrix.chain }} \
            "$CODESIGN_IDENTITY" $PWD/notarization_api_key.p8 \
            ${{ secrets.MACOS_NOTARIZATION_API_KEY_ID}} \
            ${{ secrets.MACOS_NOTARIZATION_API_UUID}}

      - uses: actions/upload-artifact@v4
        with:
          name: sidesail-binaries-${{ runner.os }}-${{ matrix.chain }}
          if-no-files-found: error
          path: packages/sidesail/release/*
