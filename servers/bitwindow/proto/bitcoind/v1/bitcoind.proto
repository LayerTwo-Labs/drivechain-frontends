syntax = "proto3";

package bitcoind.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service BitcoindService {
  // Lists the ten most recent transactions, both confirmed and unconfirmed.
  rpc ListRecentTransactions(ListRecentTransactionsRequest) returns (ListRecentTransactionsResponse);

  // Lists blocks with pagination support
  rpc ListBlocks(ListBlocksRequest) returns (ListBlocksResponse);

  // Get a specific block by hash or height
  rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);

  // Get basic blockchain info like height, last block time, peers etc.
  rpc GetBlockchainInfo(google.protobuf.Empty) returns (GetBlockchainInfoResponse);

  // Lists very basic info about all peers
  rpc ListPeers(google.protobuf.Empty) returns (ListPeersResponse);

  // Lists very basic info about all peers
  rpc EstimateSmartFee(EstimateSmartFeeRequest) returns (EstimateSmartFeeResponse);

  rpc GetRawTransaction(GetRawTransactionRequest) returns (GetRawTransactionResponse);
}

message ListBlocksRequest {
  uint32 start_height = 1; // Start from this height (0 means latest)
  uint32 page_size = 2; // How many blocks to return (0 means default 50)
}

message Block {
  google.protobuf.Timestamp block_time = 1;
  uint32 height = 2;
  string hash = 3;
  int32 confirmations = 4;
  int32 version = 5;
  string version_hex = 6;
  string merkle_root = 7;
  uint32 nonce = 8;
  string bits = 9;
  double difficulty = 10;
  string previous_block_hash = 11;
  string next_block_hash = 12;
  int32 stripped_size = 13;
  int32 size = 14;
  int32 weight = 15;
  repeated string txids = 16;
}

message ListBlocksResponse {
  repeated Block recent_blocks = 4;
  bool has_more = 5; // Whether there are more blocks available
}

message ListRecentTransactionsRequest {
  int64 count = 1;
}

message ListRecentTransactionsResponse {
  repeated RecentTransaction transactions = 1;
}

message RecentTransaction {
  uint32 virtual_size = 1;
  google.protobuf.Timestamp time = 2;
  string txid = 3;
  uint64 fee_sats = 4;
  optional Block confirmed_in_block = 5;
}

message GetBlockchainInfoResponse {
  string chain = 1;
  uint32 blocks = 2;
  uint32 headers = 3;
  string best_block_hash = 4;
  bool initial_block_download = 8;
}

message Peer {
  int32 id = 1;
  string addr = 2;
  int32 synced_blocks = 3;
}

message ListPeersResponse {
  repeated Peer peers = 1;
}

message EstimateSmartFeeRequest {
  int64 conf_target = 1;
}

message EstimateSmartFeeResponse {
  double fee_rate = 1;
  repeated string errors = 2;
}

message GetRawTransactionRequest {
  string txid = 1;
}

message RawTransaction {
  // Raw transaction data
  bytes data = 1;

  // Hex-encoded raw transaction data
  string hex = 2;
}

message ScriptSig {
  string asm = 1;
  string hex = 2;
}

message Input {
  string txid = 1;
  uint32 vout = 2;
  string coinbase = 3;
  ScriptSig script_sig = 4;
  uint32 sequence = 5;
  repeated string witness = 6;
}

message ScriptPubKey {
  string type = 1;
  string address = 2;
}

message Output {
  double amount = 1;
  uint32 vout = 2;

  ScriptPubKey script_pub_key = 3;
  ScriptSig script_sig = 4;
}

message GetRawTransactionResponse {
  RawTransaction tx = 1;
  string txid = 8;
  string hash = 9;
  int32 size = 10;
  int32 vsize = 11;
  int32 weight = 12;
  uint32 version = 13;
  uint32 locktime = 14;

  repeated Input inputs = 2;
  repeated Output outputs = 3;

  string blockhash = 4;
  uint32 confirmations = 5;
  int64 time = 6;
  int64 blocktime = 7;
}

message GetBlockRequest {
  oneof identifier {
    string hash = 1;
    uint32 height = 2;
  }
}

message GetBlockResponse {
  Block block = 1;
}
