syntax = "proto3";

package bitcoind.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service BitcoindService {
  // Lists the ten most recent transactions, both confirmed and unconfirmed.
  rpc ListRecentTransactions(ListRecentTransactionsRequest) returns (ListRecentTransactionsResponse);

  // Lists the ten most recent blocks, lightly populated with data.
  rpc ListRecentBlocks(ListRecentBlocksRequest) returns (ListRecentBlocksResponse);

  // Get basic blockchain info like height, last block time, peers etc.
  rpc GetBlockchainInfo(google.protobuf.Empty) returns (GetBlockchainInfoResponse);

  // Lists very basic info about all peers
  rpc ListPeers(google.protobuf.Empty) returns (ListPeersResponse);

  // Lists very basic info about all peers
  rpc EstimateSmartFee(EstimateSmartFeeRequest) returns (EstimateSmartFeeResponse);
}

message ListRecentBlocksRequest {
  int64 count = 1;
}

message Block {
  google.protobuf.Timestamp block_time = 1;
  uint32 block_height = 2;
  string hash = 3;
}

message ListRecentBlocksResponse {
  repeated Block recent_blocks = 4;
}

message ListRecentTransactionsRequest {
  int64 count = 1;
}

message ListRecentTransactionsResponse {
  repeated RecentTransaction transactions = 1;
}

message RecentTransaction {
  uint32 virtual_size = 1;
  google.protobuf.Timestamp time = 2;
  string txid = 3;
  uint64 fee_satoshi = 4;
  optional Block confirmed_in_block = 5;
}

message GetBlockchainInfoResponse {
  string chain = 1;
  uint32 blocks = 2;
  uint32 headers = 3;
  string best_block_hash = 4;
  bool initial_block_download = 8;
}

message Peer {
  int32 id = 1;
  string addr = 2;
  int32 synced_blocks = 3;
}

message ListPeersResponse {
  repeated Peer peers = 1;
}

message EstimateSmartFeeRequest {
  int64 conf_target = 1;
}

message EstimateSmartFeeResponse {
  double fee_rate = 1;
  repeated string errors = 2;
}
