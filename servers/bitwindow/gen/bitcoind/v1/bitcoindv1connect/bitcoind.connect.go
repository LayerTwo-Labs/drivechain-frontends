// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bitcoind/v1/bitcoind.proto

package bitcoindv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/servers/bitwindow/gen/bitcoind/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BitcoindServiceName is the fully-qualified name of the BitcoindService service.
	BitcoindServiceName = "bitcoind.v1.BitcoindService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BitcoindServiceListRecentTransactionsProcedure is the fully-qualified name of the
	// BitcoindService's ListRecentTransactions RPC.
	BitcoindServiceListRecentTransactionsProcedure = "/bitcoind.v1.BitcoindService/ListRecentTransactions"
	// BitcoindServiceListBlocksProcedure is the fully-qualified name of the BitcoindService's
	// ListBlocks RPC.
	BitcoindServiceListBlocksProcedure = "/bitcoind.v1.BitcoindService/ListBlocks"
	// BitcoindServiceGetBlockProcedure is the fully-qualified name of the BitcoindService's GetBlock
	// RPC.
	BitcoindServiceGetBlockProcedure = "/bitcoind.v1.BitcoindService/GetBlock"
	// BitcoindServiceGetBlockchainInfoProcedure is the fully-qualified name of the BitcoindService's
	// GetBlockchainInfo RPC.
	BitcoindServiceGetBlockchainInfoProcedure = "/bitcoind.v1.BitcoindService/GetBlockchainInfo"
	// BitcoindServiceListPeersProcedure is the fully-qualified name of the BitcoindService's ListPeers
	// RPC.
	BitcoindServiceListPeersProcedure = "/bitcoind.v1.BitcoindService/ListPeers"
	// BitcoindServiceEstimateSmartFeeProcedure is the fully-qualified name of the BitcoindService's
	// EstimateSmartFee RPC.
	BitcoindServiceEstimateSmartFeeProcedure = "/bitcoind.v1.BitcoindService/EstimateSmartFee"
	// BitcoindServiceGetRawTransactionProcedure is the fully-qualified name of the BitcoindService's
	// GetRawTransaction RPC.
	BitcoindServiceGetRawTransactionProcedure = "/bitcoind.v1.BitcoindService/GetRawTransaction"
)

// BitcoindServiceClient is a client for the bitcoind.v1.BitcoindService service.
type BitcoindServiceClient interface {
	// Lists the ten most recent transactions, both confirmed and unconfirmed.
	ListRecentTransactions(context.Context, *connect.Request[v1.ListRecentTransactionsRequest]) (*connect.Response[v1.ListRecentTransactionsResponse], error)
	// Lists blocks with pagination support
	ListBlocks(context.Context, *connect.Request[v1.ListBlocksRequest]) (*connect.Response[v1.ListBlocksResponse], error)
	// Get a specific block by hash or height
	GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error)
	// Get basic blockchain info like height, last block time, peers etc.
	GetBlockchainInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBlockchainInfoResponse], error)
	// Lists very basic info about all peers
	ListPeers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListPeersResponse], error)
	// Lists very basic info about all peers
	EstimateSmartFee(context.Context, *connect.Request[v1.EstimateSmartFeeRequest]) (*connect.Response[v1.EstimateSmartFeeResponse], error)
	GetRawTransaction(context.Context, *connect.Request[v1.GetRawTransactionRequest]) (*connect.Response[v1.GetRawTransactionResponse], error)
}

// NewBitcoindServiceClient constructs a client for the bitcoind.v1.BitcoindService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBitcoindServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BitcoindServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bitcoindServiceMethods := v1.File_bitcoind_v1_bitcoind_proto.Services().ByName("BitcoindService").Methods()
	return &bitcoindServiceClient{
		listRecentTransactions: connect.NewClient[v1.ListRecentTransactionsRequest, v1.ListRecentTransactionsResponse](
			httpClient,
			baseURL+BitcoindServiceListRecentTransactionsProcedure,
			connect.WithSchema(bitcoindServiceMethods.ByName("ListRecentTransactions")),
			connect.WithClientOptions(opts...),
		),
		listBlocks: connect.NewClient[v1.ListBlocksRequest, v1.ListBlocksResponse](
			httpClient,
			baseURL+BitcoindServiceListBlocksProcedure,
			connect.WithSchema(bitcoindServiceMethods.ByName("ListBlocks")),
			connect.WithClientOptions(opts...),
		),
		getBlock: connect.NewClient[v1.GetBlockRequest, v1.GetBlockResponse](
			httpClient,
			baseURL+BitcoindServiceGetBlockProcedure,
			connect.WithSchema(bitcoindServiceMethods.ByName("GetBlock")),
			connect.WithClientOptions(opts...),
		),
		getBlockchainInfo: connect.NewClient[emptypb.Empty, v1.GetBlockchainInfoResponse](
			httpClient,
			baseURL+BitcoindServiceGetBlockchainInfoProcedure,
			connect.WithSchema(bitcoindServiceMethods.ByName("GetBlockchainInfo")),
			connect.WithClientOptions(opts...),
		),
		listPeers: connect.NewClient[emptypb.Empty, v1.ListPeersResponse](
			httpClient,
			baseURL+BitcoindServiceListPeersProcedure,
			connect.WithSchema(bitcoindServiceMethods.ByName("ListPeers")),
			connect.WithClientOptions(opts...),
		),
		estimateSmartFee: connect.NewClient[v1.EstimateSmartFeeRequest, v1.EstimateSmartFeeResponse](
			httpClient,
			baseURL+BitcoindServiceEstimateSmartFeeProcedure,
			connect.WithSchema(bitcoindServiceMethods.ByName("EstimateSmartFee")),
			connect.WithClientOptions(opts...),
		),
		getRawTransaction: connect.NewClient[v1.GetRawTransactionRequest, v1.GetRawTransactionResponse](
			httpClient,
			baseURL+BitcoindServiceGetRawTransactionProcedure,
			connect.WithSchema(bitcoindServiceMethods.ByName("GetRawTransaction")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bitcoindServiceClient implements BitcoindServiceClient.
type bitcoindServiceClient struct {
	listRecentTransactions *connect.Client[v1.ListRecentTransactionsRequest, v1.ListRecentTransactionsResponse]
	listBlocks             *connect.Client[v1.ListBlocksRequest, v1.ListBlocksResponse]
	getBlock               *connect.Client[v1.GetBlockRequest, v1.GetBlockResponse]
	getBlockchainInfo      *connect.Client[emptypb.Empty, v1.GetBlockchainInfoResponse]
	listPeers              *connect.Client[emptypb.Empty, v1.ListPeersResponse]
	estimateSmartFee       *connect.Client[v1.EstimateSmartFeeRequest, v1.EstimateSmartFeeResponse]
	getRawTransaction      *connect.Client[v1.GetRawTransactionRequest, v1.GetRawTransactionResponse]
}

// ListRecentTransactions calls bitcoind.v1.BitcoindService.ListRecentTransactions.
func (c *bitcoindServiceClient) ListRecentTransactions(ctx context.Context, req *connect.Request[v1.ListRecentTransactionsRequest]) (*connect.Response[v1.ListRecentTransactionsResponse], error) {
	return c.listRecentTransactions.CallUnary(ctx, req)
}

// ListBlocks calls bitcoind.v1.BitcoindService.ListBlocks.
func (c *bitcoindServiceClient) ListBlocks(ctx context.Context, req *connect.Request[v1.ListBlocksRequest]) (*connect.Response[v1.ListBlocksResponse], error) {
	return c.listBlocks.CallUnary(ctx, req)
}

// GetBlock calls bitcoind.v1.BitcoindService.GetBlock.
func (c *bitcoindServiceClient) GetBlock(ctx context.Context, req *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error) {
	return c.getBlock.CallUnary(ctx, req)
}

// GetBlockchainInfo calls bitcoind.v1.BitcoindService.GetBlockchainInfo.
func (c *bitcoindServiceClient) GetBlockchainInfo(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBlockchainInfoResponse], error) {
	return c.getBlockchainInfo.CallUnary(ctx, req)
}

// ListPeers calls bitcoind.v1.BitcoindService.ListPeers.
func (c *bitcoindServiceClient) ListPeers(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListPeersResponse], error) {
	return c.listPeers.CallUnary(ctx, req)
}

// EstimateSmartFee calls bitcoind.v1.BitcoindService.EstimateSmartFee.
func (c *bitcoindServiceClient) EstimateSmartFee(ctx context.Context, req *connect.Request[v1.EstimateSmartFeeRequest]) (*connect.Response[v1.EstimateSmartFeeResponse], error) {
	return c.estimateSmartFee.CallUnary(ctx, req)
}

// GetRawTransaction calls bitcoind.v1.BitcoindService.GetRawTransaction.
func (c *bitcoindServiceClient) GetRawTransaction(ctx context.Context, req *connect.Request[v1.GetRawTransactionRequest]) (*connect.Response[v1.GetRawTransactionResponse], error) {
	return c.getRawTransaction.CallUnary(ctx, req)
}

// BitcoindServiceHandler is an implementation of the bitcoind.v1.BitcoindService service.
type BitcoindServiceHandler interface {
	// Lists the ten most recent transactions, both confirmed and unconfirmed.
	ListRecentTransactions(context.Context, *connect.Request[v1.ListRecentTransactionsRequest]) (*connect.Response[v1.ListRecentTransactionsResponse], error)
	// Lists blocks with pagination support
	ListBlocks(context.Context, *connect.Request[v1.ListBlocksRequest]) (*connect.Response[v1.ListBlocksResponse], error)
	// Get a specific block by hash or height
	GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error)
	// Get basic blockchain info like height, last block time, peers etc.
	GetBlockchainInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBlockchainInfoResponse], error)
	// Lists very basic info about all peers
	ListPeers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListPeersResponse], error)
	// Lists very basic info about all peers
	EstimateSmartFee(context.Context, *connect.Request[v1.EstimateSmartFeeRequest]) (*connect.Response[v1.EstimateSmartFeeResponse], error)
	GetRawTransaction(context.Context, *connect.Request[v1.GetRawTransactionRequest]) (*connect.Response[v1.GetRawTransactionResponse], error)
}

// NewBitcoindServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBitcoindServiceHandler(svc BitcoindServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bitcoindServiceMethods := v1.File_bitcoind_v1_bitcoind_proto.Services().ByName("BitcoindService").Methods()
	bitcoindServiceListRecentTransactionsHandler := connect.NewUnaryHandler(
		BitcoindServiceListRecentTransactionsProcedure,
		svc.ListRecentTransactions,
		connect.WithSchema(bitcoindServiceMethods.ByName("ListRecentTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoindServiceListBlocksHandler := connect.NewUnaryHandler(
		BitcoindServiceListBlocksProcedure,
		svc.ListBlocks,
		connect.WithSchema(bitcoindServiceMethods.ByName("ListBlocks")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoindServiceGetBlockHandler := connect.NewUnaryHandler(
		BitcoindServiceGetBlockProcedure,
		svc.GetBlock,
		connect.WithSchema(bitcoindServiceMethods.ByName("GetBlock")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoindServiceGetBlockchainInfoHandler := connect.NewUnaryHandler(
		BitcoindServiceGetBlockchainInfoProcedure,
		svc.GetBlockchainInfo,
		connect.WithSchema(bitcoindServiceMethods.ByName("GetBlockchainInfo")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoindServiceListPeersHandler := connect.NewUnaryHandler(
		BitcoindServiceListPeersProcedure,
		svc.ListPeers,
		connect.WithSchema(bitcoindServiceMethods.ByName("ListPeers")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoindServiceEstimateSmartFeeHandler := connect.NewUnaryHandler(
		BitcoindServiceEstimateSmartFeeProcedure,
		svc.EstimateSmartFee,
		connect.WithSchema(bitcoindServiceMethods.ByName("EstimateSmartFee")),
		connect.WithHandlerOptions(opts...),
	)
	bitcoindServiceGetRawTransactionHandler := connect.NewUnaryHandler(
		BitcoindServiceGetRawTransactionProcedure,
		svc.GetRawTransaction,
		connect.WithSchema(bitcoindServiceMethods.ByName("GetRawTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bitcoind.v1.BitcoindService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BitcoindServiceListRecentTransactionsProcedure:
			bitcoindServiceListRecentTransactionsHandler.ServeHTTP(w, r)
		case BitcoindServiceListBlocksProcedure:
			bitcoindServiceListBlocksHandler.ServeHTTP(w, r)
		case BitcoindServiceGetBlockProcedure:
			bitcoindServiceGetBlockHandler.ServeHTTP(w, r)
		case BitcoindServiceGetBlockchainInfoProcedure:
			bitcoindServiceGetBlockchainInfoHandler.ServeHTTP(w, r)
		case BitcoindServiceListPeersProcedure:
			bitcoindServiceListPeersHandler.ServeHTTP(w, r)
		case BitcoindServiceEstimateSmartFeeProcedure:
			bitcoindServiceEstimateSmartFeeHandler.ServeHTTP(w, r)
		case BitcoindServiceGetRawTransactionProcedure:
			bitcoindServiceGetRawTransactionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBitcoindServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBitcoindServiceHandler struct{}

func (UnimplementedBitcoindServiceHandler) ListRecentTransactions(context.Context, *connect.Request[v1.ListRecentTransactionsRequest]) (*connect.Response[v1.ListRecentTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoind.v1.BitcoindService.ListRecentTransactions is not implemented"))
}

func (UnimplementedBitcoindServiceHandler) ListBlocks(context.Context, *connect.Request[v1.ListBlocksRequest]) (*connect.Response[v1.ListBlocksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoind.v1.BitcoindService.ListBlocks is not implemented"))
}

func (UnimplementedBitcoindServiceHandler) GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoind.v1.BitcoindService.GetBlock is not implemented"))
}

func (UnimplementedBitcoindServiceHandler) GetBlockchainInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBlockchainInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoind.v1.BitcoindService.GetBlockchainInfo is not implemented"))
}

func (UnimplementedBitcoindServiceHandler) ListPeers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListPeersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoind.v1.BitcoindService.ListPeers is not implemented"))
}

func (UnimplementedBitcoindServiceHandler) EstimateSmartFee(context.Context, *connect.Request[v1.EstimateSmartFeeRequest]) (*connect.Response[v1.EstimateSmartFeeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoind.v1.BitcoindService.EstimateSmartFee is not implemented"))
}

func (UnimplementedBitcoindServiceHandler) GetRawTransaction(context.Context, *connect.Request[v1.GetRawTransactionRequest]) (*connect.Response[v1.GetRawTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoind.v1.BitcoindService.GetRawTransaction is not implemented"))
}
