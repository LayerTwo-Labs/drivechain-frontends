// CUSF sidechain node service

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cusf/sidechain/v1/sidechain.proto

package sidechainv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/drivechain-server/gen/cusf/sidechain/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SidechainServiceName is the fully-qualified name of the SidechainService service.
	SidechainServiceName = "cusf.sidechain.v1.SidechainService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SidechainServiceGetMempoolTxsProcedure is the fully-qualified name of the SidechainService's
	// GetMempoolTxs RPC.
	SidechainServiceGetMempoolTxsProcedure = "/cusf.sidechain.v1.SidechainService/GetMempoolTxs"
	// SidechainServiceGetUtxosProcedure is the fully-qualified name of the SidechainService's GetUtxos
	// RPC.
	SidechainServiceGetUtxosProcedure = "/cusf.sidechain.v1.SidechainService/GetUtxos"
	// SidechainServiceSubmitTransactionProcedure is the fully-qualified name of the SidechainService's
	// SubmitTransaction RPC.
	SidechainServiceSubmitTransactionProcedure = "/cusf.sidechain.v1.SidechainService/SubmitTransaction"
	// SidechainServiceSubscribeEventsProcedure is the fully-qualified name of the SidechainService's
	// SubscribeEvents RPC.
	SidechainServiceSubscribeEventsProcedure = "/cusf.sidechain.v1.SidechainService/SubscribeEvents"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sidechainServiceServiceDescriptor                 = v1.File_cusf_sidechain_v1_sidechain_proto.Services().ByName("SidechainService")
	sidechainServiceGetMempoolTxsMethodDescriptor     = sidechainServiceServiceDescriptor.Methods().ByName("GetMempoolTxs")
	sidechainServiceGetUtxosMethodDescriptor          = sidechainServiceServiceDescriptor.Methods().ByName("GetUtxos")
	sidechainServiceSubmitTransactionMethodDescriptor = sidechainServiceServiceDescriptor.Methods().ByName("SubmitTransaction")
	sidechainServiceSubscribeEventsMethodDescriptor   = sidechainServiceServiceDescriptor.Methods().ByName("SubscribeEvents")
)

// SidechainServiceClient is a client for the cusf.sidechain.v1.SidechainService service.
type SidechainServiceClient interface {
	GetMempoolTxs(context.Context, *connect.Request[v1.GetMempoolTxsRequest]) (*connect.Response[v1.GetMempoolTxsResponse], error)
	GetUtxos(context.Context, *connect.Request[v1.GetUtxosRequest]) (*connect.Response[v1.GetUtxosResponse], error)
	SubmitTransaction(context.Context, *connect.Request[v1.SubmitTransactionRequest]) (*connect.Response[v1.SubmitTransactionResponse], error)
	SubscribeEvents(context.Context, *connect.Request[v1.SubscribeEventsRequest]) (*connect.ServerStreamForClient[v1.SubscribeEventsResponse], error)
}

// NewSidechainServiceClient constructs a client for the cusf.sidechain.v1.SidechainService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSidechainServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SidechainServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sidechainServiceClient{
		getMempoolTxs: connect.NewClient[v1.GetMempoolTxsRequest, v1.GetMempoolTxsResponse](
			httpClient,
			baseURL+SidechainServiceGetMempoolTxsProcedure,
			connect.WithSchema(sidechainServiceGetMempoolTxsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUtxos: connect.NewClient[v1.GetUtxosRequest, v1.GetUtxosResponse](
			httpClient,
			baseURL+SidechainServiceGetUtxosProcedure,
			connect.WithSchema(sidechainServiceGetUtxosMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		submitTransaction: connect.NewClient[v1.SubmitTransactionRequest, v1.SubmitTransactionResponse](
			httpClient,
			baseURL+SidechainServiceSubmitTransactionProcedure,
			connect.WithSchema(sidechainServiceSubmitTransactionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribeEvents: connect.NewClient[v1.SubscribeEventsRequest, v1.SubscribeEventsResponse](
			httpClient,
			baseURL+SidechainServiceSubscribeEventsProcedure,
			connect.WithSchema(sidechainServiceSubscribeEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sidechainServiceClient implements SidechainServiceClient.
type sidechainServiceClient struct {
	getMempoolTxs     *connect.Client[v1.GetMempoolTxsRequest, v1.GetMempoolTxsResponse]
	getUtxos          *connect.Client[v1.GetUtxosRequest, v1.GetUtxosResponse]
	submitTransaction *connect.Client[v1.SubmitTransactionRequest, v1.SubmitTransactionResponse]
	subscribeEvents   *connect.Client[v1.SubscribeEventsRequest, v1.SubscribeEventsResponse]
}

// GetMempoolTxs calls cusf.sidechain.v1.SidechainService.GetMempoolTxs.
func (c *sidechainServiceClient) GetMempoolTxs(ctx context.Context, req *connect.Request[v1.GetMempoolTxsRequest]) (*connect.Response[v1.GetMempoolTxsResponse], error) {
	return c.getMempoolTxs.CallUnary(ctx, req)
}

// GetUtxos calls cusf.sidechain.v1.SidechainService.GetUtxos.
func (c *sidechainServiceClient) GetUtxos(ctx context.Context, req *connect.Request[v1.GetUtxosRequest]) (*connect.Response[v1.GetUtxosResponse], error) {
	return c.getUtxos.CallUnary(ctx, req)
}

// SubmitTransaction calls cusf.sidechain.v1.SidechainService.SubmitTransaction.
func (c *sidechainServiceClient) SubmitTransaction(ctx context.Context, req *connect.Request[v1.SubmitTransactionRequest]) (*connect.Response[v1.SubmitTransactionResponse], error) {
	return c.submitTransaction.CallUnary(ctx, req)
}

// SubscribeEvents calls cusf.sidechain.v1.SidechainService.SubscribeEvents.
func (c *sidechainServiceClient) SubscribeEvents(ctx context.Context, req *connect.Request[v1.SubscribeEventsRequest]) (*connect.ServerStreamForClient[v1.SubscribeEventsResponse], error) {
	return c.subscribeEvents.CallServerStream(ctx, req)
}

// SidechainServiceHandler is an implementation of the cusf.sidechain.v1.SidechainService service.
type SidechainServiceHandler interface {
	GetMempoolTxs(context.Context, *connect.Request[v1.GetMempoolTxsRequest]) (*connect.Response[v1.GetMempoolTxsResponse], error)
	GetUtxos(context.Context, *connect.Request[v1.GetUtxosRequest]) (*connect.Response[v1.GetUtxosResponse], error)
	SubmitTransaction(context.Context, *connect.Request[v1.SubmitTransactionRequest]) (*connect.Response[v1.SubmitTransactionResponse], error)
	SubscribeEvents(context.Context, *connect.Request[v1.SubscribeEventsRequest], *connect.ServerStream[v1.SubscribeEventsResponse]) error
}

// NewSidechainServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSidechainServiceHandler(svc SidechainServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sidechainServiceGetMempoolTxsHandler := connect.NewUnaryHandler(
		SidechainServiceGetMempoolTxsProcedure,
		svc.GetMempoolTxs,
		connect.WithSchema(sidechainServiceGetMempoolTxsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sidechainServiceGetUtxosHandler := connect.NewUnaryHandler(
		SidechainServiceGetUtxosProcedure,
		svc.GetUtxos,
		connect.WithSchema(sidechainServiceGetUtxosMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sidechainServiceSubmitTransactionHandler := connect.NewUnaryHandler(
		SidechainServiceSubmitTransactionProcedure,
		svc.SubmitTransaction,
		connect.WithSchema(sidechainServiceSubmitTransactionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sidechainServiceSubscribeEventsHandler := connect.NewServerStreamHandler(
		SidechainServiceSubscribeEventsProcedure,
		svc.SubscribeEvents,
		connect.WithSchema(sidechainServiceSubscribeEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cusf.sidechain.v1.SidechainService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SidechainServiceGetMempoolTxsProcedure:
			sidechainServiceGetMempoolTxsHandler.ServeHTTP(w, r)
		case SidechainServiceGetUtxosProcedure:
			sidechainServiceGetUtxosHandler.ServeHTTP(w, r)
		case SidechainServiceSubmitTransactionProcedure:
			sidechainServiceSubmitTransactionHandler.ServeHTTP(w, r)
		case SidechainServiceSubscribeEventsProcedure:
			sidechainServiceSubscribeEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSidechainServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSidechainServiceHandler struct{}

func (UnimplementedSidechainServiceHandler) GetMempoolTxs(context.Context, *connect.Request[v1.GetMempoolTxsRequest]) (*connect.Response[v1.GetMempoolTxsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.sidechain.v1.SidechainService.GetMempoolTxs is not implemented"))
}

func (UnimplementedSidechainServiceHandler) GetUtxos(context.Context, *connect.Request[v1.GetUtxosRequest]) (*connect.Response[v1.GetUtxosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.sidechain.v1.SidechainService.GetUtxos is not implemented"))
}

func (UnimplementedSidechainServiceHandler) SubmitTransaction(context.Context, *connect.Request[v1.SubmitTransactionRequest]) (*connect.Response[v1.SubmitTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.sidechain.v1.SidechainService.SubmitTransaction is not implemented"))
}

func (UnimplementedSidechainServiceHandler) SubscribeEvents(context.Context, *connect.Request[v1.SubscribeEventsRequest], *connect.ServerStream[v1.SubscribeEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("cusf.sidechain.v1.SidechainService.SubscribeEvents is not implemented"))
}
