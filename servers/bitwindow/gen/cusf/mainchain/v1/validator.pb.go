// CUSF mainchain validator service

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: cusf/mainchain/v1/validator.proto

package mainchainv1

import (
	v1 "github.com/LayerTwo-Labs/sidesail/servers/bitwindow/gen/cusf/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Network int32

const (
	Network_NETWORK_UNSPECIFIED Network = 0
	Network_NETWORK_UNKNOWN     Network = 1
	Network_NETWORK_MAINNET     Network = 2
	Network_NETWORK_REGTEST     Network = 3
	Network_NETWORK_SIGNET      Network = 4
	Network_NETWORK_TESTNET     Network = 5
)

// Enum value maps for Network.
var (
	Network_name = map[int32]string{
		0: "NETWORK_UNSPECIFIED",
		1: "NETWORK_UNKNOWN",
		2: "NETWORK_MAINNET",
		3: "NETWORK_REGTEST",
		4: "NETWORK_SIGNET",
		5: "NETWORK_TESTNET",
	}
	Network_value = map[string]int32{
		"NETWORK_UNSPECIFIED": 0,
		"NETWORK_UNKNOWN":     1,
		"NETWORK_MAINNET":     2,
		"NETWORK_REGTEST":     3,
		"NETWORK_SIGNET":      4,
		"NETWORK_TESTNET":     5,
	}
)

func (x Network) Enum() *Network {
	p := new(Network)
	*p = x
	return p
}

func (x Network) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Network) Descriptor() protoreflect.EnumDescriptor {
	return file_cusf_mainchain_v1_validator_proto_enumTypes[0].Descriptor()
}

func (Network) Type() protoreflect.EnumType {
	return &file_cusf_mainchain_v1_validator_proto_enumTypes[0]
}

func (x Network) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Network.Descriptor instead.
func (Network) EnumDescriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{0}
}

type BlockHeaderInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     *v1.ReverseHex         `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	PrevBlockHash *v1.ReverseHex         `protobuf:"bytes,2,opt,name=prev_block_hash,json=prevBlockHash,proto3" json:"prev_block_hash,omitempty"`
	Height        uint32                 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// Total work as a uint256, little-endian
	Work          *v1.ConsensusHex `protobuf:"bytes,4,opt,name=work,proto3" json:"work,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockHeaderInfo) Reset() {
	*x = BlockHeaderInfo{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHeaderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeaderInfo) ProtoMessage() {}

func (x *BlockHeaderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeaderInfo.ProtoReflect.Descriptor instead.
func (*BlockHeaderInfo) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{0}
}

func (x *BlockHeaderInfo) GetBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *BlockHeaderInfo) GetPrevBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.PrevBlockHash
	}
	return nil
}

func (x *BlockHeaderInfo) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockHeaderInfo) GetWork() *v1.ConsensusHex {
	if x != nil {
		return x.Work
	}
	return nil
}

type Deposit struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	SequenceNumber *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Outpoint       *OutPoint               `protobuf:"bytes,2,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	Output         *Deposit_Output         `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

func (x *Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{1}
}

func (x *Deposit) GetSequenceNumber() *wrapperspb.UInt64Value {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

func (x *Deposit) GetOutpoint() *OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *Deposit) GetOutput() *Deposit_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

type WithdrawalBundleEvent struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	M6Id          *v1.ConsensusHex             `protobuf:"bytes,1,opt,name=m6id,proto3" json:"m6id,omitempty"`
	Event         *WithdrawalBundleEvent_Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalBundleEvent) Reset() {
	*x = WithdrawalBundleEvent{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalBundleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalBundleEvent) ProtoMessage() {}

func (x *WithdrawalBundleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalBundleEvent.ProtoReflect.Descriptor instead.
func (*WithdrawalBundleEvent) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{2}
}

func (x *WithdrawalBundleEvent) GetM6Id() *v1.ConsensusHex {
	if x != nil {
		return x.M6Id
	}
	return nil
}

func (x *WithdrawalBundleEvent) GetEvent() *WithdrawalBundleEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// Specific to an individual sidechain slot
type BlockInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// repeated Deposit deposits = 1;
	// repeated WithdrawalBundleEvent withdrawal_bundle_events = 2;
	BmmCommitment *v1.ConsensusHex   `protobuf:"bytes,1,opt,name=bmm_commitment,json=bmmCommitment,proto3,oneof" json:"bmm_commitment,omitempty"`
	Events        []*BlockInfo_Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{3}
}

func (x *BlockInfo) GetBmmCommitment() *v1.ConsensusHex {
	if x != nil {
		return x.BmmCommitment
	}
	return nil
}

func (x *BlockInfo) GetEvents() []*BlockInfo_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type GetBlockHeaderInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     *v1.ReverseHex         `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeaderInfoRequest) Reset() {
	*x = GetBlockHeaderInfoRequest{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeaderInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeaderInfoRequest) ProtoMessage() {}

func (x *GetBlockHeaderInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeaderInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeaderInfoRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlockHeaderInfoRequest) GetBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type GetBlockHeaderInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeaderInfo    *BlockHeaderInfo       `protobuf:"bytes,1,opt,name=header_info,json=headerInfo,proto3" json:"header_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeaderInfoResponse) Reset() {
	*x = GetBlockHeaderInfoResponse{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeaderInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeaderInfoResponse) ProtoMessage() {}

func (x *GetBlockHeaderInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeaderInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHeaderInfoResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{5}
}

func (x *GetBlockHeaderInfoResponse) GetHeaderInfo() *BlockHeaderInfo {
	if x != nil {
		return x.HeaderInfo
	}
	return nil
}

type GetBlockInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The block to fetch information about.
	BlockHash *v1.ReverseHex `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The sidechain to filter for events relating to.
	SidechainId   *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=sidechain_id,json=sidechainId,proto3" json:"sidechain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockInfoRequest) Reset() {
	*x = GetBlockInfoRequest{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoRequest) ProtoMessage() {}

func (x *GetBlockInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlockInfoRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{6}
}

func (x *GetBlockInfoRequest) GetBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *GetBlockInfoRequest) GetSidechainId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainId
	}
	return nil
}

type GetBlockInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Information about the block itself.
	HeaderInfo *BlockHeaderInfo `protobuf:"bytes,1,opt,name=header_info,json=headerInfo,proto3" json:"header_info,omitempty"`
	// Information about the block, filtered for events relating to
	// a specific sidechain.
	BlockInfo     *BlockInfo `protobuf:"bytes,2,opt,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockInfoResponse) Reset() {
	*x = GetBlockInfoResponse{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoResponse) ProtoMessage() {}

func (x *GetBlockInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlockInfoResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{7}
}

func (x *GetBlockInfoResponse) GetHeaderInfo() *BlockHeaderInfo {
	if x != nil {
		return x.HeaderInfo
	}
	return nil
}

func (x *GetBlockInfoResponse) GetBlockInfo() *BlockInfo {
	if x != nil {
		return x.BlockInfo
	}
	return nil
}

type GetBmmHStarCommitmentRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	BlockHash     *v1.ReverseHex          `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	SidechainId   *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=sidechain_id,json=sidechainId,proto3" json:"sidechain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBmmHStarCommitmentRequest) Reset() {
	*x = GetBmmHStarCommitmentRequest{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBmmHStarCommitmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBmmHStarCommitmentRequest) ProtoMessage() {}

func (x *GetBmmHStarCommitmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBmmHStarCommitmentRequest.ProtoReflect.Descriptor instead.
func (*GetBmmHStarCommitmentRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{8}
}

func (x *GetBmmHStarCommitmentRequest) GetBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *GetBmmHStarCommitmentRequest) GetSidechainId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainId
	}
	return nil
}

type GetBmmHStarCommitmentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*GetBmmHStarCommitmentResponse_BlockNotFound
	//	*GetBmmHStarCommitmentResponse_Commitment_
	Result        isGetBmmHStarCommitmentResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBmmHStarCommitmentResponse) Reset() {
	*x = GetBmmHStarCommitmentResponse{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBmmHStarCommitmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBmmHStarCommitmentResponse) ProtoMessage() {}

func (x *GetBmmHStarCommitmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBmmHStarCommitmentResponse.ProtoReflect.Descriptor instead.
func (*GetBmmHStarCommitmentResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{9}
}

func (x *GetBmmHStarCommitmentResponse) GetResult() isGetBmmHStarCommitmentResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetBmmHStarCommitmentResponse) GetBlockNotFound() *GetBmmHStarCommitmentResponse_BlockNotFoundError {
	if x != nil {
		if x, ok := x.Result.(*GetBmmHStarCommitmentResponse_BlockNotFound); ok {
			return x.BlockNotFound
		}
	}
	return nil
}

func (x *GetBmmHStarCommitmentResponse) GetCommitment() *GetBmmHStarCommitmentResponse_Commitment {
	if x != nil {
		if x, ok := x.Result.(*GetBmmHStarCommitmentResponse_Commitment_); ok {
			return x.Commitment
		}
	}
	return nil
}

type isGetBmmHStarCommitmentResponse_Result interface {
	isGetBmmHStarCommitmentResponse_Result()
}

type GetBmmHStarCommitmentResponse_BlockNotFound struct {
	BlockNotFound *GetBmmHStarCommitmentResponse_BlockNotFoundError `protobuf:"bytes,1,opt,name=block_not_found,json=blockNotFound,proto3,oneof"`
}

type GetBmmHStarCommitmentResponse_Commitment_ struct {
	Commitment *GetBmmHStarCommitmentResponse_Commitment `protobuf:"bytes,2,opt,name=commitment,proto3,oneof"`
}

func (*GetBmmHStarCommitmentResponse_BlockNotFound) isGetBmmHStarCommitmentResponse_Result() {}

func (*GetBmmHStarCommitmentResponse_Commitment_) isGetBmmHStarCommitmentResponse_Result() {}

type GetChainInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChainInfoRequest) Reset() {
	*x = GetChainInfoRequest{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChainInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainInfoRequest) ProtoMessage() {}

func (x *GetChainInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainInfoRequest.ProtoReflect.Descriptor instead.
func (*GetChainInfoRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{10}
}

type GetChainInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       Network                `protobuf:"varint,1,opt,name=network,proto3,enum=cusf.mainchain.v1.Network" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChainInfoResponse) Reset() {
	*x = GetChainInfoResponse{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChainInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainInfoResponse) ProtoMessage() {}

func (x *GetChainInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainInfoResponse.ProtoReflect.Descriptor instead.
func (*GetChainInfoResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{11}
}

func (x *GetChainInfoResponse) GetNetwork() Network {
	if x != nil {
		return x.Network
	}
	return Network_NETWORK_UNSPECIFIED
}

type GetChainTipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChainTipRequest) Reset() {
	*x = GetChainTipRequest{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChainTipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainTipRequest) ProtoMessage() {}

func (x *GetChainTipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainTipRequest.ProtoReflect.Descriptor instead.
func (*GetChainTipRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{12}
}

type GetChainTipResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BlockHeaderInfo *BlockHeaderInfo       `protobuf:"bytes,1,opt,name=block_header_info,json=blockHeaderInfo,proto3" json:"block_header_info,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetChainTipResponse) Reset() {
	*x = GetChainTipResponse{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChainTipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainTipResponse) ProtoMessage() {}

func (x *GetChainTipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainTipResponse.ProtoReflect.Descriptor instead.
func (*GetChainTipResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{13}
}

func (x *GetChainTipResponse) GetBlockHeaderInfo() *BlockHeaderInfo {
	if x != nil {
		return x.BlockHeaderInfo
	}
	return nil
}

type GetCoinbasePSBTRequest struct {
	state             protoimpl.MessageState                     `protogen:"open.v1"`
	ProposeSidechains []*GetCoinbasePSBTRequest_ProposeSidechain `protobuf:"bytes,1,rep,name=propose_sidechains,json=proposeSidechains,proto3" json:"propose_sidechains,omitempty"`
	AckSidechains     []*GetCoinbasePSBTRequest_AckSidechain     `protobuf:"bytes,2,rep,name=ack_sidechains,json=ackSidechains,proto3" json:"ack_sidechains,omitempty"`
	ProposeBundles    []*GetCoinbasePSBTRequest_ProposeBundle    `protobuf:"bytes,3,rep,name=propose_bundles,json=proposeBundles,proto3" json:"propose_bundles,omitempty"`
	AckBundles        *GetCoinbasePSBTRequest_AckBundles         `protobuf:"bytes,4,opt,name=ack_bundles,json=ackBundles,proto3" json:"ack_bundles,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetCoinbasePSBTRequest) Reset() {
	*x = GetCoinbasePSBTRequest{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinbasePSBTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinbasePSBTRequest) ProtoMessage() {}

func (x *GetCoinbasePSBTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinbasePSBTRequest.ProtoReflect.Descriptor instead.
func (*GetCoinbasePSBTRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{14}
}

func (x *GetCoinbasePSBTRequest) GetProposeSidechains() []*GetCoinbasePSBTRequest_ProposeSidechain {
	if x != nil {
		return x.ProposeSidechains
	}
	return nil
}

func (x *GetCoinbasePSBTRequest) GetAckSidechains() []*GetCoinbasePSBTRequest_AckSidechain {
	if x != nil {
		return x.AckSidechains
	}
	return nil
}

func (x *GetCoinbasePSBTRequest) GetProposeBundles() []*GetCoinbasePSBTRequest_ProposeBundle {
	if x != nil {
		return x.ProposeBundles
	}
	return nil
}

func (x *GetCoinbasePSBTRequest) GetAckBundles() *GetCoinbasePSBTRequest_AckBundles {
	if x != nil {
		return x.AckBundles
	}
	return nil
}

type GetCoinbasePSBTResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Psbt          *v1.ConsensusHex       `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoinbasePSBTResponse) Reset() {
	*x = GetCoinbasePSBTResponse{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinbasePSBTResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinbasePSBTResponse) ProtoMessage() {}

func (x *GetCoinbasePSBTResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinbasePSBTResponse.ProtoReflect.Descriptor instead.
func (*GetCoinbasePSBTResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{15}
}

func (x *GetCoinbasePSBTResponse) GetPsbt() *v1.ConsensusHex {
	if x != nil {
		return x.Psbt
	}
	return nil
}

type GetCtipRequest struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	SidechainNumber *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_number,json=sidechainNumber,proto3" json:"sidechain_number,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetCtipRequest) Reset() {
	*x = GetCtipRequest{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCtipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCtipRequest) ProtoMessage() {}

func (x *GetCtipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCtipRequest.ProtoReflect.Descriptor instead.
func (*GetCtipRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{16}
}

func (x *GetCtipRequest) GetSidechainNumber() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainNumber
	}
	return nil
}

type GetCtipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ctip          *GetCtipResponse_Ctip  `protobuf:"bytes,1,opt,name=ctip,proto3,oneof" json:"ctip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCtipResponse) Reset() {
	*x = GetCtipResponse{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCtipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCtipResponse) ProtoMessage() {}

func (x *GetCtipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCtipResponse.ProtoReflect.Descriptor instead.
func (*GetCtipResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{17}
}

func (x *GetCtipResponse) GetCtip() *GetCtipResponse_Ctip {
	if x != nil {
		return x.Ctip
	}
	return nil
}

type GetSidechainProposalsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSidechainProposalsRequest) Reset() {
	*x = GetSidechainProposalsRequest{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSidechainProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSidechainProposalsRequest) ProtoMessage() {}

func (x *GetSidechainProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSidechainProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetSidechainProposalsRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{18}
}

type GetSidechainProposalsResponse struct {
	state              protoimpl.MessageState                             `protogen:"open.v1"`
	SidechainProposals []*GetSidechainProposalsResponse_SidechainProposal `protobuf:"bytes,1,rep,name=sidechain_proposals,json=sidechainProposals,proto3" json:"sidechain_proposals,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetSidechainProposalsResponse) Reset() {
	*x = GetSidechainProposalsResponse{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSidechainProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSidechainProposalsResponse) ProtoMessage() {}

func (x *GetSidechainProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSidechainProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetSidechainProposalsResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{19}
}

func (x *GetSidechainProposalsResponse) GetSidechainProposals() []*GetSidechainProposalsResponse_SidechainProposal {
	if x != nil {
		return x.SidechainProposals
	}
	return nil
}

type GetSidechainsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSidechainsRequest) Reset() {
	*x = GetSidechainsRequest{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSidechainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSidechainsRequest) ProtoMessage() {}

func (x *GetSidechainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSidechainsRequest.ProtoReflect.Descriptor instead.
func (*GetSidechainsRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{20}
}

type GetSidechainsResponse struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Sidechains    []*GetSidechainsResponse_SidechainInfo `protobuf:"bytes,1,rep,name=sidechains,proto3" json:"sidechains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSidechainsResponse) Reset() {
	*x = GetSidechainsResponse{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSidechainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSidechainsResponse) ProtoMessage() {}

func (x *GetSidechainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSidechainsResponse.ProtoReflect.Descriptor instead.
func (*GetSidechainsResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{21}
}

func (x *GetSidechainsResponse) GetSidechains() []*GetSidechainsResponse_SidechainInfo {
	if x != nil {
		return x.Sidechains
	}
	return nil
}

type GetTwoWayPegDataRequest struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	SidechainId    *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_id,json=sidechainId,proto3" json:"sidechain_id,omitempty"`
	StartBlockHash *v1.ReverseHex          `protobuf:"bytes,2,opt,name=start_block_hash,json=startBlockHash,proto3,oneof" json:"start_block_hash,omitempty"`
	EndBlockHash   *v1.ReverseHex          `protobuf:"bytes,3,opt,name=end_block_hash,json=endBlockHash,proto3" json:"end_block_hash,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetTwoWayPegDataRequest) Reset() {
	*x = GetTwoWayPegDataRequest{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTwoWayPegDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTwoWayPegDataRequest) ProtoMessage() {}

func (x *GetTwoWayPegDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTwoWayPegDataRequest.ProtoReflect.Descriptor instead.
func (*GetTwoWayPegDataRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{22}
}

func (x *GetTwoWayPegDataRequest) GetSidechainId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainId
	}
	return nil
}

func (x *GetTwoWayPegDataRequest) GetStartBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.StartBlockHash
	}
	return nil
}

func (x *GetTwoWayPegDataRequest) GetEndBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.EndBlockHash
	}
	return nil
}

type GetTwoWayPegDataResponse struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Blocks        []*GetTwoWayPegDataResponse_ResponseItem `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTwoWayPegDataResponse) Reset() {
	*x = GetTwoWayPegDataResponse{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTwoWayPegDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTwoWayPegDataResponse) ProtoMessage() {}

func (x *GetTwoWayPegDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTwoWayPegDataResponse.ProtoReflect.Descriptor instead.
func (*GetTwoWayPegDataResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{23}
}

func (x *GetTwoWayPegDataResponse) GetBlocks() []*GetTwoWayPegDataResponse_ResponseItem {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type SubscribeEventsRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SidechainId   *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_id,json=sidechainId,proto3" json:"sidechain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeEventsRequest) Reset() {
	*x = SubscribeEventsRequest{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEventsRequest) ProtoMessage() {}

func (x *SubscribeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeEventsRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{24}
}

func (x *SubscribeEventsRequest) GetSidechainId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainId
	}
	return nil
}

type SubscribeEventsResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Event         *SubscribeEventsResponse_Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeEventsResponse) Reset() {
	*x = SubscribeEventsResponse{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEventsResponse) ProtoMessage() {}

func (x *SubscribeEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEventsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeEventsResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{25}
}

func (x *SubscribeEventsResponse) GetEvent() *SubscribeEventsResponse_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type Deposit_Output struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Address       *v1.Hex                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ValueSats     *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=value_sats,json=valueSats,proto3" json:"value_sats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deposit_Output) Reset() {
	*x = Deposit_Output{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deposit_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit_Output) ProtoMessage() {}

func (x *Deposit_Output) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit_Output.ProtoReflect.Descriptor instead.
func (*Deposit_Output) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Deposit_Output) GetAddress() *v1.Hex {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Deposit_Output) GetValueSats() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ValueSats
	}
	return nil
}

type WithdrawalBundleEvent_Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*WithdrawalBundleEvent_Event_Failed_
	//	*WithdrawalBundleEvent_Event_Succeeded_
	//	*WithdrawalBundleEvent_Event_Submitted_
	Event         isWithdrawalBundleEvent_Event_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalBundleEvent_Event) Reset() {
	*x = WithdrawalBundleEvent_Event{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalBundleEvent_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalBundleEvent_Event) ProtoMessage() {}

func (x *WithdrawalBundleEvent_Event) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalBundleEvent_Event.ProtoReflect.Descriptor instead.
func (*WithdrawalBundleEvent_Event) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{2, 0}
}

func (x *WithdrawalBundleEvent_Event) GetEvent() isWithdrawalBundleEvent_Event_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *WithdrawalBundleEvent_Event) GetFailed() *WithdrawalBundleEvent_Event_Failed {
	if x != nil {
		if x, ok := x.Event.(*WithdrawalBundleEvent_Event_Failed_); ok {
			return x.Failed
		}
	}
	return nil
}

func (x *WithdrawalBundleEvent_Event) GetSucceeded() *WithdrawalBundleEvent_Event_Succeeded {
	if x != nil {
		if x, ok := x.Event.(*WithdrawalBundleEvent_Event_Succeeded_); ok {
			return x.Succeeded
		}
	}
	return nil
}

func (x *WithdrawalBundleEvent_Event) GetSubmitted() *WithdrawalBundleEvent_Event_Submitted {
	if x != nil {
		if x, ok := x.Event.(*WithdrawalBundleEvent_Event_Submitted_); ok {
			return x.Submitted
		}
	}
	return nil
}

type isWithdrawalBundleEvent_Event_Event interface {
	isWithdrawalBundleEvent_Event_Event()
}

type WithdrawalBundleEvent_Event_Failed_ struct {
	Failed *WithdrawalBundleEvent_Event_Failed `protobuf:"bytes,1,opt,name=failed,proto3,oneof"`
}

type WithdrawalBundleEvent_Event_Succeeded_ struct {
	Succeeded *WithdrawalBundleEvent_Event_Succeeded `protobuf:"bytes,2,opt,name=succeeded,proto3,oneof"`
}

type WithdrawalBundleEvent_Event_Submitted_ struct {
	Submitted *WithdrawalBundleEvent_Event_Submitted `protobuf:"bytes,3,opt,name=submitted,proto3,oneof"`
}

func (*WithdrawalBundleEvent_Event_Failed_) isWithdrawalBundleEvent_Event_Event() {}

func (*WithdrawalBundleEvent_Event_Succeeded_) isWithdrawalBundleEvent_Event_Event() {}

func (*WithdrawalBundleEvent_Event_Submitted_) isWithdrawalBundleEvent_Event_Event() {}

type WithdrawalBundleEvent_Event_Failed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalBundleEvent_Event_Failed) Reset() {
	*x = WithdrawalBundleEvent_Event_Failed{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalBundleEvent_Event_Failed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalBundleEvent_Event_Failed) ProtoMessage() {}

func (x *WithdrawalBundleEvent_Event_Failed) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalBundleEvent_Event_Failed.ProtoReflect.Descriptor instead.
func (*WithdrawalBundleEvent_Event_Failed) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{2, 0, 0}
}

type WithdrawalBundleEvent_Event_Succeeded struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	SequenceNumber *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Transaction    *v1.ConsensusHex        `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WithdrawalBundleEvent_Event_Succeeded) Reset() {
	*x = WithdrawalBundleEvent_Event_Succeeded{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalBundleEvent_Event_Succeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalBundleEvent_Event_Succeeded) ProtoMessage() {}

func (x *WithdrawalBundleEvent_Event_Succeeded) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalBundleEvent_Event_Succeeded.ProtoReflect.Descriptor instead.
func (*WithdrawalBundleEvent_Event_Succeeded) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{2, 0, 1}
}

func (x *WithdrawalBundleEvent_Event_Succeeded) GetSequenceNumber() *wrapperspb.UInt64Value {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

func (x *WithdrawalBundleEvent_Event_Succeeded) GetTransaction() *v1.ConsensusHex {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type WithdrawalBundleEvent_Event_Submitted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalBundleEvent_Event_Submitted) Reset() {
	*x = WithdrawalBundleEvent_Event_Submitted{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalBundleEvent_Event_Submitted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalBundleEvent_Event_Submitted) ProtoMessage() {}

func (x *WithdrawalBundleEvent_Event_Submitted) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalBundleEvent_Event_Submitted.ProtoReflect.Descriptor instead.
func (*WithdrawalBundleEvent_Event_Submitted) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{2, 0, 2}
}

type BlockInfo_Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*BlockInfo_Event_Deposit
	//	*BlockInfo_Event_WithdrawalBundle
	Event         isBlockInfo_Event_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockInfo_Event) Reset() {
	*x = BlockInfo_Event{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockInfo_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo_Event) ProtoMessage() {}

func (x *BlockInfo_Event) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo_Event.ProtoReflect.Descriptor instead.
func (*BlockInfo_Event) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{3, 0}
}

func (x *BlockInfo_Event) GetEvent() isBlockInfo_Event_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *BlockInfo_Event) GetDeposit() *Deposit {
	if x != nil {
		if x, ok := x.Event.(*BlockInfo_Event_Deposit); ok {
			return x.Deposit
		}
	}
	return nil
}

func (x *BlockInfo_Event) GetWithdrawalBundle() *WithdrawalBundleEvent {
	if x != nil {
		if x, ok := x.Event.(*BlockInfo_Event_WithdrawalBundle); ok {
			return x.WithdrawalBundle
		}
	}
	return nil
}

type isBlockInfo_Event_Event interface {
	isBlockInfo_Event_Event()
}

type BlockInfo_Event_Deposit struct {
	Deposit *Deposit `protobuf:"bytes,1,opt,name=deposit,proto3,oneof"`
}

type BlockInfo_Event_WithdrawalBundle struct {
	WithdrawalBundle *WithdrawalBundleEvent `protobuf:"bytes,2,opt,name=withdrawal_bundle,json=withdrawalBundle,proto3,oneof"`
}

func (*BlockInfo_Event_Deposit) isBlockInfo_Event_Event() {}

func (*BlockInfo_Event_WithdrawalBundle) isBlockInfo_Event_Event() {}

type GetBmmHStarCommitmentResponse_BlockNotFoundError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     *v1.ReverseHex         `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBmmHStarCommitmentResponse_BlockNotFoundError) Reset() {
	*x = GetBmmHStarCommitmentResponse_BlockNotFoundError{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBmmHStarCommitmentResponse_BlockNotFoundError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBmmHStarCommitmentResponse_BlockNotFoundError) ProtoMessage() {}

func (x *GetBmmHStarCommitmentResponse_BlockNotFoundError) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBmmHStarCommitmentResponse_BlockNotFoundError.ProtoReflect.Descriptor instead.
func (*GetBmmHStarCommitmentResponse_BlockNotFoundError) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetBmmHStarCommitmentResponse_BlockNotFoundError) GetBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type GetBmmHStarCommitmentResponse_Commitment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commitment    *v1.ConsensusHex       `protobuf:"bytes,1,opt,name=commitment,proto3,oneof" json:"commitment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBmmHStarCommitmentResponse_Commitment) Reset() {
	*x = GetBmmHStarCommitmentResponse_Commitment{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBmmHStarCommitmentResponse_Commitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBmmHStarCommitmentResponse_Commitment) ProtoMessage() {}

func (x *GetBmmHStarCommitmentResponse_Commitment) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBmmHStarCommitmentResponse_Commitment.ProtoReflect.Descriptor instead.
func (*GetBmmHStarCommitmentResponse_Commitment) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{9, 1}
}

func (x *GetBmmHStarCommitmentResponse_Commitment) GetCommitment() *v1.ConsensusHex {
	if x != nil {
		return x.Commitment
	}
	return nil
}

type GetCoinbasePSBTRequest_ProposeSidechain struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	SidechainNumber *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_number,json=sidechainNumber,proto3" json:"sidechain_number,omitempty"`
	Data            *v1.ConsensusHex        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetCoinbasePSBTRequest_ProposeSidechain) Reset() {
	*x = GetCoinbasePSBTRequest_ProposeSidechain{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinbasePSBTRequest_ProposeSidechain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinbasePSBTRequest_ProposeSidechain) ProtoMessage() {}

func (x *GetCoinbasePSBTRequest_ProposeSidechain) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinbasePSBTRequest_ProposeSidechain.ProtoReflect.Descriptor instead.
func (*GetCoinbasePSBTRequest_ProposeSidechain) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetCoinbasePSBTRequest_ProposeSidechain) GetSidechainNumber() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainNumber
	}
	return nil
}

func (x *GetCoinbasePSBTRequest_ProposeSidechain) GetData() *v1.ConsensusHex {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCoinbasePSBTRequest_AckSidechain struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	SidechainNumber *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_number,json=sidechainNumber,proto3" json:"sidechain_number,omitempty"`
	DataHash        *v1.ConsensusHex        `protobuf:"bytes,2,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetCoinbasePSBTRequest_AckSidechain) Reset() {
	*x = GetCoinbasePSBTRequest_AckSidechain{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinbasePSBTRequest_AckSidechain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinbasePSBTRequest_AckSidechain) ProtoMessage() {}

func (x *GetCoinbasePSBTRequest_AckSidechain) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinbasePSBTRequest_AckSidechain.ProtoReflect.Descriptor instead.
func (*GetCoinbasePSBTRequest_AckSidechain) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{14, 1}
}

func (x *GetCoinbasePSBTRequest_AckSidechain) GetSidechainNumber() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainNumber
	}
	return nil
}

func (x *GetCoinbasePSBTRequest_AckSidechain) GetDataHash() *v1.ConsensusHex {
	if x != nil {
		return x.DataHash
	}
	return nil
}

type GetCoinbasePSBTRequest_ProposeBundle struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	SidechainNumber *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_number,json=sidechainNumber,proto3" json:"sidechain_number,omitempty"`
	BundleTxid      *v1.ReverseHex          `protobuf:"bytes,2,opt,name=bundle_txid,json=bundleTxid,proto3" json:"bundle_txid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetCoinbasePSBTRequest_ProposeBundle) Reset() {
	*x = GetCoinbasePSBTRequest_ProposeBundle{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinbasePSBTRequest_ProposeBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinbasePSBTRequest_ProposeBundle) ProtoMessage() {}

func (x *GetCoinbasePSBTRequest_ProposeBundle) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinbasePSBTRequest_ProposeBundle.ProtoReflect.Descriptor instead.
func (*GetCoinbasePSBTRequest_ProposeBundle) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{14, 2}
}

func (x *GetCoinbasePSBTRequest_ProposeBundle) GetSidechainNumber() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainNumber
	}
	return nil
}

func (x *GetCoinbasePSBTRequest_ProposeBundle) GetBundleTxid() *v1.ReverseHex {
	if x != nil {
		return x.BundleTxid
	}
	return nil
}

type GetCoinbasePSBTRequest_AckBundles struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AckBundles:
	//
	//	*GetCoinbasePSBTRequest_AckBundles_RepeatPrevious_
	//	*GetCoinbasePSBTRequest_AckBundles_LeadingBy_50
	//	*GetCoinbasePSBTRequest_AckBundles_Upvotes_
	AckBundles    isGetCoinbasePSBTRequest_AckBundles_AckBundles `protobuf_oneof:"ack_bundles"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoinbasePSBTRequest_AckBundles) Reset() {
	*x = GetCoinbasePSBTRequest_AckBundles{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinbasePSBTRequest_AckBundles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinbasePSBTRequest_AckBundles) ProtoMessage() {}

func (x *GetCoinbasePSBTRequest_AckBundles) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinbasePSBTRequest_AckBundles.ProtoReflect.Descriptor instead.
func (*GetCoinbasePSBTRequest_AckBundles) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{14, 3}
}

func (x *GetCoinbasePSBTRequest_AckBundles) GetAckBundles() isGetCoinbasePSBTRequest_AckBundles_AckBundles {
	if x != nil {
		return x.AckBundles
	}
	return nil
}

func (x *GetCoinbasePSBTRequest_AckBundles) GetRepeatPrevious() *GetCoinbasePSBTRequest_AckBundles_RepeatPrevious {
	if x != nil {
		if x, ok := x.AckBundles.(*GetCoinbasePSBTRequest_AckBundles_RepeatPrevious_); ok {
			return x.RepeatPrevious
		}
	}
	return nil
}

func (x *GetCoinbasePSBTRequest_AckBundles) GetLeadingBy_50() *GetCoinbasePSBTRequest_AckBundles_LeadingBy50 {
	if x != nil {
		if x, ok := x.AckBundles.(*GetCoinbasePSBTRequest_AckBundles_LeadingBy_50); ok {
			return x.LeadingBy_50
		}
	}
	return nil
}

func (x *GetCoinbasePSBTRequest_AckBundles) GetUpvotes() *GetCoinbasePSBTRequest_AckBundles_Upvotes {
	if x != nil {
		if x, ok := x.AckBundles.(*GetCoinbasePSBTRequest_AckBundles_Upvotes_); ok {
			return x.Upvotes
		}
	}
	return nil
}

type isGetCoinbasePSBTRequest_AckBundles_AckBundles interface {
	isGetCoinbasePSBTRequest_AckBundles_AckBundles()
}

type GetCoinbasePSBTRequest_AckBundles_RepeatPrevious_ struct {
	RepeatPrevious *GetCoinbasePSBTRequest_AckBundles_RepeatPrevious `protobuf:"bytes,1,opt,name=repeat_previous,json=repeatPrevious,proto3,oneof"`
}

type GetCoinbasePSBTRequest_AckBundles_LeadingBy_50 struct {
	LeadingBy_50 *GetCoinbasePSBTRequest_AckBundles_LeadingBy50 `protobuf:"bytes,2,opt,name=leading_by_50,json=leadingBy50,proto3,oneof"`
}

type GetCoinbasePSBTRequest_AckBundles_Upvotes_ struct {
	Upvotes *GetCoinbasePSBTRequest_AckBundles_Upvotes `protobuf:"bytes,3,opt,name=upvotes,proto3,oneof"`
}

func (*GetCoinbasePSBTRequest_AckBundles_RepeatPrevious_) isGetCoinbasePSBTRequest_AckBundles_AckBundles() {
}

func (*GetCoinbasePSBTRequest_AckBundles_LeadingBy_50) isGetCoinbasePSBTRequest_AckBundles_AckBundles() {
}

func (*GetCoinbasePSBTRequest_AckBundles_Upvotes_) isGetCoinbasePSBTRequest_AckBundles_AckBundles() {}

type GetCoinbasePSBTRequest_AckBundles_RepeatPrevious struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoinbasePSBTRequest_AckBundles_RepeatPrevious) Reset() {
	*x = GetCoinbasePSBTRequest_AckBundles_RepeatPrevious{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinbasePSBTRequest_AckBundles_RepeatPrevious) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinbasePSBTRequest_AckBundles_RepeatPrevious) ProtoMessage() {}

func (x *GetCoinbasePSBTRequest_AckBundles_RepeatPrevious) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinbasePSBTRequest_AckBundles_RepeatPrevious.ProtoReflect.Descriptor instead.
func (*GetCoinbasePSBTRequest_AckBundles_RepeatPrevious) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{14, 3, 0}
}

type GetCoinbasePSBTRequest_AckBundles_LeadingBy50 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoinbasePSBTRequest_AckBundles_LeadingBy50) Reset() {
	*x = GetCoinbasePSBTRequest_AckBundles_LeadingBy50{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinbasePSBTRequest_AckBundles_LeadingBy50) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinbasePSBTRequest_AckBundles_LeadingBy50) ProtoMessage() {}

func (x *GetCoinbasePSBTRequest_AckBundles_LeadingBy50) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinbasePSBTRequest_AckBundles_LeadingBy50.ProtoReflect.Descriptor instead.
func (*GetCoinbasePSBTRequest_AckBundles_LeadingBy50) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{14, 3, 1}
}

type GetCoinbasePSBTRequest_AckBundles_Upvotes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Upvotes       []uint32               `protobuf:"varint,1,rep,packed,name=upvotes,proto3" json:"upvotes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoinbasePSBTRequest_AckBundles_Upvotes) Reset() {
	*x = GetCoinbasePSBTRequest_AckBundles_Upvotes{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinbasePSBTRequest_AckBundles_Upvotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinbasePSBTRequest_AckBundles_Upvotes) ProtoMessage() {}

func (x *GetCoinbasePSBTRequest_AckBundles_Upvotes) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinbasePSBTRequest_AckBundles_Upvotes.ProtoReflect.Descriptor instead.
func (*GetCoinbasePSBTRequest_AckBundles_Upvotes) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{14, 3, 2}
}

func (x *GetCoinbasePSBTRequest_AckBundles_Upvotes) GetUpvotes() []uint32 {
	if x != nil {
		return x.Upvotes
	}
	return nil
}

type GetCtipResponse_Ctip struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Txid           *v1.ReverseHex         `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout           uint32                 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	Value          uint64                 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	SequenceNumber uint64                 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetCtipResponse_Ctip) Reset() {
	*x = GetCtipResponse_Ctip{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCtipResponse_Ctip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCtipResponse_Ctip) ProtoMessage() {}

func (x *GetCtipResponse_Ctip) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCtipResponse_Ctip.ProtoReflect.Descriptor instead.
func (*GetCtipResponse_Ctip) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetCtipResponse_Ctip) GetTxid() *v1.ReverseHex {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *GetCtipResponse_Ctip) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *GetCtipResponse_Ctip) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GetCtipResponse_Ctip) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type GetSidechainProposalsResponse_SidechainProposal struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	SidechainNumber *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_number,json=sidechainNumber,proto3" json:"sidechain_number,omitempty"`
	// Raw sidechain proposal description
	Description *v1.ConsensusHex `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Sidechain data, as declared in the M1 proposal.
	// Might be nil, if the proposal uses an unknown version.
	Declaration            *SidechainDeclaration   `protobuf:"bytes,7,opt,name=declaration,proto3,oneof" json:"declaration,omitempty"`
	DescriptionSha256DHash *v1.ReverseHex          `protobuf:"bytes,3,opt,name=description_sha256d_hash,json=descriptionSha256dHash,proto3" json:"description_sha256d_hash,omitempty"`
	VoteCount              *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
	ProposalHeight         *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=proposal_height,json=proposalHeight,proto3" json:"proposal_height,omitempty"`
	ProposalAge            *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=proposal_age,json=proposalAge,proto3" json:"proposal_age,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetSidechainProposalsResponse_SidechainProposal) Reset() {
	*x = GetSidechainProposalsResponse_SidechainProposal{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSidechainProposalsResponse_SidechainProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSidechainProposalsResponse_SidechainProposal) ProtoMessage() {}

func (x *GetSidechainProposalsResponse_SidechainProposal) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSidechainProposalsResponse_SidechainProposal.ProtoReflect.Descriptor instead.
func (*GetSidechainProposalsResponse_SidechainProposal) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{19, 0}
}

func (x *GetSidechainProposalsResponse_SidechainProposal) GetSidechainNumber() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainNumber
	}
	return nil
}

func (x *GetSidechainProposalsResponse_SidechainProposal) GetDescription() *v1.ConsensusHex {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *GetSidechainProposalsResponse_SidechainProposal) GetDeclaration() *SidechainDeclaration {
	if x != nil {
		return x.Declaration
	}
	return nil
}

func (x *GetSidechainProposalsResponse_SidechainProposal) GetDescriptionSha256DHash() *v1.ReverseHex {
	if x != nil {
		return x.DescriptionSha256DHash
	}
	return nil
}

func (x *GetSidechainProposalsResponse_SidechainProposal) GetVoteCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.VoteCount
	}
	return nil
}

func (x *GetSidechainProposalsResponse_SidechainProposal) GetProposalHeight() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ProposalHeight
	}
	return nil
}

func (x *GetSidechainProposalsResponse_SidechainProposal) GetProposalAge() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ProposalAge
	}
	return nil
}

type GetSidechainsResponse_SidechainInfo struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	SidechainNumber  *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_number,json=sidechainNumber,proto3" json:"sidechain_number,omitempty"`
	Description      *v1.ConsensusHex        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	VoteCount        *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
	ProposalHeight   *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=proposal_height,json=proposalHeight,proto3" json:"proposal_height,omitempty"`
	ActivationHeight *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=activation_height,json=activationHeight,proto3" json:"activation_height,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetSidechainsResponse_SidechainInfo) Reset() {
	*x = GetSidechainsResponse_SidechainInfo{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSidechainsResponse_SidechainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSidechainsResponse_SidechainInfo) ProtoMessage() {}

func (x *GetSidechainsResponse_SidechainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSidechainsResponse_SidechainInfo.ProtoReflect.Descriptor instead.
func (*GetSidechainsResponse_SidechainInfo) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{21, 0}
}

func (x *GetSidechainsResponse_SidechainInfo) GetSidechainNumber() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainNumber
	}
	return nil
}

func (x *GetSidechainsResponse_SidechainInfo) GetDescription() *v1.ConsensusHex {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *GetSidechainsResponse_SidechainInfo) GetVoteCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.VoteCount
	}
	return nil
}

func (x *GetSidechainsResponse_SidechainInfo) GetProposalHeight() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ProposalHeight
	}
	return nil
}

func (x *GetSidechainsResponse_SidechainInfo) GetActivationHeight() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ActivationHeight
	}
	return nil
}

type GetTwoWayPegDataResponse_ResponseItem struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BlockHeaderInfo *BlockHeaderInfo       `protobuf:"bytes,1,opt,name=block_header_info,json=blockHeaderInfo,proto3" json:"block_header_info,omitempty"`
	BlockInfo       *BlockInfo             `protobuf:"bytes,2,opt,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTwoWayPegDataResponse_ResponseItem) Reset() {
	*x = GetTwoWayPegDataResponse_ResponseItem{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTwoWayPegDataResponse_ResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTwoWayPegDataResponse_ResponseItem) ProtoMessage() {}

func (x *GetTwoWayPegDataResponse_ResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTwoWayPegDataResponse_ResponseItem.ProtoReflect.Descriptor instead.
func (*GetTwoWayPegDataResponse_ResponseItem) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{23, 0}
}

func (x *GetTwoWayPegDataResponse_ResponseItem) GetBlockHeaderInfo() *BlockHeaderInfo {
	if x != nil {
		return x.BlockHeaderInfo
	}
	return nil
}

func (x *GetTwoWayPegDataResponse_ResponseItem) GetBlockInfo() *BlockInfo {
	if x != nil {
		return x.BlockInfo
	}
	return nil
}

type SubscribeEventsResponse_Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*SubscribeEventsResponse_Event_ConnectBlock_
	//	*SubscribeEventsResponse_Event_DisconnectBlock_
	Event         isSubscribeEventsResponse_Event_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeEventsResponse_Event) Reset() {
	*x = SubscribeEventsResponse_Event{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeEventsResponse_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEventsResponse_Event) ProtoMessage() {}

func (x *SubscribeEventsResponse_Event) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEventsResponse_Event.ProtoReflect.Descriptor instead.
func (*SubscribeEventsResponse_Event) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{25, 0}
}

func (x *SubscribeEventsResponse_Event) GetEvent() isSubscribeEventsResponse_Event_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *SubscribeEventsResponse_Event) GetConnectBlock() *SubscribeEventsResponse_Event_ConnectBlock {
	if x != nil {
		if x, ok := x.Event.(*SubscribeEventsResponse_Event_ConnectBlock_); ok {
			return x.ConnectBlock
		}
	}
	return nil
}

func (x *SubscribeEventsResponse_Event) GetDisconnectBlock() *SubscribeEventsResponse_Event_DisconnectBlock {
	if x != nil {
		if x, ok := x.Event.(*SubscribeEventsResponse_Event_DisconnectBlock_); ok {
			return x.DisconnectBlock
		}
	}
	return nil
}

type isSubscribeEventsResponse_Event_Event interface {
	isSubscribeEventsResponse_Event_Event()
}

type SubscribeEventsResponse_Event_ConnectBlock_ struct {
	ConnectBlock *SubscribeEventsResponse_Event_ConnectBlock `protobuf:"bytes,1,opt,name=connect_block,json=connectBlock,proto3,oneof"`
}

type SubscribeEventsResponse_Event_DisconnectBlock_ struct {
	DisconnectBlock *SubscribeEventsResponse_Event_DisconnectBlock `protobuf:"bytes,2,opt,name=disconnect_block,json=disconnectBlock,proto3,oneof"`
}

func (*SubscribeEventsResponse_Event_ConnectBlock_) isSubscribeEventsResponse_Event_Event() {}

func (*SubscribeEventsResponse_Event_DisconnectBlock_) isSubscribeEventsResponse_Event_Event() {}

type SubscribeEventsResponse_Event_ConnectBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeaderInfo    *BlockHeaderInfo       `protobuf:"bytes,1,opt,name=header_info,json=headerInfo,proto3" json:"header_info,omitempty"`
	BlockInfo     *BlockInfo             `protobuf:"bytes,2,opt,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeEventsResponse_Event_ConnectBlock) Reset() {
	*x = SubscribeEventsResponse_Event_ConnectBlock{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeEventsResponse_Event_ConnectBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEventsResponse_Event_ConnectBlock) ProtoMessage() {}

func (x *SubscribeEventsResponse_Event_ConnectBlock) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEventsResponse_Event_ConnectBlock.ProtoReflect.Descriptor instead.
func (*SubscribeEventsResponse_Event_ConnectBlock) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{25, 0, 0}
}

func (x *SubscribeEventsResponse_Event_ConnectBlock) GetHeaderInfo() *BlockHeaderInfo {
	if x != nil {
		return x.HeaderInfo
	}
	return nil
}

func (x *SubscribeEventsResponse_Event_ConnectBlock) GetBlockInfo() *BlockInfo {
	if x != nil {
		return x.BlockInfo
	}
	return nil
}

type SubscribeEventsResponse_Event_DisconnectBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     *v1.ReverseHex         `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeEventsResponse_Event_DisconnectBlock) Reset() {
	*x = SubscribeEventsResponse_Event_DisconnectBlock{}
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeEventsResponse_Event_DisconnectBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEventsResponse_Event_DisconnectBlock) ProtoMessage() {}

func (x *SubscribeEventsResponse_Event_DisconnectBlock) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_validator_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEventsResponse_Event_DisconnectBlock.ProtoReflect.Descriptor instead.
func (*SubscribeEventsResponse_Event_DisconnectBlock) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_validator_proto_rawDescGZIP(), []int{25, 0, 1}
}

func (x *SubscribeEventsResponse_Event_DisconnectBlock) GetBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

var File_cusf_mainchain_v1_validator_proto protoreflect.FileDescriptor

var file_cusf_mainchain_v1_validator_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x75, 0x73, 0x66, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x75, 0x73, 0x66, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x75, 0x73, 0x66, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75,
	0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75,
	0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x65, 0x78, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b,
	0x22, 0xba, 0x02, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0x74, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x78, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x61, 0x74, 0x73, 0x22, 0xd3, 0x04,
	0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x36, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x48, 0x65, 0x78, 0x52, 0x04, 0x6d, 0x36, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a,
	0xc1, 0x03, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x75, 0x73, 0x66,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x09, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x1a, 0x08,
	0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x65, 0x78,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x0a,
	0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0xc8, 0x02, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x48, 0x0a, 0x0e, 0x62, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x66,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x48, 0x65, 0x78, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6d, 0x6d, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x75,
	0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xa1, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x62, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x56,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x61, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x66,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65,
	0x78, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x0c,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x98, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x75,
	0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x42, 0x6d, 0x6d, 0x48, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xa8, 0x03, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x6d, 0x6d,
	0x48, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6d, 0x6d, 0x48, 0x53, 0x74, 0x61, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x5d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x75, 0x73,
	0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6d, 0x6d, 0x48, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x4f, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x5e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x48, 0x65, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xee, 0x09, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x50, 0x53, 0x42, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x75, 0x73, 0x66,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x53, 0x42, 0x54, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x69, 0x64, 0x65,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x50, 0x53, 0x42, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x53,
	0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0d, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x64,
	0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x50, 0x53, 0x42, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x61, 0x63, 0x6b,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x53,
	0x42, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x1a, 0x8d, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x69, 0x64, 0x65,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x65, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x92, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x65, 0x78, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x95, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65,
	0x78, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x78, 0x69, 0x64, 0x1a, 0x93, 0x03,
	0x0a, 0x0a, 0x41, 0x63, 0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x0f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x53, 0x42, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x63, 0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x0d,
	0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x5f, 0x35, 0x30, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x50, 0x53, 0x42, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x63, 0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x35, 0x30, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x35, 0x30, 0x12, 0x58, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x53, 0x42, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x63, 0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0x10,
	0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x1a, 0x0d, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x35, 0x30, 0x1a,
	0x23, 0x0a, 0x07, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x50, 0x53, 0x42, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x70, 0x73, 0x62, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x65, 0x78, 0x52, 0x04, 0x70, 0x73, 0x62, 0x74,
	0x22, 0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x74, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe8, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x74, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x04, 0x63, 0x74, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x74, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x74, 0x69, 0x70, 0x48, 0x00, 0x52, 0x04, 0x63, 0x74, 0x69, 0x70, 0x88, 0x01,
	0x01, 0x1a, 0x89, 0x01, 0x0a, 0x04, 0x43, 0x74, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x48, 0x65, 0x78, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x63, 0x74, 0x69, 0x70, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xae, 0x05, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x13, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x12, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x1a, 0x97, 0x04,
	0x0a, 0x11, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x65, 0x78, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x18,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x52, 0x16, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xd9, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x1a, 0xe7, 0x02, 0x0a, 0x0d, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x65, 0x78, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a,
	0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x76, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x49, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x50, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75,
	0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x22, 0x8a, 0x02, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x50, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x77, 0x6f, 0x57, 0x61, 0x79, 0x50, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x9b, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4e, 0x0a, 0x11, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x22, 0xaa, 0x04, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0xc6, 0x03, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x64, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x6d, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x90, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x75,
	0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x4c, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2a,
	0x8a, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x47, 0x54, 0x45, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x54, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x05, 0x32, 0x96, 0x09, 0x0a,
	0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6d, 0x6d, 0x48,
	0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f,
	0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6d, 0x6d, 0x48, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6d, 0x6d, 0x48, 0x53, 0x74, 0x61, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x75, 0x73, 0x66,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69,
	0x70, 0x12, 0x25, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x50,
	0x53, 0x42, 0x54, 0x12, 0x29, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x50, 0x53, 0x42, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x53,
	0x42, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x43, 0x74, 0x69, 0x70, 0x12, 0x21, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x74, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x74, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x2f, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x75, 0x73, 0x66,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x50, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x50, 0x65,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63,
	0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x50, 0x65, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0f, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x63,
	0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0xe4, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x75,
	0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x42,
	0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x69, 0x64, 0x65,
	0x73, 0x61, 0x69, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x69, 0x74,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x75, 0x73, 0x66, 0x2f,
	0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x61, 0x69,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x4d, 0x58, 0xaa, 0x02,
	0x11, 0x43, 0x75, 0x73, 0x66, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x11, 0x43, 0x75, 0x73, 0x66, 0x5c, 0x4d, 0x61, 0x69, 0x6e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1d, 0x43, 0x75, 0x73, 0x66, 0x5c, 0x4d, 0x61,
	0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x43, 0x75, 0x73, 0x66, 0x3a, 0x3a, 0x4d,
	0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cusf_mainchain_v1_validator_proto_rawDescOnce sync.Once
	file_cusf_mainchain_v1_validator_proto_rawDescData = file_cusf_mainchain_v1_validator_proto_rawDesc
)

func file_cusf_mainchain_v1_validator_proto_rawDescGZIP() []byte {
	file_cusf_mainchain_v1_validator_proto_rawDescOnce.Do(func() {
		file_cusf_mainchain_v1_validator_proto_rawDescData = protoimpl.X.CompressGZIP(file_cusf_mainchain_v1_validator_proto_rawDescData)
	})
	return file_cusf_mainchain_v1_validator_proto_rawDescData
}

var file_cusf_mainchain_v1_validator_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cusf_mainchain_v1_validator_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_cusf_mainchain_v1_validator_proto_goTypes = []any{
	(Network)(0),                                             // 0: cusf.mainchain.v1.Network
	(*BlockHeaderInfo)(nil),                                  // 1: cusf.mainchain.v1.BlockHeaderInfo
	(*Deposit)(nil),                                          // 2: cusf.mainchain.v1.Deposit
	(*WithdrawalBundleEvent)(nil),                            // 3: cusf.mainchain.v1.WithdrawalBundleEvent
	(*BlockInfo)(nil),                                        // 4: cusf.mainchain.v1.BlockInfo
	(*GetBlockHeaderInfoRequest)(nil),                        // 5: cusf.mainchain.v1.GetBlockHeaderInfoRequest
	(*GetBlockHeaderInfoResponse)(nil),                       // 6: cusf.mainchain.v1.GetBlockHeaderInfoResponse
	(*GetBlockInfoRequest)(nil),                              // 7: cusf.mainchain.v1.GetBlockInfoRequest
	(*GetBlockInfoResponse)(nil),                             // 8: cusf.mainchain.v1.GetBlockInfoResponse
	(*GetBmmHStarCommitmentRequest)(nil),                     // 9: cusf.mainchain.v1.GetBmmHStarCommitmentRequest
	(*GetBmmHStarCommitmentResponse)(nil),                    // 10: cusf.mainchain.v1.GetBmmHStarCommitmentResponse
	(*GetChainInfoRequest)(nil),                              // 11: cusf.mainchain.v1.GetChainInfoRequest
	(*GetChainInfoResponse)(nil),                             // 12: cusf.mainchain.v1.GetChainInfoResponse
	(*GetChainTipRequest)(nil),                               // 13: cusf.mainchain.v1.GetChainTipRequest
	(*GetChainTipResponse)(nil),                              // 14: cusf.mainchain.v1.GetChainTipResponse
	(*GetCoinbasePSBTRequest)(nil),                           // 15: cusf.mainchain.v1.GetCoinbasePSBTRequest
	(*GetCoinbasePSBTResponse)(nil),                          // 16: cusf.mainchain.v1.GetCoinbasePSBTResponse
	(*GetCtipRequest)(nil),                                   // 17: cusf.mainchain.v1.GetCtipRequest
	(*GetCtipResponse)(nil),                                  // 18: cusf.mainchain.v1.GetCtipResponse
	(*GetSidechainProposalsRequest)(nil),                     // 19: cusf.mainchain.v1.GetSidechainProposalsRequest
	(*GetSidechainProposalsResponse)(nil),                    // 20: cusf.mainchain.v1.GetSidechainProposalsResponse
	(*GetSidechainsRequest)(nil),                             // 21: cusf.mainchain.v1.GetSidechainsRequest
	(*GetSidechainsResponse)(nil),                            // 22: cusf.mainchain.v1.GetSidechainsResponse
	(*GetTwoWayPegDataRequest)(nil),                          // 23: cusf.mainchain.v1.GetTwoWayPegDataRequest
	(*GetTwoWayPegDataResponse)(nil),                         // 24: cusf.mainchain.v1.GetTwoWayPegDataResponse
	(*SubscribeEventsRequest)(nil),                           // 25: cusf.mainchain.v1.SubscribeEventsRequest
	(*SubscribeEventsResponse)(nil),                          // 26: cusf.mainchain.v1.SubscribeEventsResponse
	(*Deposit_Output)(nil),                                   // 27: cusf.mainchain.v1.Deposit.Output
	(*WithdrawalBundleEvent_Event)(nil),                      // 28: cusf.mainchain.v1.WithdrawalBundleEvent.Event
	(*WithdrawalBundleEvent_Event_Failed)(nil),               // 29: cusf.mainchain.v1.WithdrawalBundleEvent.Event.Failed
	(*WithdrawalBundleEvent_Event_Succeeded)(nil),            // 30: cusf.mainchain.v1.WithdrawalBundleEvent.Event.Succeeded
	(*WithdrawalBundleEvent_Event_Submitted)(nil),            // 31: cusf.mainchain.v1.WithdrawalBundleEvent.Event.Submitted
	(*BlockInfo_Event)(nil),                                  // 32: cusf.mainchain.v1.BlockInfo.Event
	(*GetBmmHStarCommitmentResponse_BlockNotFoundError)(nil), // 33: cusf.mainchain.v1.GetBmmHStarCommitmentResponse.BlockNotFoundError
	(*GetBmmHStarCommitmentResponse_Commitment)(nil),         // 34: cusf.mainchain.v1.GetBmmHStarCommitmentResponse.Commitment
	(*GetCoinbasePSBTRequest_ProposeSidechain)(nil),          // 35: cusf.mainchain.v1.GetCoinbasePSBTRequest.ProposeSidechain
	(*GetCoinbasePSBTRequest_AckSidechain)(nil),              // 36: cusf.mainchain.v1.GetCoinbasePSBTRequest.AckSidechain
	(*GetCoinbasePSBTRequest_ProposeBundle)(nil),             // 37: cusf.mainchain.v1.GetCoinbasePSBTRequest.ProposeBundle
	(*GetCoinbasePSBTRequest_AckBundles)(nil),                // 38: cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles
	(*GetCoinbasePSBTRequest_AckBundles_RepeatPrevious)(nil), // 39: cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.RepeatPrevious
	(*GetCoinbasePSBTRequest_AckBundles_LeadingBy50)(nil),    // 40: cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.LeadingBy50
	(*GetCoinbasePSBTRequest_AckBundles_Upvotes)(nil),        // 41: cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.Upvotes
	(*GetCtipResponse_Ctip)(nil),                             // 42: cusf.mainchain.v1.GetCtipResponse.Ctip
	(*GetSidechainProposalsResponse_SidechainProposal)(nil),  // 43: cusf.mainchain.v1.GetSidechainProposalsResponse.SidechainProposal
	(*GetSidechainsResponse_SidechainInfo)(nil),              // 44: cusf.mainchain.v1.GetSidechainsResponse.SidechainInfo
	(*GetTwoWayPegDataResponse_ResponseItem)(nil),            // 45: cusf.mainchain.v1.GetTwoWayPegDataResponse.ResponseItem
	(*SubscribeEventsResponse_Event)(nil),                    // 46: cusf.mainchain.v1.SubscribeEventsResponse.Event
	(*SubscribeEventsResponse_Event_ConnectBlock)(nil),       // 47: cusf.mainchain.v1.SubscribeEventsResponse.Event.ConnectBlock
	(*SubscribeEventsResponse_Event_DisconnectBlock)(nil),    // 48: cusf.mainchain.v1.SubscribeEventsResponse.Event.DisconnectBlock
	(*v1.ReverseHex)(nil),                                    // 49: cusf.common.v1.ReverseHex
	(*v1.ConsensusHex)(nil),                                  // 50: cusf.common.v1.ConsensusHex
	(*wrapperspb.UInt64Value)(nil),                           // 51: google.protobuf.UInt64Value
	(*OutPoint)(nil),                                         // 52: cusf.mainchain.v1.OutPoint
	(*wrapperspb.UInt32Value)(nil),                           // 53: google.protobuf.UInt32Value
	(*v1.Hex)(nil),                                           // 54: cusf.common.v1.Hex
	(*SidechainDeclaration)(nil),                             // 55: cusf.mainchain.v1.SidechainDeclaration
}
var file_cusf_mainchain_v1_validator_proto_depIdxs = []int32{
	49, // 0: cusf.mainchain.v1.BlockHeaderInfo.block_hash:type_name -> cusf.common.v1.ReverseHex
	49, // 1: cusf.mainchain.v1.BlockHeaderInfo.prev_block_hash:type_name -> cusf.common.v1.ReverseHex
	50, // 2: cusf.mainchain.v1.BlockHeaderInfo.work:type_name -> cusf.common.v1.ConsensusHex
	51, // 3: cusf.mainchain.v1.Deposit.sequence_number:type_name -> google.protobuf.UInt64Value
	52, // 4: cusf.mainchain.v1.Deposit.outpoint:type_name -> cusf.mainchain.v1.OutPoint
	27, // 5: cusf.mainchain.v1.Deposit.output:type_name -> cusf.mainchain.v1.Deposit.Output
	50, // 6: cusf.mainchain.v1.WithdrawalBundleEvent.m6id:type_name -> cusf.common.v1.ConsensusHex
	28, // 7: cusf.mainchain.v1.WithdrawalBundleEvent.event:type_name -> cusf.mainchain.v1.WithdrawalBundleEvent.Event
	50, // 8: cusf.mainchain.v1.BlockInfo.bmm_commitment:type_name -> cusf.common.v1.ConsensusHex
	32, // 9: cusf.mainchain.v1.BlockInfo.events:type_name -> cusf.mainchain.v1.BlockInfo.Event
	49, // 10: cusf.mainchain.v1.GetBlockHeaderInfoRequest.block_hash:type_name -> cusf.common.v1.ReverseHex
	1,  // 11: cusf.mainchain.v1.GetBlockHeaderInfoResponse.header_info:type_name -> cusf.mainchain.v1.BlockHeaderInfo
	49, // 12: cusf.mainchain.v1.GetBlockInfoRequest.block_hash:type_name -> cusf.common.v1.ReverseHex
	53, // 13: cusf.mainchain.v1.GetBlockInfoRequest.sidechain_id:type_name -> google.protobuf.UInt32Value
	1,  // 14: cusf.mainchain.v1.GetBlockInfoResponse.header_info:type_name -> cusf.mainchain.v1.BlockHeaderInfo
	4,  // 15: cusf.mainchain.v1.GetBlockInfoResponse.block_info:type_name -> cusf.mainchain.v1.BlockInfo
	49, // 16: cusf.mainchain.v1.GetBmmHStarCommitmentRequest.block_hash:type_name -> cusf.common.v1.ReverseHex
	53, // 17: cusf.mainchain.v1.GetBmmHStarCommitmentRequest.sidechain_id:type_name -> google.protobuf.UInt32Value
	33, // 18: cusf.mainchain.v1.GetBmmHStarCommitmentResponse.block_not_found:type_name -> cusf.mainchain.v1.GetBmmHStarCommitmentResponse.BlockNotFoundError
	34, // 19: cusf.mainchain.v1.GetBmmHStarCommitmentResponse.commitment:type_name -> cusf.mainchain.v1.GetBmmHStarCommitmentResponse.Commitment
	0,  // 20: cusf.mainchain.v1.GetChainInfoResponse.network:type_name -> cusf.mainchain.v1.Network
	1,  // 21: cusf.mainchain.v1.GetChainTipResponse.block_header_info:type_name -> cusf.mainchain.v1.BlockHeaderInfo
	35, // 22: cusf.mainchain.v1.GetCoinbasePSBTRequest.propose_sidechains:type_name -> cusf.mainchain.v1.GetCoinbasePSBTRequest.ProposeSidechain
	36, // 23: cusf.mainchain.v1.GetCoinbasePSBTRequest.ack_sidechains:type_name -> cusf.mainchain.v1.GetCoinbasePSBTRequest.AckSidechain
	37, // 24: cusf.mainchain.v1.GetCoinbasePSBTRequest.propose_bundles:type_name -> cusf.mainchain.v1.GetCoinbasePSBTRequest.ProposeBundle
	38, // 25: cusf.mainchain.v1.GetCoinbasePSBTRequest.ack_bundles:type_name -> cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles
	50, // 26: cusf.mainchain.v1.GetCoinbasePSBTResponse.psbt:type_name -> cusf.common.v1.ConsensusHex
	53, // 27: cusf.mainchain.v1.GetCtipRequest.sidechain_number:type_name -> google.protobuf.UInt32Value
	42, // 28: cusf.mainchain.v1.GetCtipResponse.ctip:type_name -> cusf.mainchain.v1.GetCtipResponse.Ctip
	43, // 29: cusf.mainchain.v1.GetSidechainProposalsResponse.sidechain_proposals:type_name -> cusf.mainchain.v1.GetSidechainProposalsResponse.SidechainProposal
	44, // 30: cusf.mainchain.v1.GetSidechainsResponse.sidechains:type_name -> cusf.mainchain.v1.GetSidechainsResponse.SidechainInfo
	53, // 31: cusf.mainchain.v1.GetTwoWayPegDataRequest.sidechain_id:type_name -> google.protobuf.UInt32Value
	49, // 32: cusf.mainchain.v1.GetTwoWayPegDataRequest.start_block_hash:type_name -> cusf.common.v1.ReverseHex
	49, // 33: cusf.mainchain.v1.GetTwoWayPegDataRequest.end_block_hash:type_name -> cusf.common.v1.ReverseHex
	45, // 34: cusf.mainchain.v1.GetTwoWayPegDataResponse.blocks:type_name -> cusf.mainchain.v1.GetTwoWayPegDataResponse.ResponseItem
	53, // 35: cusf.mainchain.v1.SubscribeEventsRequest.sidechain_id:type_name -> google.protobuf.UInt32Value
	46, // 36: cusf.mainchain.v1.SubscribeEventsResponse.event:type_name -> cusf.mainchain.v1.SubscribeEventsResponse.Event
	54, // 37: cusf.mainchain.v1.Deposit.Output.address:type_name -> cusf.common.v1.Hex
	51, // 38: cusf.mainchain.v1.Deposit.Output.value_sats:type_name -> google.protobuf.UInt64Value
	29, // 39: cusf.mainchain.v1.WithdrawalBundleEvent.Event.failed:type_name -> cusf.mainchain.v1.WithdrawalBundleEvent.Event.Failed
	30, // 40: cusf.mainchain.v1.WithdrawalBundleEvent.Event.succeeded:type_name -> cusf.mainchain.v1.WithdrawalBundleEvent.Event.Succeeded
	31, // 41: cusf.mainchain.v1.WithdrawalBundleEvent.Event.submitted:type_name -> cusf.mainchain.v1.WithdrawalBundleEvent.Event.Submitted
	51, // 42: cusf.mainchain.v1.WithdrawalBundleEvent.Event.Succeeded.sequence_number:type_name -> google.protobuf.UInt64Value
	50, // 43: cusf.mainchain.v1.WithdrawalBundleEvent.Event.Succeeded.transaction:type_name -> cusf.common.v1.ConsensusHex
	2,  // 44: cusf.mainchain.v1.BlockInfo.Event.deposit:type_name -> cusf.mainchain.v1.Deposit
	3,  // 45: cusf.mainchain.v1.BlockInfo.Event.withdrawal_bundle:type_name -> cusf.mainchain.v1.WithdrawalBundleEvent
	49, // 46: cusf.mainchain.v1.GetBmmHStarCommitmentResponse.BlockNotFoundError.block_hash:type_name -> cusf.common.v1.ReverseHex
	50, // 47: cusf.mainchain.v1.GetBmmHStarCommitmentResponse.Commitment.commitment:type_name -> cusf.common.v1.ConsensusHex
	53, // 48: cusf.mainchain.v1.GetCoinbasePSBTRequest.ProposeSidechain.sidechain_number:type_name -> google.protobuf.UInt32Value
	50, // 49: cusf.mainchain.v1.GetCoinbasePSBTRequest.ProposeSidechain.data:type_name -> cusf.common.v1.ConsensusHex
	53, // 50: cusf.mainchain.v1.GetCoinbasePSBTRequest.AckSidechain.sidechain_number:type_name -> google.protobuf.UInt32Value
	50, // 51: cusf.mainchain.v1.GetCoinbasePSBTRequest.AckSidechain.data_hash:type_name -> cusf.common.v1.ConsensusHex
	53, // 52: cusf.mainchain.v1.GetCoinbasePSBTRequest.ProposeBundle.sidechain_number:type_name -> google.protobuf.UInt32Value
	49, // 53: cusf.mainchain.v1.GetCoinbasePSBTRequest.ProposeBundle.bundle_txid:type_name -> cusf.common.v1.ReverseHex
	39, // 54: cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.repeat_previous:type_name -> cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.RepeatPrevious
	40, // 55: cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.leading_by_50:type_name -> cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.LeadingBy50
	41, // 56: cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.upvotes:type_name -> cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.Upvotes
	49, // 57: cusf.mainchain.v1.GetCtipResponse.Ctip.txid:type_name -> cusf.common.v1.ReverseHex
	53, // 58: cusf.mainchain.v1.GetSidechainProposalsResponse.SidechainProposal.sidechain_number:type_name -> google.protobuf.UInt32Value
	50, // 59: cusf.mainchain.v1.GetSidechainProposalsResponse.SidechainProposal.description:type_name -> cusf.common.v1.ConsensusHex
	55, // 60: cusf.mainchain.v1.GetSidechainProposalsResponse.SidechainProposal.declaration:type_name -> cusf.mainchain.v1.SidechainDeclaration
	49, // 61: cusf.mainchain.v1.GetSidechainProposalsResponse.SidechainProposal.description_sha256d_hash:type_name -> cusf.common.v1.ReverseHex
	53, // 62: cusf.mainchain.v1.GetSidechainProposalsResponse.SidechainProposal.vote_count:type_name -> google.protobuf.UInt32Value
	53, // 63: cusf.mainchain.v1.GetSidechainProposalsResponse.SidechainProposal.proposal_height:type_name -> google.protobuf.UInt32Value
	53, // 64: cusf.mainchain.v1.GetSidechainProposalsResponse.SidechainProposal.proposal_age:type_name -> google.protobuf.UInt32Value
	53, // 65: cusf.mainchain.v1.GetSidechainsResponse.SidechainInfo.sidechain_number:type_name -> google.protobuf.UInt32Value
	50, // 66: cusf.mainchain.v1.GetSidechainsResponse.SidechainInfo.description:type_name -> cusf.common.v1.ConsensusHex
	53, // 67: cusf.mainchain.v1.GetSidechainsResponse.SidechainInfo.vote_count:type_name -> google.protobuf.UInt32Value
	53, // 68: cusf.mainchain.v1.GetSidechainsResponse.SidechainInfo.proposal_height:type_name -> google.protobuf.UInt32Value
	53, // 69: cusf.mainchain.v1.GetSidechainsResponse.SidechainInfo.activation_height:type_name -> google.protobuf.UInt32Value
	1,  // 70: cusf.mainchain.v1.GetTwoWayPegDataResponse.ResponseItem.block_header_info:type_name -> cusf.mainchain.v1.BlockHeaderInfo
	4,  // 71: cusf.mainchain.v1.GetTwoWayPegDataResponse.ResponseItem.block_info:type_name -> cusf.mainchain.v1.BlockInfo
	47, // 72: cusf.mainchain.v1.SubscribeEventsResponse.Event.connect_block:type_name -> cusf.mainchain.v1.SubscribeEventsResponse.Event.ConnectBlock
	48, // 73: cusf.mainchain.v1.SubscribeEventsResponse.Event.disconnect_block:type_name -> cusf.mainchain.v1.SubscribeEventsResponse.Event.DisconnectBlock
	1,  // 74: cusf.mainchain.v1.SubscribeEventsResponse.Event.ConnectBlock.header_info:type_name -> cusf.mainchain.v1.BlockHeaderInfo
	4,  // 75: cusf.mainchain.v1.SubscribeEventsResponse.Event.ConnectBlock.block_info:type_name -> cusf.mainchain.v1.BlockInfo
	49, // 76: cusf.mainchain.v1.SubscribeEventsResponse.Event.DisconnectBlock.block_hash:type_name -> cusf.common.v1.ReverseHex
	5,  // 77: cusf.mainchain.v1.ValidatorService.GetBlockHeaderInfo:input_type -> cusf.mainchain.v1.GetBlockHeaderInfoRequest
	7,  // 78: cusf.mainchain.v1.ValidatorService.GetBlockInfo:input_type -> cusf.mainchain.v1.GetBlockInfoRequest
	9,  // 79: cusf.mainchain.v1.ValidatorService.GetBmmHStarCommitment:input_type -> cusf.mainchain.v1.GetBmmHStarCommitmentRequest
	11, // 80: cusf.mainchain.v1.ValidatorService.GetChainInfo:input_type -> cusf.mainchain.v1.GetChainInfoRequest
	13, // 81: cusf.mainchain.v1.ValidatorService.GetChainTip:input_type -> cusf.mainchain.v1.GetChainTipRequest
	15, // 82: cusf.mainchain.v1.ValidatorService.GetCoinbasePSBT:input_type -> cusf.mainchain.v1.GetCoinbasePSBTRequest
	17, // 83: cusf.mainchain.v1.ValidatorService.GetCtip:input_type -> cusf.mainchain.v1.GetCtipRequest
	19, // 84: cusf.mainchain.v1.ValidatorService.GetSidechainProposals:input_type -> cusf.mainchain.v1.GetSidechainProposalsRequest
	21, // 85: cusf.mainchain.v1.ValidatorService.GetSidechains:input_type -> cusf.mainchain.v1.GetSidechainsRequest
	23, // 86: cusf.mainchain.v1.ValidatorService.GetTwoWayPegData:input_type -> cusf.mainchain.v1.GetTwoWayPegDataRequest
	25, // 87: cusf.mainchain.v1.ValidatorService.SubscribeEvents:input_type -> cusf.mainchain.v1.SubscribeEventsRequest
	6,  // 88: cusf.mainchain.v1.ValidatorService.GetBlockHeaderInfo:output_type -> cusf.mainchain.v1.GetBlockHeaderInfoResponse
	8,  // 89: cusf.mainchain.v1.ValidatorService.GetBlockInfo:output_type -> cusf.mainchain.v1.GetBlockInfoResponse
	10, // 90: cusf.mainchain.v1.ValidatorService.GetBmmHStarCommitment:output_type -> cusf.mainchain.v1.GetBmmHStarCommitmentResponse
	12, // 91: cusf.mainchain.v1.ValidatorService.GetChainInfo:output_type -> cusf.mainchain.v1.GetChainInfoResponse
	14, // 92: cusf.mainchain.v1.ValidatorService.GetChainTip:output_type -> cusf.mainchain.v1.GetChainTipResponse
	16, // 93: cusf.mainchain.v1.ValidatorService.GetCoinbasePSBT:output_type -> cusf.mainchain.v1.GetCoinbasePSBTResponse
	18, // 94: cusf.mainchain.v1.ValidatorService.GetCtip:output_type -> cusf.mainchain.v1.GetCtipResponse
	20, // 95: cusf.mainchain.v1.ValidatorService.GetSidechainProposals:output_type -> cusf.mainchain.v1.GetSidechainProposalsResponse
	22, // 96: cusf.mainchain.v1.ValidatorService.GetSidechains:output_type -> cusf.mainchain.v1.GetSidechainsResponse
	24, // 97: cusf.mainchain.v1.ValidatorService.GetTwoWayPegData:output_type -> cusf.mainchain.v1.GetTwoWayPegDataResponse
	26, // 98: cusf.mainchain.v1.ValidatorService.SubscribeEvents:output_type -> cusf.mainchain.v1.SubscribeEventsResponse
	88, // [88:99] is the sub-list for method output_type
	77, // [77:88] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_cusf_mainchain_v1_validator_proto_init() }
func file_cusf_mainchain_v1_validator_proto_init() {
	if File_cusf_mainchain_v1_validator_proto != nil {
		return
	}
	file_cusf_mainchain_v1_common_proto_init()
	file_cusf_mainchain_v1_validator_proto_msgTypes[3].OneofWrappers = []any{}
	file_cusf_mainchain_v1_validator_proto_msgTypes[9].OneofWrappers = []any{
		(*GetBmmHStarCommitmentResponse_BlockNotFound)(nil),
		(*GetBmmHStarCommitmentResponse_Commitment_)(nil),
	}
	file_cusf_mainchain_v1_validator_proto_msgTypes[17].OneofWrappers = []any{}
	file_cusf_mainchain_v1_validator_proto_msgTypes[22].OneofWrappers = []any{}
	file_cusf_mainchain_v1_validator_proto_msgTypes[27].OneofWrappers = []any{
		(*WithdrawalBundleEvent_Event_Failed_)(nil),
		(*WithdrawalBundleEvent_Event_Succeeded_)(nil),
		(*WithdrawalBundleEvent_Event_Submitted_)(nil),
	}
	file_cusf_mainchain_v1_validator_proto_msgTypes[31].OneofWrappers = []any{
		(*BlockInfo_Event_Deposit)(nil),
		(*BlockInfo_Event_WithdrawalBundle)(nil),
	}
	file_cusf_mainchain_v1_validator_proto_msgTypes[33].OneofWrappers = []any{}
	file_cusf_mainchain_v1_validator_proto_msgTypes[37].OneofWrappers = []any{
		(*GetCoinbasePSBTRequest_AckBundles_RepeatPrevious_)(nil),
		(*GetCoinbasePSBTRequest_AckBundles_LeadingBy_50)(nil),
		(*GetCoinbasePSBTRequest_AckBundles_Upvotes_)(nil),
	}
	file_cusf_mainchain_v1_validator_proto_msgTypes[42].OneofWrappers = []any{}
	file_cusf_mainchain_v1_validator_proto_msgTypes[45].OneofWrappers = []any{
		(*SubscribeEventsResponse_Event_ConnectBlock_)(nil),
		(*SubscribeEventsResponse_Event_DisconnectBlock_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cusf_mainchain_v1_validator_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cusf_mainchain_v1_validator_proto_goTypes,
		DependencyIndexes: file_cusf_mainchain_v1_validator_proto_depIdxs,
		EnumInfos:         file_cusf_mainchain_v1_validator_proto_enumTypes,
		MessageInfos:      file_cusf_mainchain_v1_validator_proto_msgTypes,
	}.Build()
	File_cusf_mainchain_v1_validator_proto = out.File
	file_cusf_mainchain_v1_validator_proto_rawDesc = nil
	file_cusf_mainchain_v1_validator_proto_goTypes = nil
	file_cusf_mainchain_v1_validator_proto_depIdxs = nil
}
