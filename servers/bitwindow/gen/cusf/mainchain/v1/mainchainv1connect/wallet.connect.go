// CUSF mainchain wallet service

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cusf/mainchain/v1/wallet.proto

package mainchainv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/servers/bitwindow/gen/cusf/mainchain/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WalletServiceName is the fully-qualified name of the WalletService service.
	WalletServiceName = "cusf.mainchain.v1.WalletService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WalletServiceBroadcastWithdrawalBundleProcedure is the fully-qualified name of the
	// WalletService's BroadcastWithdrawalBundle RPC.
	WalletServiceBroadcastWithdrawalBundleProcedure = "/cusf.mainchain.v1.WalletService/BroadcastWithdrawalBundle"
	// WalletServiceCreateBmmCriticalDataTransactionProcedure is the fully-qualified name of the
	// WalletService's CreateBmmCriticalDataTransaction RPC.
	WalletServiceCreateBmmCriticalDataTransactionProcedure = "/cusf.mainchain.v1.WalletService/CreateBmmCriticalDataTransaction"
	// WalletServiceCreateDepositTransactionProcedure is the fully-qualified name of the WalletService's
	// CreateDepositTransaction RPC.
	WalletServiceCreateDepositTransactionProcedure = "/cusf.mainchain.v1.WalletService/CreateDepositTransaction"
	// WalletServiceCreateNewAddressProcedure is the fully-qualified name of the WalletService's
	// CreateNewAddress RPC.
	WalletServiceCreateNewAddressProcedure = "/cusf.mainchain.v1.WalletService/CreateNewAddress"
	// WalletServiceCreateSidechainProposalProcedure is the fully-qualified name of the WalletService's
	// CreateSidechainProposal RPC.
	WalletServiceCreateSidechainProposalProcedure = "/cusf.mainchain.v1.WalletService/CreateSidechainProposal"
	// WalletServiceGetBalanceProcedure is the fully-qualified name of the WalletService's GetBalance
	// RPC.
	WalletServiceGetBalanceProcedure = "/cusf.mainchain.v1.WalletService/GetBalance"
	// WalletServiceListTransactionsProcedure is the fully-qualified name of the WalletService's
	// ListTransactions RPC.
	WalletServiceListTransactionsProcedure = "/cusf.mainchain.v1.WalletService/ListTransactions"
	// WalletServiceSendTransactionProcedure is the fully-qualified name of the WalletService's
	// SendTransaction RPC.
	WalletServiceSendTransactionProcedure = "/cusf.mainchain.v1.WalletService/SendTransaction"
	// WalletServiceGenerateBlocksProcedure is the fully-qualified name of the WalletService's
	// GenerateBlocks RPC.
	WalletServiceGenerateBlocksProcedure = "/cusf.mainchain.v1.WalletService/GenerateBlocks"
	// WalletServiceUnlockWalletProcedure is the fully-qualified name of the WalletService's
	// UnlockWallet RPC.
	WalletServiceUnlockWalletProcedure = "/cusf.mainchain.v1.WalletService/UnlockWallet"
	// WalletServiceCreateWalletProcedure is the fully-qualified name of the WalletService's
	// CreateWallet RPC.
	WalletServiceCreateWalletProcedure = "/cusf.mainchain.v1.WalletService/CreateWallet"
)

// WalletServiceClient is a client for the cusf.mainchain.v1.WalletService service.
type WalletServiceClient interface {
	BroadcastWithdrawalBundle(context.Context, *connect.Request[v1.BroadcastWithdrawalBundleRequest]) (*connect.Response[v1.BroadcastWithdrawalBundleResponse], error)
	CreateBmmCriticalDataTransaction(context.Context, *connect.Request[v1.CreateBmmCriticalDataTransactionRequest]) (*connect.Response[v1.CreateBmmCriticalDataTransactionResponse], error)
	CreateDepositTransaction(context.Context, *connect.Request[v1.CreateDepositTransactionRequest]) (*connect.Response[v1.CreateDepositTransactionResponse], error)
	CreateNewAddress(context.Context, *connect.Request[v1.CreateNewAddressRequest]) (*connect.Response[v1.CreateNewAddressResponse], error)
	// Create a new sidechain proposal (M1 in BIP300) and persist to the local
	// database for further processing.
	// Sidechain proposals must be included in the coinbase transaction of a
	// newly mined block, so this proposal is not active until the wallet has
	// been able to generate a new block.
	// Returns a stream of (non-)confirmation events for the sidechain proposal.
	CreateSidechainProposal(context.Context, *connect.Request[v1.CreateSidechainProposalRequest]) (*connect.ServerStreamForClient[v1.CreateSidechainProposalResponse], error)
	GetBalance(context.Context, *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error)
	ListTransactions(context.Context, *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error)
	SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error)
	// Regtest only
	GenerateBlocks(context.Context, *connect.Request[v1.GenerateBlocksRequest]) (*connect.ServerStreamForClient[v1.GenerateBlocksResponse], error)
	UnlockWallet(context.Context, *connect.Request[v1.UnlockWalletRequest]) (*connect.Response[v1.UnlockWalletResponse], error)
	CreateWallet(context.Context, *connect.Request[v1.CreateWalletRequest]) (*connect.Response[v1.CreateWalletResponse], error)
}

// NewWalletServiceClient constructs a client for the cusf.mainchain.v1.WalletService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWalletServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WalletServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	walletServiceMethods := v1.File_cusf_mainchain_v1_wallet_proto.Services().ByName("WalletService").Methods()
	return &walletServiceClient{
		broadcastWithdrawalBundle: connect.NewClient[v1.BroadcastWithdrawalBundleRequest, v1.BroadcastWithdrawalBundleResponse](
			httpClient,
			baseURL+WalletServiceBroadcastWithdrawalBundleProcedure,
			connect.WithSchema(walletServiceMethods.ByName("BroadcastWithdrawalBundle")),
			connect.WithClientOptions(opts...),
		),
		createBmmCriticalDataTransaction: connect.NewClient[v1.CreateBmmCriticalDataTransactionRequest, v1.CreateBmmCriticalDataTransactionResponse](
			httpClient,
			baseURL+WalletServiceCreateBmmCriticalDataTransactionProcedure,
			connect.WithSchema(walletServiceMethods.ByName("CreateBmmCriticalDataTransaction")),
			connect.WithClientOptions(opts...),
		),
		createDepositTransaction: connect.NewClient[v1.CreateDepositTransactionRequest, v1.CreateDepositTransactionResponse](
			httpClient,
			baseURL+WalletServiceCreateDepositTransactionProcedure,
			connect.WithSchema(walletServiceMethods.ByName("CreateDepositTransaction")),
			connect.WithClientOptions(opts...),
		),
		createNewAddress: connect.NewClient[v1.CreateNewAddressRequest, v1.CreateNewAddressResponse](
			httpClient,
			baseURL+WalletServiceCreateNewAddressProcedure,
			connect.WithSchema(walletServiceMethods.ByName("CreateNewAddress")),
			connect.WithClientOptions(opts...),
		),
		createSidechainProposal: connect.NewClient[v1.CreateSidechainProposalRequest, v1.CreateSidechainProposalResponse](
			httpClient,
			baseURL+WalletServiceCreateSidechainProposalProcedure,
			connect.WithSchema(walletServiceMethods.ByName("CreateSidechainProposal")),
			connect.WithClientOptions(opts...),
		),
		getBalance: connect.NewClient[v1.GetBalanceRequest, v1.GetBalanceResponse](
			httpClient,
			baseURL+WalletServiceGetBalanceProcedure,
			connect.WithSchema(walletServiceMethods.ByName("GetBalance")),
			connect.WithClientOptions(opts...),
		),
		listTransactions: connect.NewClient[v1.ListTransactionsRequest, v1.ListTransactionsResponse](
			httpClient,
			baseURL+WalletServiceListTransactionsProcedure,
			connect.WithSchema(walletServiceMethods.ByName("ListTransactions")),
			connect.WithClientOptions(opts...),
		),
		sendTransaction: connect.NewClient[v1.SendTransactionRequest, v1.SendTransactionResponse](
			httpClient,
			baseURL+WalletServiceSendTransactionProcedure,
			connect.WithSchema(walletServiceMethods.ByName("SendTransaction")),
			connect.WithClientOptions(opts...),
		),
		generateBlocks: connect.NewClient[v1.GenerateBlocksRequest, v1.GenerateBlocksResponse](
			httpClient,
			baseURL+WalletServiceGenerateBlocksProcedure,
			connect.WithSchema(walletServiceMethods.ByName("GenerateBlocks")),
			connect.WithClientOptions(opts...),
		),
		unlockWallet: connect.NewClient[v1.UnlockWalletRequest, v1.UnlockWalletResponse](
			httpClient,
			baseURL+WalletServiceUnlockWalletProcedure,
			connect.WithSchema(walletServiceMethods.ByName("UnlockWallet")),
			connect.WithClientOptions(opts...),
		),
		createWallet: connect.NewClient[v1.CreateWalletRequest, v1.CreateWalletResponse](
			httpClient,
			baseURL+WalletServiceCreateWalletProcedure,
			connect.WithSchema(walletServiceMethods.ByName("CreateWallet")),
			connect.WithClientOptions(opts...),
		),
	}
}

// walletServiceClient implements WalletServiceClient.
type walletServiceClient struct {
	broadcastWithdrawalBundle        *connect.Client[v1.BroadcastWithdrawalBundleRequest, v1.BroadcastWithdrawalBundleResponse]
	createBmmCriticalDataTransaction *connect.Client[v1.CreateBmmCriticalDataTransactionRequest, v1.CreateBmmCriticalDataTransactionResponse]
	createDepositTransaction         *connect.Client[v1.CreateDepositTransactionRequest, v1.CreateDepositTransactionResponse]
	createNewAddress                 *connect.Client[v1.CreateNewAddressRequest, v1.CreateNewAddressResponse]
	createSidechainProposal          *connect.Client[v1.CreateSidechainProposalRequest, v1.CreateSidechainProposalResponse]
	getBalance                       *connect.Client[v1.GetBalanceRequest, v1.GetBalanceResponse]
	listTransactions                 *connect.Client[v1.ListTransactionsRequest, v1.ListTransactionsResponse]
	sendTransaction                  *connect.Client[v1.SendTransactionRequest, v1.SendTransactionResponse]
	generateBlocks                   *connect.Client[v1.GenerateBlocksRequest, v1.GenerateBlocksResponse]
	unlockWallet                     *connect.Client[v1.UnlockWalletRequest, v1.UnlockWalletResponse]
	createWallet                     *connect.Client[v1.CreateWalletRequest, v1.CreateWalletResponse]
}

// BroadcastWithdrawalBundle calls cusf.mainchain.v1.WalletService.BroadcastWithdrawalBundle.
func (c *walletServiceClient) BroadcastWithdrawalBundle(ctx context.Context, req *connect.Request[v1.BroadcastWithdrawalBundleRequest]) (*connect.Response[v1.BroadcastWithdrawalBundleResponse], error) {
	return c.broadcastWithdrawalBundle.CallUnary(ctx, req)
}

// CreateBmmCriticalDataTransaction calls
// cusf.mainchain.v1.WalletService.CreateBmmCriticalDataTransaction.
func (c *walletServiceClient) CreateBmmCriticalDataTransaction(ctx context.Context, req *connect.Request[v1.CreateBmmCriticalDataTransactionRequest]) (*connect.Response[v1.CreateBmmCriticalDataTransactionResponse], error) {
	return c.createBmmCriticalDataTransaction.CallUnary(ctx, req)
}

// CreateDepositTransaction calls cusf.mainchain.v1.WalletService.CreateDepositTransaction.
func (c *walletServiceClient) CreateDepositTransaction(ctx context.Context, req *connect.Request[v1.CreateDepositTransactionRequest]) (*connect.Response[v1.CreateDepositTransactionResponse], error) {
	return c.createDepositTransaction.CallUnary(ctx, req)
}

// CreateNewAddress calls cusf.mainchain.v1.WalletService.CreateNewAddress.
func (c *walletServiceClient) CreateNewAddress(ctx context.Context, req *connect.Request[v1.CreateNewAddressRequest]) (*connect.Response[v1.CreateNewAddressResponse], error) {
	return c.createNewAddress.CallUnary(ctx, req)
}

// CreateSidechainProposal calls cusf.mainchain.v1.WalletService.CreateSidechainProposal.
func (c *walletServiceClient) CreateSidechainProposal(ctx context.Context, req *connect.Request[v1.CreateSidechainProposalRequest]) (*connect.ServerStreamForClient[v1.CreateSidechainProposalResponse], error) {
	return c.createSidechainProposal.CallServerStream(ctx, req)
}

// GetBalance calls cusf.mainchain.v1.WalletService.GetBalance.
func (c *walletServiceClient) GetBalance(ctx context.Context, req *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error) {
	return c.getBalance.CallUnary(ctx, req)
}

// ListTransactions calls cusf.mainchain.v1.WalletService.ListTransactions.
func (c *walletServiceClient) ListTransactions(ctx context.Context, req *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// SendTransaction calls cusf.mainchain.v1.WalletService.SendTransaction.
func (c *walletServiceClient) SendTransaction(ctx context.Context, req *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error) {
	return c.sendTransaction.CallUnary(ctx, req)
}

// GenerateBlocks calls cusf.mainchain.v1.WalletService.GenerateBlocks.
func (c *walletServiceClient) GenerateBlocks(ctx context.Context, req *connect.Request[v1.GenerateBlocksRequest]) (*connect.ServerStreamForClient[v1.GenerateBlocksResponse], error) {
	return c.generateBlocks.CallServerStream(ctx, req)
}

// UnlockWallet calls cusf.mainchain.v1.WalletService.UnlockWallet.
func (c *walletServiceClient) UnlockWallet(ctx context.Context, req *connect.Request[v1.UnlockWalletRequest]) (*connect.Response[v1.UnlockWalletResponse], error) {
	return c.unlockWallet.CallUnary(ctx, req)
}

// CreateWallet calls cusf.mainchain.v1.WalletService.CreateWallet.
func (c *walletServiceClient) CreateWallet(ctx context.Context, req *connect.Request[v1.CreateWalletRequest]) (*connect.Response[v1.CreateWalletResponse], error) {
	return c.createWallet.CallUnary(ctx, req)
}

// WalletServiceHandler is an implementation of the cusf.mainchain.v1.WalletService service.
type WalletServiceHandler interface {
	BroadcastWithdrawalBundle(context.Context, *connect.Request[v1.BroadcastWithdrawalBundleRequest]) (*connect.Response[v1.BroadcastWithdrawalBundleResponse], error)
	CreateBmmCriticalDataTransaction(context.Context, *connect.Request[v1.CreateBmmCriticalDataTransactionRequest]) (*connect.Response[v1.CreateBmmCriticalDataTransactionResponse], error)
	CreateDepositTransaction(context.Context, *connect.Request[v1.CreateDepositTransactionRequest]) (*connect.Response[v1.CreateDepositTransactionResponse], error)
	CreateNewAddress(context.Context, *connect.Request[v1.CreateNewAddressRequest]) (*connect.Response[v1.CreateNewAddressResponse], error)
	// Create a new sidechain proposal (M1 in BIP300) and persist to the local
	// database for further processing.
	// Sidechain proposals must be included in the coinbase transaction of a
	// newly mined block, so this proposal is not active until the wallet has
	// been able to generate a new block.
	// Returns a stream of (non-)confirmation events for the sidechain proposal.
	CreateSidechainProposal(context.Context, *connect.Request[v1.CreateSidechainProposalRequest], *connect.ServerStream[v1.CreateSidechainProposalResponse]) error
	GetBalance(context.Context, *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error)
	ListTransactions(context.Context, *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error)
	SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error)
	// Regtest only
	GenerateBlocks(context.Context, *connect.Request[v1.GenerateBlocksRequest], *connect.ServerStream[v1.GenerateBlocksResponse]) error
	UnlockWallet(context.Context, *connect.Request[v1.UnlockWalletRequest]) (*connect.Response[v1.UnlockWalletResponse], error)
	CreateWallet(context.Context, *connect.Request[v1.CreateWalletRequest]) (*connect.Response[v1.CreateWalletResponse], error)
}

// NewWalletServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWalletServiceHandler(svc WalletServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	walletServiceMethods := v1.File_cusf_mainchain_v1_wallet_proto.Services().ByName("WalletService").Methods()
	walletServiceBroadcastWithdrawalBundleHandler := connect.NewUnaryHandler(
		WalletServiceBroadcastWithdrawalBundleProcedure,
		svc.BroadcastWithdrawalBundle,
		connect.WithSchema(walletServiceMethods.ByName("BroadcastWithdrawalBundle")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreateBmmCriticalDataTransactionHandler := connect.NewUnaryHandler(
		WalletServiceCreateBmmCriticalDataTransactionProcedure,
		svc.CreateBmmCriticalDataTransaction,
		connect.WithSchema(walletServiceMethods.ByName("CreateBmmCriticalDataTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreateDepositTransactionHandler := connect.NewUnaryHandler(
		WalletServiceCreateDepositTransactionProcedure,
		svc.CreateDepositTransaction,
		connect.WithSchema(walletServiceMethods.ByName("CreateDepositTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreateNewAddressHandler := connect.NewUnaryHandler(
		WalletServiceCreateNewAddressProcedure,
		svc.CreateNewAddress,
		connect.WithSchema(walletServiceMethods.ByName("CreateNewAddress")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreateSidechainProposalHandler := connect.NewServerStreamHandler(
		WalletServiceCreateSidechainProposalProcedure,
		svc.CreateSidechainProposal,
		connect.WithSchema(walletServiceMethods.ByName("CreateSidechainProposal")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetBalanceHandler := connect.NewUnaryHandler(
		WalletServiceGetBalanceProcedure,
		svc.GetBalance,
		connect.WithSchema(walletServiceMethods.ByName("GetBalance")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceListTransactionsHandler := connect.NewUnaryHandler(
		WalletServiceListTransactionsProcedure,
		svc.ListTransactions,
		connect.WithSchema(walletServiceMethods.ByName("ListTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceSendTransactionHandler := connect.NewUnaryHandler(
		WalletServiceSendTransactionProcedure,
		svc.SendTransaction,
		connect.WithSchema(walletServiceMethods.ByName("SendTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGenerateBlocksHandler := connect.NewServerStreamHandler(
		WalletServiceGenerateBlocksProcedure,
		svc.GenerateBlocks,
		connect.WithSchema(walletServiceMethods.ByName("GenerateBlocks")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceUnlockWalletHandler := connect.NewUnaryHandler(
		WalletServiceUnlockWalletProcedure,
		svc.UnlockWallet,
		connect.WithSchema(walletServiceMethods.ByName("UnlockWallet")),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreateWalletHandler := connect.NewUnaryHandler(
		WalletServiceCreateWalletProcedure,
		svc.CreateWallet,
		connect.WithSchema(walletServiceMethods.ByName("CreateWallet")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cusf.mainchain.v1.WalletService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WalletServiceBroadcastWithdrawalBundleProcedure:
			walletServiceBroadcastWithdrawalBundleHandler.ServeHTTP(w, r)
		case WalletServiceCreateBmmCriticalDataTransactionProcedure:
			walletServiceCreateBmmCriticalDataTransactionHandler.ServeHTTP(w, r)
		case WalletServiceCreateDepositTransactionProcedure:
			walletServiceCreateDepositTransactionHandler.ServeHTTP(w, r)
		case WalletServiceCreateNewAddressProcedure:
			walletServiceCreateNewAddressHandler.ServeHTTP(w, r)
		case WalletServiceCreateSidechainProposalProcedure:
			walletServiceCreateSidechainProposalHandler.ServeHTTP(w, r)
		case WalletServiceGetBalanceProcedure:
			walletServiceGetBalanceHandler.ServeHTTP(w, r)
		case WalletServiceListTransactionsProcedure:
			walletServiceListTransactionsHandler.ServeHTTP(w, r)
		case WalletServiceSendTransactionProcedure:
			walletServiceSendTransactionHandler.ServeHTTP(w, r)
		case WalletServiceGenerateBlocksProcedure:
			walletServiceGenerateBlocksHandler.ServeHTTP(w, r)
		case WalletServiceUnlockWalletProcedure:
			walletServiceUnlockWalletHandler.ServeHTTP(w, r)
		case WalletServiceCreateWalletProcedure:
			walletServiceCreateWalletHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWalletServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWalletServiceHandler struct{}

func (UnimplementedWalletServiceHandler) BroadcastWithdrawalBundle(context.Context, *connect.Request[v1.BroadcastWithdrawalBundleRequest]) (*connect.Response[v1.BroadcastWithdrawalBundleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.WalletService.BroadcastWithdrawalBundle is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateBmmCriticalDataTransaction(context.Context, *connect.Request[v1.CreateBmmCriticalDataTransactionRequest]) (*connect.Response[v1.CreateBmmCriticalDataTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.WalletService.CreateBmmCriticalDataTransaction is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateDepositTransaction(context.Context, *connect.Request[v1.CreateDepositTransactionRequest]) (*connect.Response[v1.CreateDepositTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.WalletService.CreateDepositTransaction is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateNewAddress(context.Context, *connect.Request[v1.CreateNewAddressRequest]) (*connect.Response[v1.CreateNewAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.WalletService.CreateNewAddress is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateSidechainProposal(context.Context, *connect.Request[v1.CreateSidechainProposalRequest], *connect.ServerStream[v1.CreateSidechainProposalResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.WalletService.CreateSidechainProposal is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetBalance(context.Context, *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.WalletService.GetBalance is not implemented"))
}

func (UnimplementedWalletServiceHandler) ListTransactions(context.Context, *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.WalletService.ListTransactions is not implemented"))
}

func (UnimplementedWalletServiceHandler) SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.WalletService.SendTransaction is not implemented"))
}

func (UnimplementedWalletServiceHandler) GenerateBlocks(context.Context, *connect.Request[v1.GenerateBlocksRequest], *connect.ServerStream[v1.GenerateBlocksResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.WalletService.GenerateBlocks is not implemented"))
}

func (UnimplementedWalletServiceHandler) UnlockWallet(context.Context, *connect.Request[v1.UnlockWalletRequest]) (*connect.Response[v1.UnlockWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.WalletService.UnlockWallet is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateWallet(context.Context, *connect.Request[v1.CreateWalletRequest]) (*connect.Response[v1.CreateWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.WalletService.CreateWallet is not implemented"))
}
