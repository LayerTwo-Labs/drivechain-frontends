// CUSF mainchain validator service

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cusf/mainchain/v1/validator.proto

package mainchainv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/servers/bitwindow/gen/cusf/mainchain/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ValidatorServiceName is the fully-qualified name of the ValidatorService service.
	ValidatorServiceName = "cusf.mainchain.v1.ValidatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ValidatorServiceGetBlockHeaderInfoProcedure is the fully-qualified name of the ValidatorService's
	// GetBlockHeaderInfo RPC.
	ValidatorServiceGetBlockHeaderInfoProcedure = "/cusf.mainchain.v1.ValidatorService/GetBlockHeaderInfo"
	// ValidatorServiceGetBlockInfoProcedure is the fully-qualified name of the ValidatorService's
	// GetBlockInfo RPC.
	ValidatorServiceGetBlockInfoProcedure = "/cusf.mainchain.v1.ValidatorService/GetBlockInfo"
	// ValidatorServiceGetBmmHStarCommitmentProcedure is the fully-qualified name of the
	// ValidatorService's GetBmmHStarCommitment RPC.
	ValidatorServiceGetBmmHStarCommitmentProcedure = "/cusf.mainchain.v1.ValidatorService/GetBmmHStarCommitment"
	// ValidatorServiceGetChainInfoProcedure is the fully-qualified name of the ValidatorService's
	// GetChainInfo RPC.
	ValidatorServiceGetChainInfoProcedure = "/cusf.mainchain.v1.ValidatorService/GetChainInfo"
	// ValidatorServiceGetChainTipProcedure is the fully-qualified name of the ValidatorService's
	// GetChainTip RPC.
	ValidatorServiceGetChainTipProcedure = "/cusf.mainchain.v1.ValidatorService/GetChainTip"
	// ValidatorServiceGetCoinbasePSBTProcedure is the fully-qualified name of the ValidatorService's
	// GetCoinbasePSBT RPC.
	ValidatorServiceGetCoinbasePSBTProcedure = "/cusf.mainchain.v1.ValidatorService/GetCoinbasePSBT"
	// ValidatorServiceGetCtipProcedure is the fully-qualified name of the ValidatorService's GetCtip
	// RPC.
	ValidatorServiceGetCtipProcedure = "/cusf.mainchain.v1.ValidatorService/GetCtip"
	// ValidatorServiceGetSidechainProposalsProcedure is the fully-qualified name of the
	// ValidatorService's GetSidechainProposals RPC.
	ValidatorServiceGetSidechainProposalsProcedure = "/cusf.mainchain.v1.ValidatorService/GetSidechainProposals"
	// ValidatorServiceGetSidechainsProcedure is the fully-qualified name of the ValidatorService's
	// GetSidechains RPC.
	ValidatorServiceGetSidechainsProcedure = "/cusf.mainchain.v1.ValidatorService/GetSidechains"
	// ValidatorServiceGetTwoWayPegDataProcedure is the fully-qualified name of the ValidatorService's
	// GetTwoWayPegData RPC.
	ValidatorServiceGetTwoWayPegDataProcedure = "/cusf.mainchain.v1.ValidatorService/GetTwoWayPegData"
	// ValidatorServiceSubscribeEventsProcedure is the fully-qualified name of the ValidatorService's
	// SubscribeEvents RPC.
	ValidatorServiceSubscribeEventsProcedure = "/cusf.mainchain.v1.ValidatorService/SubscribeEvents"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	validatorServiceServiceDescriptor                     = v1.File_cusf_mainchain_v1_validator_proto.Services().ByName("ValidatorService")
	validatorServiceGetBlockHeaderInfoMethodDescriptor    = validatorServiceServiceDescriptor.Methods().ByName("GetBlockHeaderInfo")
	validatorServiceGetBlockInfoMethodDescriptor          = validatorServiceServiceDescriptor.Methods().ByName("GetBlockInfo")
	validatorServiceGetBmmHStarCommitmentMethodDescriptor = validatorServiceServiceDescriptor.Methods().ByName("GetBmmHStarCommitment")
	validatorServiceGetChainInfoMethodDescriptor          = validatorServiceServiceDescriptor.Methods().ByName("GetChainInfo")
	validatorServiceGetChainTipMethodDescriptor           = validatorServiceServiceDescriptor.Methods().ByName("GetChainTip")
	validatorServiceGetCoinbasePSBTMethodDescriptor       = validatorServiceServiceDescriptor.Methods().ByName("GetCoinbasePSBT")
	validatorServiceGetCtipMethodDescriptor               = validatorServiceServiceDescriptor.Methods().ByName("GetCtip")
	validatorServiceGetSidechainProposalsMethodDescriptor = validatorServiceServiceDescriptor.Methods().ByName("GetSidechainProposals")
	validatorServiceGetSidechainsMethodDescriptor         = validatorServiceServiceDescriptor.Methods().ByName("GetSidechains")
	validatorServiceGetTwoWayPegDataMethodDescriptor      = validatorServiceServiceDescriptor.Methods().ByName("GetTwoWayPegData")
	validatorServiceSubscribeEventsMethodDescriptor       = validatorServiceServiceDescriptor.Methods().ByName("SubscribeEvents")
)

// ValidatorServiceClient is a client for the cusf.mainchain.v1.ValidatorService service.
type ValidatorServiceClient interface {
	GetBlockHeaderInfo(context.Context, *connect.Request[v1.GetBlockHeaderInfoRequest]) (*connect.Response[v1.GetBlockHeaderInfoResponse], error)
	GetBlockInfo(context.Context, *connect.Request[v1.GetBlockInfoRequest]) (*connect.Response[v1.GetBlockInfoResponse], error)
	GetBmmHStarCommitment(context.Context, *connect.Request[v1.GetBmmHStarCommitmentRequest]) (*connect.Response[v1.GetBmmHStarCommitmentResponse], error)
	GetChainInfo(context.Context, *connect.Request[v1.GetChainInfoRequest]) (*connect.Response[v1.GetChainInfoResponse], error)
	GetChainTip(context.Context, *connect.Request[v1.GetChainTipRequest]) (*connect.Response[v1.GetChainTipResponse], error)
	GetCoinbasePSBT(context.Context, *connect.Request[v1.GetCoinbasePSBTRequest]) (*connect.Response[v1.GetCoinbasePSBTResponse], error)
	GetCtip(context.Context, *connect.Request[v1.GetCtipRequest]) (*connect.Response[v1.GetCtipResponse], error)
	GetSidechainProposals(context.Context, *connect.Request[v1.GetSidechainProposalsRequest]) (*connect.Response[v1.GetSidechainProposalsResponse], error)
	GetSidechains(context.Context, *connect.Request[v1.GetSidechainsRequest]) (*connect.Response[v1.GetSidechainsResponse], error)
	GetTwoWayPegData(context.Context, *connect.Request[v1.GetTwoWayPegDataRequest]) (*connect.Response[v1.GetTwoWayPegDataResponse], error)
	SubscribeEvents(context.Context, *connect.Request[v1.SubscribeEventsRequest]) (*connect.ServerStreamForClient[v1.SubscribeEventsResponse], error)
}

// NewValidatorServiceClient constructs a client for the cusf.mainchain.v1.ValidatorService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewValidatorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ValidatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &validatorServiceClient{
		getBlockHeaderInfo: connect.NewClient[v1.GetBlockHeaderInfoRequest, v1.GetBlockHeaderInfoResponse](
			httpClient,
			baseURL+ValidatorServiceGetBlockHeaderInfoProcedure,
			connect.WithSchema(validatorServiceGetBlockHeaderInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBlockInfo: connect.NewClient[v1.GetBlockInfoRequest, v1.GetBlockInfoResponse](
			httpClient,
			baseURL+ValidatorServiceGetBlockInfoProcedure,
			connect.WithSchema(validatorServiceGetBlockInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBmmHStarCommitment: connect.NewClient[v1.GetBmmHStarCommitmentRequest, v1.GetBmmHStarCommitmentResponse](
			httpClient,
			baseURL+ValidatorServiceGetBmmHStarCommitmentProcedure,
			connect.WithSchema(validatorServiceGetBmmHStarCommitmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChainInfo: connect.NewClient[v1.GetChainInfoRequest, v1.GetChainInfoResponse](
			httpClient,
			baseURL+ValidatorServiceGetChainInfoProcedure,
			connect.WithSchema(validatorServiceGetChainInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChainTip: connect.NewClient[v1.GetChainTipRequest, v1.GetChainTipResponse](
			httpClient,
			baseURL+ValidatorServiceGetChainTipProcedure,
			connect.WithSchema(validatorServiceGetChainTipMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCoinbasePSBT: connect.NewClient[v1.GetCoinbasePSBTRequest, v1.GetCoinbasePSBTResponse](
			httpClient,
			baseURL+ValidatorServiceGetCoinbasePSBTProcedure,
			connect.WithSchema(validatorServiceGetCoinbasePSBTMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCtip: connect.NewClient[v1.GetCtipRequest, v1.GetCtipResponse](
			httpClient,
			baseURL+ValidatorServiceGetCtipProcedure,
			connect.WithSchema(validatorServiceGetCtipMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSidechainProposals: connect.NewClient[v1.GetSidechainProposalsRequest, v1.GetSidechainProposalsResponse](
			httpClient,
			baseURL+ValidatorServiceGetSidechainProposalsProcedure,
			connect.WithSchema(validatorServiceGetSidechainProposalsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSidechains: connect.NewClient[v1.GetSidechainsRequest, v1.GetSidechainsResponse](
			httpClient,
			baseURL+ValidatorServiceGetSidechainsProcedure,
			connect.WithSchema(validatorServiceGetSidechainsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTwoWayPegData: connect.NewClient[v1.GetTwoWayPegDataRequest, v1.GetTwoWayPegDataResponse](
			httpClient,
			baseURL+ValidatorServiceGetTwoWayPegDataProcedure,
			connect.WithSchema(validatorServiceGetTwoWayPegDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribeEvents: connect.NewClient[v1.SubscribeEventsRequest, v1.SubscribeEventsResponse](
			httpClient,
			baseURL+ValidatorServiceSubscribeEventsProcedure,
			connect.WithSchema(validatorServiceSubscribeEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// validatorServiceClient implements ValidatorServiceClient.
type validatorServiceClient struct {
	getBlockHeaderInfo    *connect.Client[v1.GetBlockHeaderInfoRequest, v1.GetBlockHeaderInfoResponse]
	getBlockInfo          *connect.Client[v1.GetBlockInfoRequest, v1.GetBlockInfoResponse]
	getBmmHStarCommitment *connect.Client[v1.GetBmmHStarCommitmentRequest, v1.GetBmmHStarCommitmentResponse]
	getChainInfo          *connect.Client[v1.GetChainInfoRequest, v1.GetChainInfoResponse]
	getChainTip           *connect.Client[v1.GetChainTipRequest, v1.GetChainTipResponse]
	getCoinbasePSBT       *connect.Client[v1.GetCoinbasePSBTRequest, v1.GetCoinbasePSBTResponse]
	getCtip               *connect.Client[v1.GetCtipRequest, v1.GetCtipResponse]
	getSidechainProposals *connect.Client[v1.GetSidechainProposalsRequest, v1.GetSidechainProposalsResponse]
	getSidechains         *connect.Client[v1.GetSidechainsRequest, v1.GetSidechainsResponse]
	getTwoWayPegData      *connect.Client[v1.GetTwoWayPegDataRequest, v1.GetTwoWayPegDataResponse]
	subscribeEvents       *connect.Client[v1.SubscribeEventsRequest, v1.SubscribeEventsResponse]
}

// GetBlockHeaderInfo calls cusf.mainchain.v1.ValidatorService.GetBlockHeaderInfo.
func (c *validatorServiceClient) GetBlockHeaderInfo(ctx context.Context, req *connect.Request[v1.GetBlockHeaderInfoRequest]) (*connect.Response[v1.GetBlockHeaderInfoResponse], error) {
	return c.getBlockHeaderInfo.CallUnary(ctx, req)
}

// GetBlockInfo calls cusf.mainchain.v1.ValidatorService.GetBlockInfo.
func (c *validatorServiceClient) GetBlockInfo(ctx context.Context, req *connect.Request[v1.GetBlockInfoRequest]) (*connect.Response[v1.GetBlockInfoResponse], error) {
	return c.getBlockInfo.CallUnary(ctx, req)
}

// GetBmmHStarCommitment calls cusf.mainchain.v1.ValidatorService.GetBmmHStarCommitment.
func (c *validatorServiceClient) GetBmmHStarCommitment(ctx context.Context, req *connect.Request[v1.GetBmmHStarCommitmentRequest]) (*connect.Response[v1.GetBmmHStarCommitmentResponse], error) {
	return c.getBmmHStarCommitment.CallUnary(ctx, req)
}

// GetChainInfo calls cusf.mainchain.v1.ValidatorService.GetChainInfo.
func (c *validatorServiceClient) GetChainInfo(ctx context.Context, req *connect.Request[v1.GetChainInfoRequest]) (*connect.Response[v1.GetChainInfoResponse], error) {
	return c.getChainInfo.CallUnary(ctx, req)
}

// GetChainTip calls cusf.mainchain.v1.ValidatorService.GetChainTip.
func (c *validatorServiceClient) GetChainTip(ctx context.Context, req *connect.Request[v1.GetChainTipRequest]) (*connect.Response[v1.GetChainTipResponse], error) {
	return c.getChainTip.CallUnary(ctx, req)
}

// GetCoinbasePSBT calls cusf.mainchain.v1.ValidatorService.GetCoinbasePSBT.
func (c *validatorServiceClient) GetCoinbasePSBT(ctx context.Context, req *connect.Request[v1.GetCoinbasePSBTRequest]) (*connect.Response[v1.GetCoinbasePSBTResponse], error) {
	return c.getCoinbasePSBT.CallUnary(ctx, req)
}

// GetCtip calls cusf.mainchain.v1.ValidatorService.GetCtip.
func (c *validatorServiceClient) GetCtip(ctx context.Context, req *connect.Request[v1.GetCtipRequest]) (*connect.Response[v1.GetCtipResponse], error) {
	return c.getCtip.CallUnary(ctx, req)
}

// GetSidechainProposals calls cusf.mainchain.v1.ValidatorService.GetSidechainProposals.
func (c *validatorServiceClient) GetSidechainProposals(ctx context.Context, req *connect.Request[v1.GetSidechainProposalsRequest]) (*connect.Response[v1.GetSidechainProposalsResponse], error) {
	return c.getSidechainProposals.CallUnary(ctx, req)
}

// GetSidechains calls cusf.mainchain.v1.ValidatorService.GetSidechains.
func (c *validatorServiceClient) GetSidechains(ctx context.Context, req *connect.Request[v1.GetSidechainsRequest]) (*connect.Response[v1.GetSidechainsResponse], error) {
	return c.getSidechains.CallUnary(ctx, req)
}

// GetTwoWayPegData calls cusf.mainchain.v1.ValidatorService.GetTwoWayPegData.
func (c *validatorServiceClient) GetTwoWayPegData(ctx context.Context, req *connect.Request[v1.GetTwoWayPegDataRequest]) (*connect.Response[v1.GetTwoWayPegDataResponse], error) {
	return c.getTwoWayPegData.CallUnary(ctx, req)
}

// SubscribeEvents calls cusf.mainchain.v1.ValidatorService.SubscribeEvents.
func (c *validatorServiceClient) SubscribeEvents(ctx context.Context, req *connect.Request[v1.SubscribeEventsRequest]) (*connect.ServerStreamForClient[v1.SubscribeEventsResponse], error) {
	return c.subscribeEvents.CallServerStream(ctx, req)
}

// ValidatorServiceHandler is an implementation of the cusf.mainchain.v1.ValidatorService service.
type ValidatorServiceHandler interface {
	GetBlockHeaderInfo(context.Context, *connect.Request[v1.GetBlockHeaderInfoRequest]) (*connect.Response[v1.GetBlockHeaderInfoResponse], error)
	GetBlockInfo(context.Context, *connect.Request[v1.GetBlockInfoRequest]) (*connect.Response[v1.GetBlockInfoResponse], error)
	GetBmmHStarCommitment(context.Context, *connect.Request[v1.GetBmmHStarCommitmentRequest]) (*connect.Response[v1.GetBmmHStarCommitmentResponse], error)
	GetChainInfo(context.Context, *connect.Request[v1.GetChainInfoRequest]) (*connect.Response[v1.GetChainInfoResponse], error)
	GetChainTip(context.Context, *connect.Request[v1.GetChainTipRequest]) (*connect.Response[v1.GetChainTipResponse], error)
	GetCoinbasePSBT(context.Context, *connect.Request[v1.GetCoinbasePSBTRequest]) (*connect.Response[v1.GetCoinbasePSBTResponse], error)
	GetCtip(context.Context, *connect.Request[v1.GetCtipRequest]) (*connect.Response[v1.GetCtipResponse], error)
	GetSidechainProposals(context.Context, *connect.Request[v1.GetSidechainProposalsRequest]) (*connect.Response[v1.GetSidechainProposalsResponse], error)
	GetSidechains(context.Context, *connect.Request[v1.GetSidechainsRequest]) (*connect.Response[v1.GetSidechainsResponse], error)
	GetTwoWayPegData(context.Context, *connect.Request[v1.GetTwoWayPegDataRequest]) (*connect.Response[v1.GetTwoWayPegDataResponse], error)
	SubscribeEvents(context.Context, *connect.Request[v1.SubscribeEventsRequest], *connect.ServerStream[v1.SubscribeEventsResponse]) error
}

// NewValidatorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewValidatorServiceHandler(svc ValidatorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	validatorServiceGetBlockHeaderInfoHandler := connect.NewUnaryHandler(
		ValidatorServiceGetBlockHeaderInfoProcedure,
		svc.GetBlockHeaderInfo,
		connect.WithSchema(validatorServiceGetBlockHeaderInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetBlockInfoHandler := connect.NewUnaryHandler(
		ValidatorServiceGetBlockInfoProcedure,
		svc.GetBlockInfo,
		connect.WithSchema(validatorServiceGetBlockInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetBmmHStarCommitmentHandler := connect.NewUnaryHandler(
		ValidatorServiceGetBmmHStarCommitmentProcedure,
		svc.GetBmmHStarCommitment,
		connect.WithSchema(validatorServiceGetBmmHStarCommitmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetChainInfoHandler := connect.NewUnaryHandler(
		ValidatorServiceGetChainInfoProcedure,
		svc.GetChainInfo,
		connect.WithSchema(validatorServiceGetChainInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetChainTipHandler := connect.NewUnaryHandler(
		ValidatorServiceGetChainTipProcedure,
		svc.GetChainTip,
		connect.WithSchema(validatorServiceGetChainTipMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetCoinbasePSBTHandler := connect.NewUnaryHandler(
		ValidatorServiceGetCoinbasePSBTProcedure,
		svc.GetCoinbasePSBT,
		connect.WithSchema(validatorServiceGetCoinbasePSBTMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetCtipHandler := connect.NewUnaryHandler(
		ValidatorServiceGetCtipProcedure,
		svc.GetCtip,
		connect.WithSchema(validatorServiceGetCtipMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetSidechainProposalsHandler := connect.NewUnaryHandler(
		ValidatorServiceGetSidechainProposalsProcedure,
		svc.GetSidechainProposals,
		connect.WithSchema(validatorServiceGetSidechainProposalsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetSidechainsHandler := connect.NewUnaryHandler(
		ValidatorServiceGetSidechainsProcedure,
		svc.GetSidechains,
		connect.WithSchema(validatorServiceGetSidechainsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceGetTwoWayPegDataHandler := connect.NewUnaryHandler(
		ValidatorServiceGetTwoWayPegDataProcedure,
		svc.GetTwoWayPegData,
		connect.WithSchema(validatorServiceGetTwoWayPegDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	validatorServiceSubscribeEventsHandler := connect.NewServerStreamHandler(
		ValidatorServiceSubscribeEventsProcedure,
		svc.SubscribeEvents,
		connect.WithSchema(validatorServiceSubscribeEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cusf.mainchain.v1.ValidatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ValidatorServiceGetBlockHeaderInfoProcedure:
			validatorServiceGetBlockHeaderInfoHandler.ServeHTTP(w, r)
		case ValidatorServiceGetBlockInfoProcedure:
			validatorServiceGetBlockInfoHandler.ServeHTTP(w, r)
		case ValidatorServiceGetBmmHStarCommitmentProcedure:
			validatorServiceGetBmmHStarCommitmentHandler.ServeHTTP(w, r)
		case ValidatorServiceGetChainInfoProcedure:
			validatorServiceGetChainInfoHandler.ServeHTTP(w, r)
		case ValidatorServiceGetChainTipProcedure:
			validatorServiceGetChainTipHandler.ServeHTTP(w, r)
		case ValidatorServiceGetCoinbasePSBTProcedure:
			validatorServiceGetCoinbasePSBTHandler.ServeHTTP(w, r)
		case ValidatorServiceGetCtipProcedure:
			validatorServiceGetCtipHandler.ServeHTTP(w, r)
		case ValidatorServiceGetSidechainProposalsProcedure:
			validatorServiceGetSidechainProposalsHandler.ServeHTTP(w, r)
		case ValidatorServiceGetSidechainsProcedure:
			validatorServiceGetSidechainsHandler.ServeHTTP(w, r)
		case ValidatorServiceGetTwoWayPegDataProcedure:
			validatorServiceGetTwoWayPegDataHandler.ServeHTTP(w, r)
		case ValidatorServiceSubscribeEventsProcedure:
			validatorServiceSubscribeEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedValidatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedValidatorServiceHandler struct{}

func (UnimplementedValidatorServiceHandler) GetBlockHeaderInfo(context.Context, *connect.Request[v1.GetBlockHeaderInfoRequest]) (*connect.Response[v1.GetBlockHeaderInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.ValidatorService.GetBlockHeaderInfo is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetBlockInfo(context.Context, *connect.Request[v1.GetBlockInfoRequest]) (*connect.Response[v1.GetBlockInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.ValidatorService.GetBlockInfo is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetBmmHStarCommitment(context.Context, *connect.Request[v1.GetBmmHStarCommitmentRequest]) (*connect.Response[v1.GetBmmHStarCommitmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.ValidatorService.GetBmmHStarCommitment is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetChainInfo(context.Context, *connect.Request[v1.GetChainInfoRequest]) (*connect.Response[v1.GetChainInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.ValidatorService.GetChainInfo is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetChainTip(context.Context, *connect.Request[v1.GetChainTipRequest]) (*connect.Response[v1.GetChainTipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.ValidatorService.GetChainTip is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetCoinbasePSBT(context.Context, *connect.Request[v1.GetCoinbasePSBTRequest]) (*connect.Response[v1.GetCoinbasePSBTResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.ValidatorService.GetCoinbasePSBT is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetCtip(context.Context, *connect.Request[v1.GetCtipRequest]) (*connect.Response[v1.GetCtipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.ValidatorService.GetCtip is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetSidechainProposals(context.Context, *connect.Request[v1.GetSidechainProposalsRequest]) (*connect.Response[v1.GetSidechainProposalsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.ValidatorService.GetSidechainProposals is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetSidechains(context.Context, *connect.Request[v1.GetSidechainsRequest]) (*connect.Response[v1.GetSidechainsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.ValidatorService.GetSidechains is not implemented"))
}

func (UnimplementedValidatorServiceHandler) GetTwoWayPegData(context.Context, *connect.Request[v1.GetTwoWayPegDataRequest]) (*connect.Response[v1.GetTwoWayPegDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.ValidatorService.GetTwoWayPegData is not implemented"))
}

func (UnimplementedValidatorServiceHandler) SubscribeEvents(context.Context, *connect.Request[v1.SubscribeEventsRequest], *connect.ServerStream[v1.SubscribeEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("cusf.mainchain.v1.ValidatorService.SubscribeEvents is not implemented"))
}
