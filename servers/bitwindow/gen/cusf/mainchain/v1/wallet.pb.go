// CUSF mainchain wallet service

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: cusf/mainchain/v1/wallet.proto

package mainchainv1

import (
	v1 "github.com/LayerTwo-Labs/sidesail/servers/bitwindow/gen/cusf/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WalletTransaction struct {
	state            protoimpl.MessageState          `protogen:"open.v1"`
	Txid             *v1.ReverseHex                  `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	FeeSats          uint64                          `protobuf:"varint,2,opt,name=fee_sats,json=feeSats,proto3" json:"fee_sats,omitempty"`
	ReceivedSats     uint64                          `protobuf:"varint,3,opt,name=received_sats,json=receivedSats,proto3" json:"received_sats,omitempty"`
	SentSats         uint64                          `protobuf:"varint,4,opt,name=sent_sats,json=sentSats,proto3" json:"sent_sats,omitempty"`
	ConfirmationInfo *WalletTransaction_Confirmation `protobuf:"bytes,5,opt,name=confirmation_info,json=confirmationInfo,proto3" json:"confirmation_info,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WalletTransaction) Reset() {
	*x = WalletTransaction{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransaction) ProtoMessage() {}

func (x *WalletTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransaction.ProtoReflect.Descriptor instead.
func (*WalletTransaction) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *WalletTransaction) GetTxid() *v1.ReverseHex {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *WalletTransaction) GetFeeSats() uint64 {
	if x != nil {
		return x.FeeSats
	}
	return 0
}

func (x *WalletTransaction) GetReceivedSats() uint64 {
	if x != nil {
		return x.ReceivedSats
	}
	return 0
}

func (x *WalletTransaction) GetSentSats() uint64 {
	if x != nil {
		return x.SentSats
	}
	return 0
}

func (x *WalletTransaction) GetConfirmationInfo() *WalletTransaction_Confirmation {
	if x != nil {
		return x.ConfirmationInfo
	}
	return nil
}

type UnlockWalletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnlockWalletRequest) Reset() {
	*x = UnlockWalletRequest{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlockWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockWalletRequest) ProtoMessage() {}

func (x *UnlockWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockWalletRequest.ProtoReflect.Descriptor instead.
func (*UnlockWalletRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *UnlockWalletRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UnlockWalletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnlockWalletResponse) Reset() {
	*x = UnlockWalletResponse{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlockWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockWalletResponse) ProtoMessage() {}

func (x *UnlockWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockWalletResponse.ProtoReflect.Descriptor instead.
func (*UnlockWalletResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{2}
}

type CreateWalletRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BIP39 mnemonic. 12 or 24 words.
	MnemonicWords []string `protobuf:"bytes,1,rep,name=mnemonic_words,json=mnemonicWords,proto3" json:"mnemonic_words,omitempty"`
	// Path to a file containing the mnemonic.
	MnemonicPath string `protobuf:"bytes,2,opt,name=mnemonic_path,json=mnemonicPath,proto3" json:"mnemonic_path,omitempty"`
	// Password for the wallet. Used to encrypt the mnemonic in storage.
	// NOT a BIP39 passphrase.
	Password      string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *CreateWalletRequest) GetMnemonicWords() []string {
	if x != nil {
		return x.MnemonicWords
	}
	return nil
}

func (x *CreateWalletRequest) GetMnemonicPath() string {
	if x != nil {
		return x.MnemonicPath
	}
	return ""
}

func (x *CreateWalletRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CreateWalletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateWalletResponse) Reset() {
	*x = CreateWalletResponse{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletResponse) ProtoMessage() {}

func (x *CreateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateWalletResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{4}
}

type BroadcastWithdrawalBundleRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SidechainId   *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_id,json=sidechainId,proto3" json:"sidechain_id,omitempty"`
	Transaction   *wrapperspb.BytesValue  `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BroadcastWithdrawalBundleRequest) Reset() {
	*x = BroadcastWithdrawalBundleRequest{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BroadcastWithdrawalBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastWithdrawalBundleRequest) ProtoMessage() {}

func (x *BroadcastWithdrawalBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastWithdrawalBundleRequest.ProtoReflect.Descriptor instead.
func (*BroadcastWithdrawalBundleRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *BroadcastWithdrawalBundleRequest) GetSidechainId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainId
	}
	return nil
}

func (x *BroadcastWithdrawalBundleRequest) GetTransaction() *wrapperspb.BytesValue {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type BroadcastWithdrawalBundleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BroadcastWithdrawalBundleResponse) Reset() {
	*x = BroadcastWithdrawalBundleResponse{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BroadcastWithdrawalBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastWithdrawalBundleResponse) ProtoMessage() {}

func (x *BroadcastWithdrawalBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastWithdrawalBundleResponse.ProtoReflect.Descriptor instead.
func (*BroadcastWithdrawalBundleResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{6}
}

type CreateBmmCriticalDataTransactionRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SidechainId   *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_id,json=sidechainId,proto3" json:"sidechain_id,omitempty"`
	ValueSats     *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=value_sats,json=valueSats,proto3" json:"value_sats,omitempty"`
	Height        *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=height,proto3" json:"height,omitempty"`
	CriticalHash  *v1.ConsensusHex        `protobuf:"bytes,4,opt,name=critical_hash,json=criticalHash,proto3" json:"critical_hash,omitempty"`
	PrevBytes     *v1.ReverseHex          `protobuf:"bytes,5,opt,name=prev_bytes,json=prevBytes,proto3" json:"prev_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBmmCriticalDataTransactionRequest) Reset() {
	*x = CreateBmmCriticalDataTransactionRequest{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBmmCriticalDataTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBmmCriticalDataTransactionRequest) ProtoMessage() {}

func (x *CreateBmmCriticalDataTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBmmCriticalDataTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateBmmCriticalDataTransactionRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *CreateBmmCriticalDataTransactionRequest) GetSidechainId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainId
	}
	return nil
}

func (x *CreateBmmCriticalDataTransactionRequest) GetValueSats() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ValueSats
	}
	return nil
}

func (x *CreateBmmCriticalDataTransactionRequest) GetHeight() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *CreateBmmCriticalDataTransactionRequest) GetCriticalHash() *v1.ConsensusHex {
	if x != nil {
		return x.CriticalHash
	}
	return nil
}

func (x *CreateBmmCriticalDataTransactionRequest) GetPrevBytes() *v1.ReverseHex {
	if x != nil {
		return x.PrevBytes
	}
	return nil
}

type CreateBmmCriticalDataTransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txid          *v1.ReverseHex         `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBmmCriticalDataTransactionResponse) Reset() {
	*x = CreateBmmCriticalDataTransactionResponse{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBmmCriticalDataTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBmmCriticalDataTransactionResponse) ProtoMessage() {}

func (x *CreateBmmCriticalDataTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBmmCriticalDataTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateBmmCriticalDataTransactionResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *CreateBmmCriticalDataTransactionResponse) GetTxid() *v1.ReverseHex {
	if x != nil {
		return x.Txid
	}
	return nil
}

type CreateDepositTransactionRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SidechainId   *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_id,json=sidechainId,proto3" json:"sidechain_id,omitempty"`
	Address       *v1.Hex                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ValueSats     *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=value_sats,json=valueSats,proto3" json:"value_sats,omitempty"`
	FeeSats       *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=fee_sats,json=feeSats,proto3" json:"fee_sats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDepositTransactionRequest) Reset() {
	*x = CreateDepositTransactionRequest{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDepositTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDepositTransactionRequest) ProtoMessage() {}

func (x *CreateDepositTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDepositTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateDepositTransactionRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *CreateDepositTransactionRequest) GetSidechainId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainId
	}
	return nil
}

func (x *CreateDepositTransactionRequest) GetAddress() *v1.Hex {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CreateDepositTransactionRequest) GetValueSats() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ValueSats
	}
	return nil
}

func (x *CreateDepositTransactionRequest) GetFeeSats() *wrapperspb.UInt64Value {
	if x != nil {
		return x.FeeSats
	}
	return nil
}

type CreateDepositTransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txid          *v1.ReverseHex         `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDepositTransactionResponse) Reset() {
	*x = CreateDepositTransactionResponse{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDepositTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDepositTransactionResponse) ProtoMessage() {}

func (x *CreateDepositTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDepositTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateDepositTransactionResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{10}
}

func (x *CreateDepositTransactionResponse) GetTxid() *v1.ReverseHex {
	if x != nil {
		return x.Txid
	}
	return nil
}

type CreateNewAddressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNewAddressRequest) Reset() {
	*x = CreateNewAddressRequest{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewAddressRequest) ProtoMessage() {}

func (x *CreateNewAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateNewAddressRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{11}
}

type CreateNewAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNewAddressResponse) Reset() {
	*x = CreateNewAddressResponse{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewAddressResponse) ProtoMessage() {}

func (x *CreateNewAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateNewAddressResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{12}
}

func (x *CreateNewAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreateSidechainProposalRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SidechainId   *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=sidechain_id,json=sidechainId,proto3" json:"sidechain_id,omitempty"`
	Declaration   *SidechainDeclaration   `protobuf:"bytes,2,opt,name=declaration,proto3" json:"declaration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSidechainProposalRequest) Reset() {
	*x = CreateSidechainProposalRequest{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSidechainProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSidechainProposalRequest) ProtoMessage() {}

func (x *CreateSidechainProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSidechainProposalRequest.ProtoReflect.Descriptor instead.
func (*CreateSidechainProposalRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{13}
}

func (x *CreateSidechainProposalRequest) GetSidechainId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SidechainId
	}
	return nil
}

func (x *CreateSidechainProposalRequest) GetDeclaration() *SidechainDeclaration {
	if x != nil {
		return x.Declaration
	}
	return nil
}

type CreateSidechainProposalResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*CreateSidechainProposalResponse_Confirmed_
	//	*CreateSidechainProposalResponse_NotConfirmed_
	Event         isCreateSidechainProposalResponse_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSidechainProposalResponse) Reset() {
	*x = CreateSidechainProposalResponse{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSidechainProposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSidechainProposalResponse) ProtoMessage() {}

func (x *CreateSidechainProposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSidechainProposalResponse.ProtoReflect.Descriptor instead.
func (*CreateSidechainProposalResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{14}
}

func (x *CreateSidechainProposalResponse) GetEvent() isCreateSidechainProposalResponse_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *CreateSidechainProposalResponse) GetConfirmed() *CreateSidechainProposalResponse_Confirmed {
	if x != nil {
		if x, ok := x.Event.(*CreateSidechainProposalResponse_Confirmed_); ok {
			return x.Confirmed
		}
	}
	return nil
}

func (x *CreateSidechainProposalResponse) GetNotConfirmed() *CreateSidechainProposalResponse_NotConfirmed {
	if x != nil {
		if x, ok := x.Event.(*CreateSidechainProposalResponse_NotConfirmed_); ok {
			return x.NotConfirmed
		}
	}
	return nil
}

type isCreateSidechainProposalResponse_Event interface {
	isCreateSidechainProposalResponse_Event()
}

type CreateSidechainProposalResponse_Confirmed_ struct {
	Confirmed *CreateSidechainProposalResponse_Confirmed `protobuf:"bytes,1,opt,name=confirmed,proto3,oneof"`
}

type CreateSidechainProposalResponse_NotConfirmed_ struct {
	NotConfirmed *CreateSidechainProposalResponse_NotConfirmed `protobuf:"bytes,2,opt,name=not_confirmed,json=notConfirmed,proto3,oneof"`
}

func (*CreateSidechainProposalResponse_Confirmed_) isCreateSidechainProposalResponse_Event() {}

func (*CreateSidechainProposalResponse_NotConfirmed_) isCreateSidechainProposalResponse_Event() {}

type GenerateBlocksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of blocks to generate.
	Blocks *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=blocks,proto3" json:"blocks,omitempty"`
	// ACK all sidechain proposals, irregardless of if they are already
	// in the wallet DB.
	AckAllProposals bool `protobuf:"varint,2,opt,name=ack_all_proposals,json=ackAllProposals,proto3" json:"ack_all_proposals,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GenerateBlocksRequest) Reset() {
	*x = GenerateBlocksRequest{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateBlocksRequest) ProtoMessage() {}

func (x *GenerateBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateBlocksRequest.ProtoReflect.Descriptor instead.
func (*GenerateBlocksRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateBlocksRequest) GetBlocks() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *GenerateBlocksRequest) GetAckAllProposals() bool {
	if x != nil {
		return x.AckAllProposals
	}
	return false
}

type GenerateBlocksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     *v1.ReverseHex         `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateBlocksResponse) Reset() {
	*x = GenerateBlocksResponse{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateBlocksResponse) ProtoMessage() {}

func (x *GenerateBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateBlocksResponse.ProtoReflect.Descriptor instead.
func (*GenerateBlocksResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{16}
}

func (x *GenerateBlocksResponse) GetBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type GetBalanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{17}
}

type GetBalanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfirmedSats uint64                 `protobuf:"varint,1,opt,name=confirmed_sats,json=confirmedSats,proto3" json:"confirmed_sats,omitempty"`
	PendingSats   uint64                 `protobuf:"varint,2,opt,name=pending_sats,json=pendingSats,proto3" json:"pending_sats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{18}
}

func (x *GetBalanceResponse) GetConfirmedSats() uint64 {
	if x != nil {
		return x.ConfirmedSats
	}
	return 0
}

func (x *GetBalanceResponse) GetPendingSats() uint64 {
	if x != nil {
		return x.PendingSats
	}
	return 0
}

type ListTransactionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransactionsRequest) Reset() {
	*x = ListTransactionsRequest{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsRequest) ProtoMessage() {}

func (x *ListTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{19}
}

type ListTransactionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transactions  []*WalletTransaction   `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransactionsResponse) Reset() {
	*x = ListTransactionsResponse{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsResponse) ProtoMessage() {}

func (x *ListTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{20}
}

func (x *ListTransactionsResponse) GetTransactions() []*WalletTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type SendTransactionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address -> satoshi amount
	Destinations map[string]uint64 `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// If not set, a reasonable rate is used by asking Core for an estimate.
	FeeRate *SendTransactionRequest_FeeRate `protobuf:"bytes,2,opt,name=fee_rate,json=feeRate,proto3,oneof" json:"fee_rate,omitempty"`
	// if set, the transaction will add a separate OP_RETURN output with this
	// message.
	OpReturnMessage *v1.Hex `protobuf:"bytes,3,opt,name=op_return_message,json=opReturnMessage,proto3,oneof" json:"op_return_message,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SendTransactionRequest) Reset() {
	*x = SendTransactionRequest{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionRequest) ProtoMessage() {}

func (x *SendTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionRequest.ProtoReflect.Descriptor instead.
func (*SendTransactionRequest) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{21}
}

func (x *SendTransactionRequest) GetDestinations() map[string]uint64 {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *SendTransactionRequest) GetFeeRate() *SendTransactionRequest_FeeRate {
	if x != nil {
		return x.FeeRate
	}
	return nil
}

func (x *SendTransactionRequest) GetOpReturnMessage() *v1.Hex {
	if x != nil {
		return x.OpReturnMessage
	}
	return nil
}

type SendTransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txid          *v1.ReverseHex         `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTransactionResponse) Reset() {
	*x = SendTransactionResponse{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionResponse) ProtoMessage() {}

func (x *SendTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionResponse.ProtoReflect.Descriptor instead.
func (*SendTransactionResponse) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{22}
}

func (x *SendTransactionResponse) GetTxid() *v1.ReverseHex {
	if x != nil {
		return x.Txid
	}
	return nil
}

type WalletTransaction_Confirmation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        uint32                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash     *v1.ReverseHex         `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WalletTransaction_Confirmation) Reset() {
	*x = WalletTransaction_Confirmation{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletTransaction_Confirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransaction_Confirmation) ProtoMessage() {}

func (x *WalletTransaction_Confirmation) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransaction_Confirmation.ProtoReflect.Descriptor instead.
func (*WalletTransaction_Confirmation) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{0, 0}
}

func (x *WalletTransaction_Confirmation) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *WalletTransaction_Confirmation) GetBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *WalletTransaction_Confirmation) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type CreateSidechainProposalResponse_Confirmed struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	BlockHash     *v1.ReverseHex          `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Confirmations *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	Height        *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=height,proto3" json:"height,omitempty"`
	Outpoint      *OutPoint               `protobuf:"bytes,4,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	PrevBlockHash *v1.ReverseHex          `protobuf:"bytes,5,opt,name=prev_block_hash,json=prevBlockHash,proto3" json:"prev_block_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSidechainProposalResponse_Confirmed) Reset() {
	*x = CreateSidechainProposalResponse_Confirmed{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSidechainProposalResponse_Confirmed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSidechainProposalResponse_Confirmed) ProtoMessage() {}

func (x *CreateSidechainProposalResponse_Confirmed) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSidechainProposalResponse_Confirmed.ProtoReflect.Descriptor instead.
func (*CreateSidechainProposalResponse_Confirmed) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CreateSidechainProposalResponse_Confirmed) GetBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *CreateSidechainProposalResponse_Confirmed) GetConfirmations() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Confirmations
	}
	return nil
}

func (x *CreateSidechainProposalResponse_Confirmed) GetHeight() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *CreateSidechainProposalResponse_Confirmed) GetOutpoint() *OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *CreateSidechainProposalResponse_Confirmed) GetPrevBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.PrevBlockHash
	}
	return nil
}

type CreateSidechainProposalResponse_NotConfirmed struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	BlockHash     *v1.ReverseHex          `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Height        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	PrevBlockHash *v1.ReverseHex          `protobuf:"bytes,3,opt,name=prev_block_hash,json=prevBlockHash,proto3" json:"prev_block_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSidechainProposalResponse_NotConfirmed) Reset() {
	*x = CreateSidechainProposalResponse_NotConfirmed{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSidechainProposalResponse_NotConfirmed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSidechainProposalResponse_NotConfirmed) ProtoMessage() {}

func (x *CreateSidechainProposalResponse_NotConfirmed) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSidechainProposalResponse_NotConfirmed.ProtoReflect.Descriptor instead.
func (*CreateSidechainProposalResponse_NotConfirmed) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{14, 1}
}

func (x *CreateSidechainProposalResponse_NotConfirmed) GetBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *CreateSidechainProposalResponse_NotConfirmed) GetHeight() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *CreateSidechainProposalResponse_NotConfirmed) GetPrevBlockHash() *v1.ReverseHex {
	if x != nil {
		return x.PrevBlockHash
	}
	return nil
}

type SendTransactionRequest_FeeRate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Fee:
	//
	//	*SendTransactionRequest_FeeRate_SatPerVbyte
	//	*SendTransactionRequest_FeeRate_Sats
	Fee           isSendTransactionRequest_FeeRate_Fee `protobuf_oneof:"fee"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTransactionRequest_FeeRate) Reset() {
	*x = SendTransactionRequest_FeeRate{}
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTransactionRequest_FeeRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionRequest_FeeRate) ProtoMessage() {}

func (x *SendTransactionRequest_FeeRate) ProtoReflect() protoreflect.Message {
	mi := &file_cusf_mainchain_v1_wallet_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionRequest_FeeRate.ProtoReflect.Descriptor instead.
func (*SendTransactionRequest_FeeRate) Descriptor() ([]byte, []int) {
	return file_cusf_mainchain_v1_wallet_proto_rawDescGZIP(), []int{21, 0}
}

func (x *SendTransactionRequest_FeeRate) GetFee() isSendTransactionRequest_FeeRate_Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *SendTransactionRequest_FeeRate) GetSatPerVbyte() uint64 {
	if x != nil {
		if x, ok := x.Fee.(*SendTransactionRequest_FeeRate_SatPerVbyte); ok {
			return x.SatPerVbyte
		}
	}
	return 0
}

func (x *SendTransactionRequest_FeeRate) GetSats() uint64 {
	if x != nil {
		if x, ok := x.Fee.(*SendTransactionRequest_FeeRate_Sats); ok {
			return x.Sats
		}
	}
	return 0
}

type isSendTransactionRequest_FeeRate_Fee interface {
	isSendTransactionRequest_FeeRate_Fee()
}

type SendTransactionRequest_FeeRate_SatPerVbyte struct {
	// Fee rate, measured in sat/vbyte.
	SatPerVbyte uint64 `protobuf:"varint,1,opt,name=sat_per_vbyte,json=satPerVbyte,proto3,oneof"`
}

type SendTransactionRequest_FeeRate_Sats struct {
	// Fee amount, measured in sats.
	Sats uint64 `protobuf:"varint,2,opt,name=sats,proto3,oneof"`
}

func (*SendTransactionRequest_FeeRate_SatPerVbyte) isSendTransactionRequest_FeeRate_Fee() {}

func (*SendTransactionRequest_FeeRate_Sats) isSendTransactionRequest_FeeRate_Fee() {}

var File_cusf_mainchain_v1_wallet_proto protoreflect.FileDescriptor

var file_cusf_mainchain_v1_wallet_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x75, 0x73, 0x66, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x75, 0x73, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x63, 0x75, 0x73, 0x66, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9e, 0x03, 0x0a, 0x11, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65,
	0x78, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x73,
	0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x53, 0x61,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x73,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x53, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74,
	0x53, 0x61, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x9b, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x31, 0x0a, 0x13, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6e,
	0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x16, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x20, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x21, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb,
	0x02, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x6d, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x61, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x41,
	0x0a, 0x0d, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x48, 0x65, 0x78, 0x52, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65,
	0x78, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x28,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x6d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48,
	0x65, 0x78, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x87, 0x02, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x65, 0x78, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x61, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x66, 0x65, 0x65,
	0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x66, 0x65, 0x65, 0x53, 0x61,
	0x74, 0x73, 0x22, 0x52, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78,
	0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x34, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x05, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x1a, 0xbd, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65,
	0x78, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x1a, 0xc3, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65,
	0x78, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75,
	0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x48, 0x65, 0x78, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x79, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x41, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x53, 0x0a, 0x16, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x48, 0x65, 0x78, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x53, 0x61, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x61, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x61, 0x74, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x64, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc4, 0x03, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5f, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x51, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x11, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x78, 0x48, 0x01, 0x52, 0x0f, 0x6f, 0x70, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x4c, 0x0a, 0x07, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x76, 0x62, 0x79, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x61, 0x74, 0x50, 0x65, 0x72, 0x56, 0x62, 0x79, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x73,
	0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x73, 0x61, 0x74,
	0x73, 0x42, 0x05, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x70, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x17,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x65,
	0x78, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x32, 0x8b, 0x0a, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x19, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63,
	0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x6d,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x6d, 0x6d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6d,
	0x6d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x83, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e,
	0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x75, 0x73,
	0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x31, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64,
	0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63,
	0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x28, 0x2e, 0x63,
	0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x0c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x75,
	0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x75, 0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xe1, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x75,
	0x73, 0x66, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x42,
	0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x77, 0x6f, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x73, 0x61, 0x69,
	0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x69, 0x74, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x75, 0x73, 0x66, 0x2f, 0x6d, 0x61, 0x69,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x4d, 0x58, 0xaa, 0x02, 0x11, 0x43, 0x75,
	0x73, 0x66, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x11, 0x43, 0x75, 0x73, 0x66, 0x5c, 0x4d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1d, 0x43, 0x75, 0x73, 0x66, 0x5c, 0x4d, 0x61, 0x69, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x43, 0x75, 0x73, 0x66, 0x3a, 0x3a, 0x4d, 0x61, 0x69, 0x6e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cusf_mainchain_v1_wallet_proto_rawDescOnce sync.Once
	file_cusf_mainchain_v1_wallet_proto_rawDescData = file_cusf_mainchain_v1_wallet_proto_rawDesc
)

func file_cusf_mainchain_v1_wallet_proto_rawDescGZIP() []byte {
	file_cusf_mainchain_v1_wallet_proto_rawDescOnce.Do(func() {
		file_cusf_mainchain_v1_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_cusf_mainchain_v1_wallet_proto_rawDescData)
	})
	return file_cusf_mainchain_v1_wallet_proto_rawDescData
}

var file_cusf_mainchain_v1_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_cusf_mainchain_v1_wallet_proto_goTypes = []any{
	(*WalletTransaction)(nil),                            // 0: cusf.mainchain.v1.WalletTransaction
	(*UnlockWalletRequest)(nil),                          // 1: cusf.mainchain.v1.UnlockWalletRequest
	(*UnlockWalletResponse)(nil),                         // 2: cusf.mainchain.v1.UnlockWalletResponse
	(*CreateWalletRequest)(nil),                          // 3: cusf.mainchain.v1.CreateWalletRequest
	(*CreateWalletResponse)(nil),                         // 4: cusf.mainchain.v1.CreateWalletResponse
	(*BroadcastWithdrawalBundleRequest)(nil),             // 5: cusf.mainchain.v1.BroadcastWithdrawalBundleRequest
	(*BroadcastWithdrawalBundleResponse)(nil),            // 6: cusf.mainchain.v1.BroadcastWithdrawalBundleResponse
	(*CreateBmmCriticalDataTransactionRequest)(nil),      // 7: cusf.mainchain.v1.CreateBmmCriticalDataTransactionRequest
	(*CreateBmmCriticalDataTransactionResponse)(nil),     // 8: cusf.mainchain.v1.CreateBmmCriticalDataTransactionResponse
	(*CreateDepositTransactionRequest)(nil),              // 9: cusf.mainchain.v1.CreateDepositTransactionRequest
	(*CreateDepositTransactionResponse)(nil),             // 10: cusf.mainchain.v1.CreateDepositTransactionResponse
	(*CreateNewAddressRequest)(nil),                      // 11: cusf.mainchain.v1.CreateNewAddressRequest
	(*CreateNewAddressResponse)(nil),                     // 12: cusf.mainchain.v1.CreateNewAddressResponse
	(*CreateSidechainProposalRequest)(nil),               // 13: cusf.mainchain.v1.CreateSidechainProposalRequest
	(*CreateSidechainProposalResponse)(nil),              // 14: cusf.mainchain.v1.CreateSidechainProposalResponse
	(*GenerateBlocksRequest)(nil),                        // 15: cusf.mainchain.v1.GenerateBlocksRequest
	(*GenerateBlocksResponse)(nil),                       // 16: cusf.mainchain.v1.GenerateBlocksResponse
	(*GetBalanceRequest)(nil),                            // 17: cusf.mainchain.v1.GetBalanceRequest
	(*GetBalanceResponse)(nil),                           // 18: cusf.mainchain.v1.GetBalanceResponse
	(*ListTransactionsRequest)(nil),                      // 19: cusf.mainchain.v1.ListTransactionsRequest
	(*ListTransactionsResponse)(nil),                     // 20: cusf.mainchain.v1.ListTransactionsResponse
	(*SendTransactionRequest)(nil),                       // 21: cusf.mainchain.v1.SendTransactionRequest
	(*SendTransactionResponse)(nil),                      // 22: cusf.mainchain.v1.SendTransactionResponse
	(*WalletTransaction_Confirmation)(nil),               // 23: cusf.mainchain.v1.WalletTransaction.Confirmation
	(*CreateSidechainProposalResponse_Confirmed)(nil),    // 24: cusf.mainchain.v1.CreateSidechainProposalResponse.Confirmed
	(*CreateSidechainProposalResponse_NotConfirmed)(nil), // 25: cusf.mainchain.v1.CreateSidechainProposalResponse.NotConfirmed
	(*SendTransactionRequest_FeeRate)(nil),               // 26: cusf.mainchain.v1.SendTransactionRequest.FeeRate
	nil,                                                  // 27: cusf.mainchain.v1.SendTransactionRequest.DestinationsEntry
	(*v1.ReverseHex)(nil),                                // 28: cusf.common.v1.ReverseHex
	(*wrapperspb.UInt32Value)(nil),                       // 29: google.protobuf.UInt32Value
	(*wrapperspb.BytesValue)(nil),                        // 30: google.protobuf.BytesValue
	(*wrapperspb.UInt64Value)(nil),                       // 31: google.protobuf.UInt64Value
	(*v1.ConsensusHex)(nil),                              // 32: cusf.common.v1.ConsensusHex
	(*v1.Hex)(nil),                                       // 33: cusf.common.v1.Hex
	(*SidechainDeclaration)(nil),                         // 34: cusf.mainchain.v1.SidechainDeclaration
	(*timestamppb.Timestamp)(nil),                        // 35: google.protobuf.Timestamp
	(*OutPoint)(nil),                                     // 36: cusf.mainchain.v1.OutPoint
}
var file_cusf_mainchain_v1_wallet_proto_depIdxs = []int32{
	28, // 0: cusf.mainchain.v1.WalletTransaction.txid:type_name -> cusf.common.v1.ReverseHex
	23, // 1: cusf.mainchain.v1.WalletTransaction.confirmation_info:type_name -> cusf.mainchain.v1.WalletTransaction.Confirmation
	29, // 2: cusf.mainchain.v1.BroadcastWithdrawalBundleRequest.sidechain_id:type_name -> google.protobuf.UInt32Value
	30, // 3: cusf.mainchain.v1.BroadcastWithdrawalBundleRequest.transaction:type_name -> google.protobuf.BytesValue
	29, // 4: cusf.mainchain.v1.CreateBmmCriticalDataTransactionRequest.sidechain_id:type_name -> google.protobuf.UInt32Value
	31, // 5: cusf.mainchain.v1.CreateBmmCriticalDataTransactionRequest.value_sats:type_name -> google.protobuf.UInt64Value
	29, // 6: cusf.mainchain.v1.CreateBmmCriticalDataTransactionRequest.height:type_name -> google.protobuf.UInt32Value
	32, // 7: cusf.mainchain.v1.CreateBmmCriticalDataTransactionRequest.critical_hash:type_name -> cusf.common.v1.ConsensusHex
	28, // 8: cusf.mainchain.v1.CreateBmmCriticalDataTransactionRequest.prev_bytes:type_name -> cusf.common.v1.ReverseHex
	28, // 9: cusf.mainchain.v1.CreateBmmCriticalDataTransactionResponse.txid:type_name -> cusf.common.v1.ReverseHex
	29, // 10: cusf.mainchain.v1.CreateDepositTransactionRequest.sidechain_id:type_name -> google.protobuf.UInt32Value
	33, // 11: cusf.mainchain.v1.CreateDepositTransactionRequest.address:type_name -> cusf.common.v1.Hex
	31, // 12: cusf.mainchain.v1.CreateDepositTransactionRequest.value_sats:type_name -> google.protobuf.UInt64Value
	31, // 13: cusf.mainchain.v1.CreateDepositTransactionRequest.fee_sats:type_name -> google.protobuf.UInt64Value
	28, // 14: cusf.mainchain.v1.CreateDepositTransactionResponse.txid:type_name -> cusf.common.v1.ReverseHex
	29, // 15: cusf.mainchain.v1.CreateSidechainProposalRequest.sidechain_id:type_name -> google.protobuf.UInt32Value
	34, // 16: cusf.mainchain.v1.CreateSidechainProposalRequest.declaration:type_name -> cusf.mainchain.v1.SidechainDeclaration
	24, // 17: cusf.mainchain.v1.CreateSidechainProposalResponse.confirmed:type_name -> cusf.mainchain.v1.CreateSidechainProposalResponse.Confirmed
	25, // 18: cusf.mainchain.v1.CreateSidechainProposalResponse.not_confirmed:type_name -> cusf.mainchain.v1.CreateSidechainProposalResponse.NotConfirmed
	29, // 19: cusf.mainchain.v1.GenerateBlocksRequest.blocks:type_name -> google.protobuf.UInt32Value
	28, // 20: cusf.mainchain.v1.GenerateBlocksResponse.block_hash:type_name -> cusf.common.v1.ReverseHex
	0,  // 21: cusf.mainchain.v1.ListTransactionsResponse.transactions:type_name -> cusf.mainchain.v1.WalletTransaction
	27, // 22: cusf.mainchain.v1.SendTransactionRequest.destinations:type_name -> cusf.mainchain.v1.SendTransactionRequest.DestinationsEntry
	26, // 23: cusf.mainchain.v1.SendTransactionRequest.fee_rate:type_name -> cusf.mainchain.v1.SendTransactionRequest.FeeRate
	33, // 24: cusf.mainchain.v1.SendTransactionRequest.op_return_message:type_name -> cusf.common.v1.Hex
	28, // 25: cusf.mainchain.v1.SendTransactionResponse.txid:type_name -> cusf.common.v1.ReverseHex
	28, // 26: cusf.mainchain.v1.WalletTransaction.Confirmation.block_hash:type_name -> cusf.common.v1.ReverseHex
	35, // 27: cusf.mainchain.v1.WalletTransaction.Confirmation.timestamp:type_name -> google.protobuf.Timestamp
	28, // 28: cusf.mainchain.v1.CreateSidechainProposalResponse.Confirmed.block_hash:type_name -> cusf.common.v1.ReverseHex
	29, // 29: cusf.mainchain.v1.CreateSidechainProposalResponse.Confirmed.confirmations:type_name -> google.protobuf.UInt32Value
	29, // 30: cusf.mainchain.v1.CreateSidechainProposalResponse.Confirmed.height:type_name -> google.protobuf.UInt32Value
	36, // 31: cusf.mainchain.v1.CreateSidechainProposalResponse.Confirmed.outpoint:type_name -> cusf.mainchain.v1.OutPoint
	28, // 32: cusf.mainchain.v1.CreateSidechainProposalResponse.Confirmed.prev_block_hash:type_name -> cusf.common.v1.ReverseHex
	28, // 33: cusf.mainchain.v1.CreateSidechainProposalResponse.NotConfirmed.block_hash:type_name -> cusf.common.v1.ReverseHex
	29, // 34: cusf.mainchain.v1.CreateSidechainProposalResponse.NotConfirmed.height:type_name -> google.protobuf.UInt32Value
	28, // 35: cusf.mainchain.v1.CreateSidechainProposalResponse.NotConfirmed.prev_block_hash:type_name -> cusf.common.v1.ReverseHex
	5,  // 36: cusf.mainchain.v1.WalletService.BroadcastWithdrawalBundle:input_type -> cusf.mainchain.v1.BroadcastWithdrawalBundleRequest
	7,  // 37: cusf.mainchain.v1.WalletService.CreateBmmCriticalDataTransaction:input_type -> cusf.mainchain.v1.CreateBmmCriticalDataTransactionRequest
	9,  // 38: cusf.mainchain.v1.WalletService.CreateDepositTransaction:input_type -> cusf.mainchain.v1.CreateDepositTransactionRequest
	11, // 39: cusf.mainchain.v1.WalletService.CreateNewAddress:input_type -> cusf.mainchain.v1.CreateNewAddressRequest
	13, // 40: cusf.mainchain.v1.WalletService.CreateSidechainProposal:input_type -> cusf.mainchain.v1.CreateSidechainProposalRequest
	17, // 41: cusf.mainchain.v1.WalletService.GetBalance:input_type -> cusf.mainchain.v1.GetBalanceRequest
	19, // 42: cusf.mainchain.v1.WalletService.ListTransactions:input_type -> cusf.mainchain.v1.ListTransactionsRequest
	21, // 43: cusf.mainchain.v1.WalletService.SendTransaction:input_type -> cusf.mainchain.v1.SendTransactionRequest
	15, // 44: cusf.mainchain.v1.WalletService.GenerateBlocks:input_type -> cusf.mainchain.v1.GenerateBlocksRequest
	1,  // 45: cusf.mainchain.v1.WalletService.UnlockWallet:input_type -> cusf.mainchain.v1.UnlockWalletRequest
	3,  // 46: cusf.mainchain.v1.WalletService.CreateWallet:input_type -> cusf.mainchain.v1.CreateWalletRequest
	6,  // 47: cusf.mainchain.v1.WalletService.BroadcastWithdrawalBundle:output_type -> cusf.mainchain.v1.BroadcastWithdrawalBundleResponse
	8,  // 48: cusf.mainchain.v1.WalletService.CreateBmmCriticalDataTransaction:output_type -> cusf.mainchain.v1.CreateBmmCriticalDataTransactionResponse
	10, // 49: cusf.mainchain.v1.WalletService.CreateDepositTransaction:output_type -> cusf.mainchain.v1.CreateDepositTransactionResponse
	12, // 50: cusf.mainchain.v1.WalletService.CreateNewAddress:output_type -> cusf.mainchain.v1.CreateNewAddressResponse
	14, // 51: cusf.mainchain.v1.WalletService.CreateSidechainProposal:output_type -> cusf.mainchain.v1.CreateSidechainProposalResponse
	18, // 52: cusf.mainchain.v1.WalletService.GetBalance:output_type -> cusf.mainchain.v1.GetBalanceResponse
	20, // 53: cusf.mainchain.v1.WalletService.ListTransactions:output_type -> cusf.mainchain.v1.ListTransactionsResponse
	22, // 54: cusf.mainchain.v1.WalletService.SendTransaction:output_type -> cusf.mainchain.v1.SendTransactionResponse
	16, // 55: cusf.mainchain.v1.WalletService.GenerateBlocks:output_type -> cusf.mainchain.v1.GenerateBlocksResponse
	2,  // 56: cusf.mainchain.v1.WalletService.UnlockWallet:output_type -> cusf.mainchain.v1.UnlockWalletResponse
	4,  // 57: cusf.mainchain.v1.WalletService.CreateWallet:output_type -> cusf.mainchain.v1.CreateWalletResponse
	47, // [47:58] is the sub-list for method output_type
	36, // [36:47] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_cusf_mainchain_v1_wallet_proto_init() }
func file_cusf_mainchain_v1_wallet_proto_init() {
	if File_cusf_mainchain_v1_wallet_proto != nil {
		return
	}
	file_cusf_mainchain_v1_common_proto_init()
	file_cusf_mainchain_v1_wallet_proto_msgTypes[14].OneofWrappers = []any{
		(*CreateSidechainProposalResponse_Confirmed_)(nil),
		(*CreateSidechainProposalResponse_NotConfirmed_)(nil),
	}
	file_cusf_mainchain_v1_wallet_proto_msgTypes[21].OneofWrappers = []any{}
	file_cusf_mainchain_v1_wallet_proto_msgTypes[26].OneofWrappers = []any{
		(*SendTransactionRequest_FeeRate_SatPerVbyte)(nil),
		(*SendTransactionRequest_FeeRate_Sats)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cusf_mainchain_v1_wallet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cusf_mainchain_v1_wallet_proto_goTypes,
		DependencyIndexes: file_cusf_mainchain_v1_wallet_proto_depIdxs,
		MessageInfos:      file_cusf_mainchain_v1_wallet_proto_msgTypes,
	}.Build()
	File_cusf_mainchain_v1_wallet_proto = out.File
	file_cusf_mainchain_v1_wallet_proto_rawDesc = nil
	file_cusf_mainchain_v1_wallet_proto_goTypes = nil
	file_cusf_mainchain_v1_wallet_proto_depIdxs = nil
}
