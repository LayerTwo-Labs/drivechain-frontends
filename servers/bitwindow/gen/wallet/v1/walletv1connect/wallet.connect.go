// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wallet/v1/wallet.proto

package walletv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/servers/bitwindow/gen/wallet/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WalletServiceName is the fully-qualified name of the WalletService service.
	WalletServiceName = "wallet.v1.WalletService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WalletServiceSendTransactionProcedure is the fully-qualified name of the WalletService's
	// SendTransaction RPC.
	WalletServiceSendTransactionProcedure = "/wallet.v1.WalletService/SendTransaction"
	// WalletServiceGetBalanceProcedure is the fully-qualified name of the WalletService's GetBalance
	// RPC.
	WalletServiceGetBalanceProcedure = "/wallet.v1.WalletService/GetBalance"
	// WalletServiceGetNewAddressProcedure is the fully-qualified name of the WalletService's
	// GetNewAddress RPC.
	WalletServiceGetNewAddressProcedure = "/wallet.v1.WalletService/GetNewAddress"
	// WalletServiceListTransactionsProcedure is the fully-qualified name of the WalletService's
	// ListTransactions RPC.
	WalletServiceListTransactionsProcedure = "/wallet.v1.WalletService/ListTransactions"
	// WalletServiceListSidechainDepositsProcedure is the fully-qualified name of the WalletService's
	// ListSidechainDeposits RPC.
	WalletServiceListSidechainDepositsProcedure = "/wallet.v1.WalletService/ListSidechainDeposits"
	// WalletServiceCreateSidechainDepositProcedure is the fully-qualified name of the WalletService's
	// CreateSidechainDeposit RPC.
	WalletServiceCreateSidechainDepositProcedure = "/wallet.v1.WalletService/CreateSidechainDeposit"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	walletServiceServiceDescriptor                      = v1.File_wallet_v1_wallet_proto.Services().ByName("WalletService")
	walletServiceSendTransactionMethodDescriptor        = walletServiceServiceDescriptor.Methods().ByName("SendTransaction")
	walletServiceGetBalanceMethodDescriptor             = walletServiceServiceDescriptor.Methods().ByName("GetBalance")
	walletServiceGetNewAddressMethodDescriptor          = walletServiceServiceDescriptor.Methods().ByName("GetNewAddress")
	walletServiceListTransactionsMethodDescriptor       = walletServiceServiceDescriptor.Methods().ByName("ListTransactions")
	walletServiceListSidechainDepositsMethodDescriptor  = walletServiceServiceDescriptor.Methods().ByName("ListSidechainDeposits")
	walletServiceCreateSidechainDepositMethodDescriptor = walletServiceServiceDescriptor.Methods().ByName("CreateSidechainDeposit")
)

// WalletServiceClient is a client for the wallet.v1.WalletService service.
type WalletServiceClient interface {
	SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error)
	GetBalance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error)
	// Problem: deriving nilly willy here is potentially problematic. There's no way of listing
	// out unused addresses, so we risk crossing the sync gap.
	GetNewAddress(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error)
	ListTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error)
	ListSidechainDeposits(context.Context, *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error)
	CreateSidechainDeposit(context.Context, *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error)
}

// NewWalletServiceClient constructs a client for the wallet.v1.WalletService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWalletServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WalletServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &walletServiceClient{
		sendTransaction: connect.NewClient[v1.SendTransactionRequest, v1.SendTransactionResponse](
			httpClient,
			baseURL+WalletServiceSendTransactionProcedure,
			connect.WithSchema(walletServiceSendTransactionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBalance: connect.NewClient[emptypb.Empty, v1.GetBalanceResponse](
			httpClient,
			baseURL+WalletServiceGetBalanceProcedure,
			connect.WithSchema(walletServiceGetBalanceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNewAddress: connect.NewClient[emptypb.Empty, v1.GetNewAddressResponse](
			httpClient,
			baseURL+WalletServiceGetNewAddressProcedure,
			connect.WithSchema(walletServiceGetNewAddressMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTransactions: connect.NewClient[emptypb.Empty, v1.ListTransactionsResponse](
			httpClient,
			baseURL+WalletServiceListTransactionsProcedure,
			connect.WithSchema(walletServiceListTransactionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSidechainDeposits: connect.NewClient[v1.ListSidechainDepositsRequest, v1.ListSidechainDepositsResponse](
			httpClient,
			baseURL+WalletServiceListSidechainDepositsProcedure,
			connect.WithSchema(walletServiceListSidechainDepositsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createSidechainDeposit: connect.NewClient[v1.CreateSidechainDepositRequest, v1.CreateSidechainDepositResponse](
			httpClient,
			baseURL+WalletServiceCreateSidechainDepositProcedure,
			connect.WithSchema(walletServiceCreateSidechainDepositMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// walletServiceClient implements WalletServiceClient.
type walletServiceClient struct {
	sendTransaction        *connect.Client[v1.SendTransactionRequest, v1.SendTransactionResponse]
	getBalance             *connect.Client[emptypb.Empty, v1.GetBalanceResponse]
	getNewAddress          *connect.Client[emptypb.Empty, v1.GetNewAddressResponse]
	listTransactions       *connect.Client[emptypb.Empty, v1.ListTransactionsResponse]
	listSidechainDeposits  *connect.Client[v1.ListSidechainDepositsRequest, v1.ListSidechainDepositsResponse]
	createSidechainDeposit *connect.Client[v1.CreateSidechainDepositRequest, v1.CreateSidechainDepositResponse]
}

// SendTransaction calls wallet.v1.WalletService.SendTransaction.
func (c *walletServiceClient) SendTransaction(ctx context.Context, req *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error) {
	return c.sendTransaction.CallUnary(ctx, req)
}

// GetBalance calls wallet.v1.WalletService.GetBalance.
func (c *walletServiceClient) GetBalance(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error) {
	return c.getBalance.CallUnary(ctx, req)
}

// GetNewAddress calls wallet.v1.WalletService.GetNewAddress.
func (c *walletServiceClient) GetNewAddress(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error) {
	return c.getNewAddress.CallUnary(ctx, req)
}

// ListTransactions calls wallet.v1.WalletService.ListTransactions.
func (c *walletServiceClient) ListTransactions(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// ListSidechainDeposits calls wallet.v1.WalletService.ListSidechainDeposits.
func (c *walletServiceClient) ListSidechainDeposits(ctx context.Context, req *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error) {
	return c.listSidechainDeposits.CallUnary(ctx, req)
}

// CreateSidechainDeposit calls wallet.v1.WalletService.CreateSidechainDeposit.
func (c *walletServiceClient) CreateSidechainDeposit(ctx context.Context, req *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error) {
	return c.createSidechainDeposit.CallUnary(ctx, req)
}

// WalletServiceHandler is an implementation of the wallet.v1.WalletService service.
type WalletServiceHandler interface {
	SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error)
	GetBalance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error)
	// Problem: deriving nilly willy here is potentially problematic. There's no way of listing
	// out unused addresses, so we risk crossing the sync gap.
	GetNewAddress(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error)
	ListTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error)
	ListSidechainDeposits(context.Context, *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error)
	CreateSidechainDeposit(context.Context, *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error)
}

// NewWalletServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWalletServiceHandler(svc WalletServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	walletServiceSendTransactionHandler := connect.NewUnaryHandler(
		WalletServiceSendTransactionProcedure,
		svc.SendTransaction,
		connect.WithSchema(walletServiceSendTransactionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetBalanceHandler := connect.NewUnaryHandler(
		WalletServiceGetBalanceProcedure,
		svc.GetBalance,
		connect.WithSchema(walletServiceGetBalanceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetNewAddressHandler := connect.NewUnaryHandler(
		WalletServiceGetNewAddressProcedure,
		svc.GetNewAddress,
		connect.WithSchema(walletServiceGetNewAddressMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceListTransactionsHandler := connect.NewUnaryHandler(
		WalletServiceListTransactionsProcedure,
		svc.ListTransactions,
		connect.WithSchema(walletServiceListTransactionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceListSidechainDepositsHandler := connect.NewUnaryHandler(
		WalletServiceListSidechainDepositsProcedure,
		svc.ListSidechainDeposits,
		connect.WithSchema(walletServiceListSidechainDepositsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreateSidechainDepositHandler := connect.NewUnaryHandler(
		WalletServiceCreateSidechainDepositProcedure,
		svc.CreateSidechainDeposit,
		connect.WithSchema(walletServiceCreateSidechainDepositMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/wallet.v1.WalletService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WalletServiceSendTransactionProcedure:
			walletServiceSendTransactionHandler.ServeHTTP(w, r)
		case WalletServiceGetBalanceProcedure:
			walletServiceGetBalanceHandler.ServeHTTP(w, r)
		case WalletServiceGetNewAddressProcedure:
			walletServiceGetNewAddressHandler.ServeHTTP(w, r)
		case WalletServiceListTransactionsProcedure:
			walletServiceListTransactionsHandler.ServeHTTP(w, r)
		case WalletServiceListSidechainDepositsProcedure:
			walletServiceListSidechainDepositsHandler.ServeHTTP(w, r)
		case WalletServiceCreateSidechainDepositProcedure:
			walletServiceCreateSidechainDepositHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWalletServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWalletServiceHandler struct{}

func (UnimplementedWalletServiceHandler) SendTransaction(context.Context, *connect.Request[v1.SendTransactionRequest]) (*connect.Response[v1.SendTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.SendTransaction is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetBalance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.GetBalance is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetNewAddress(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNewAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.GetNewAddress is not implemented"))
}

func (UnimplementedWalletServiceHandler) ListTransactions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.ListTransactions is not implemented"))
}

func (UnimplementedWalletServiceHandler) ListSidechainDeposits(context.Context, *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.ListSidechainDeposits is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateSidechainDeposit(context.Context, *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wallet.v1.WalletService.CreateSidechainDeposit is not implemented"))
}
