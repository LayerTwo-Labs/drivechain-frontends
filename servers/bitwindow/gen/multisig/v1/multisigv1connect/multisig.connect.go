// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: multisig/v1/multisig.proto

package multisigv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/servers/bitwindow/gen/multisig/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MultisigServiceName is the fully-qualified name of the MultisigService service.
	MultisigServiceName = "multisig.v1.MultisigService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MultisigServiceAddMultisigAddressProcedure is the fully-qualified name of the MultisigService's
	// AddMultisigAddress RPC.
	MultisigServiceAddMultisigAddressProcedure = "/multisig.v1.MultisigService/AddMultisigAddress"
	// MultisigServiceImportAddressProcedure is the fully-qualified name of the MultisigService's
	// ImportAddress RPC.
	MultisigServiceImportAddressProcedure = "/multisig.v1.MultisigService/ImportAddress"
	// MultisigServiceGetAddressInfoProcedure is the fully-qualified name of the MultisigService's
	// GetAddressInfo RPC.
	MultisigServiceGetAddressInfoProcedure = "/multisig.v1.MultisigService/GetAddressInfo"
	// MultisigServiceListUnspentProcedure is the fully-qualified name of the MultisigService's
	// ListUnspent RPC.
	MultisigServiceListUnspentProcedure = "/multisig.v1.MultisigService/ListUnspent"
	// MultisigServiceListAddressGroupingsProcedure is the fully-qualified name of the MultisigService's
	// ListAddressGroupings RPC.
	MultisigServiceListAddressGroupingsProcedure = "/multisig.v1.MultisigService/ListAddressGroupings"
	// MultisigServiceCreateRawTransactionProcedure is the fully-qualified name of the MultisigService's
	// CreateRawTransaction RPC.
	MultisigServiceCreateRawTransactionProcedure = "/multisig.v1.MultisigService/CreateRawTransaction"
	// MultisigServiceCreatePsbtProcedure is the fully-qualified name of the MultisigService's
	// CreatePsbt RPC.
	MultisigServiceCreatePsbtProcedure = "/multisig.v1.MultisigService/CreatePsbt"
	// MultisigServiceWalletCreateFundedPsbtProcedure is the fully-qualified name of the
	// MultisigService's WalletCreateFundedPsbt RPC.
	MultisigServiceWalletCreateFundedPsbtProcedure = "/multisig.v1.MultisigService/WalletCreateFundedPsbt"
	// MultisigServiceDecodePsbtProcedure is the fully-qualified name of the MultisigService's
	// DecodePsbt RPC.
	MultisigServiceDecodePsbtProcedure = "/multisig.v1.MultisigService/DecodePsbt"
	// MultisigServiceAnalyzePsbtProcedure is the fully-qualified name of the MultisigService's
	// AnalyzePsbt RPC.
	MultisigServiceAnalyzePsbtProcedure = "/multisig.v1.MultisigService/AnalyzePsbt"
	// MultisigServiceWalletProcessPsbtProcedure is the fully-qualified name of the MultisigService's
	// WalletProcessPsbt RPC.
	MultisigServiceWalletProcessPsbtProcedure = "/multisig.v1.MultisigService/WalletProcessPsbt"
	// MultisigServiceCombinePsbtProcedure is the fully-qualified name of the MultisigService's
	// CombinePsbt RPC.
	MultisigServiceCombinePsbtProcedure = "/multisig.v1.MultisigService/CombinePsbt"
	// MultisigServiceFinalizePsbtProcedure is the fully-qualified name of the MultisigService's
	// FinalizePsbt RPC.
	MultisigServiceFinalizePsbtProcedure = "/multisig.v1.MultisigService/FinalizePsbt"
	// MultisigServiceUtxoUpdatePsbtProcedure is the fully-qualified name of the MultisigService's
	// UtxoUpdatePsbt RPC.
	MultisigServiceUtxoUpdatePsbtProcedure = "/multisig.v1.MultisigService/UtxoUpdatePsbt"
	// MultisigServiceJoinPsbtsProcedure is the fully-qualified name of the MultisigService's JoinPsbts
	// RPC.
	MultisigServiceJoinPsbtsProcedure = "/multisig.v1.MultisigService/JoinPsbts"
	// MultisigServiceSignRawTransactionWithWalletProcedure is the fully-qualified name of the
	// MultisigService's SignRawTransactionWithWallet RPC.
	MultisigServiceSignRawTransactionWithWalletProcedure = "/multisig.v1.MultisigService/SignRawTransactionWithWallet"
	// MultisigServiceSendRawTransactionProcedure is the fully-qualified name of the MultisigService's
	// SendRawTransaction RPC.
	MultisigServiceSendRawTransactionProcedure = "/multisig.v1.MultisigService/SendRawTransaction"
	// MultisigServiceTestMempoolAcceptProcedure is the fully-qualified name of the MultisigService's
	// TestMempoolAccept RPC.
	MultisigServiceTestMempoolAcceptProcedure = "/multisig.v1.MultisigService/TestMempoolAccept"
	// MultisigServiceGetTransactionProcedure is the fully-qualified name of the MultisigService's
	// GetTransaction RPC.
	MultisigServiceGetTransactionProcedure = "/multisig.v1.MultisigService/GetTransaction"
)

// MultisigServiceClient is a client for the multisig.v1.MultisigService service.
type MultisigServiceClient interface {
	// Address management
	AddMultisigAddress(context.Context, *connect.Request[v1.AddMultisigAddressRequest]) (*connect.Response[v1.AddMultisigAddressResponse], error)
	ImportAddress(context.Context, *connect.Request[v1.ImportAddressRequest]) (*connect.Response[v1.ImportAddressResponse], error)
	GetAddressInfo(context.Context, *connect.Request[v1.GetAddressInfoRequest]) (*connect.Response[v1.GetAddressInfoResponse], error)
	// UTXO management
	ListUnspent(context.Context, *connect.Request[v1.ListUnspentRequest]) (*connect.Response[v1.ListUnspentResponse], error)
	ListAddressGroupings(context.Context, *connect.Request[v1.ListAddressGroupingsRequest]) (*connect.Response[v1.ListAddressGroupingsResponse], error)
	// Transaction creation
	CreateRawTransaction(context.Context, *connect.Request[v1.CreateRawTransactionRequest]) (*connect.Response[v1.CreateRawTransactionResponse], error)
	CreatePsbt(context.Context, *connect.Request[v1.CreatePsbtRequest]) (*connect.Response[v1.CreatePsbtResponse], error)
	WalletCreateFundedPsbt(context.Context, *connect.Request[v1.WalletCreateFundedPsbtRequest]) (*connect.Response[v1.WalletCreateFundedPsbtResponse], error)
	// PSBT handling
	DecodePsbt(context.Context, *connect.Request[v1.DecodePsbtRequest]) (*connect.Response[v1.DecodePsbtResponse], error)
	AnalyzePsbt(context.Context, *connect.Request[v1.AnalyzePsbtRequest]) (*connect.Response[v1.AnalyzePsbtResponse], error)
	WalletProcessPsbt(context.Context, *connect.Request[v1.WalletProcessPsbtRequest]) (*connect.Response[v1.WalletProcessPsbtResponse], error)
	CombinePsbt(context.Context, *connect.Request[v1.CombinePsbtRequest]) (*connect.Response[v1.CombinePsbtResponse], error)
	FinalizePsbt(context.Context, *connect.Request[v1.FinalizePsbtRequest]) (*connect.Response[v1.FinalizePsbtResponse], error)
	UtxoUpdatePsbt(context.Context, *connect.Request[v1.UtxoUpdatePsbtRequest]) (*connect.Response[v1.UtxoUpdatePsbtResponse], error)
	JoinPsbts(context.Context, *connect.Request[v1.JoinPsbtsRequest]) (*connect.Response[v1.JoinPsbtsResponse], error)
	// Transaction signing
	SignRawTransactionWithWallet(context.Context, *connect.Request[v1.SignRawTransactionWithWalletRequest]) (*connect.Response[v1.SignRawTransactionWithWalletResponse], error)
	// Transaction misc
	SendRawTransaction(context.Context, *connect.Request[v1.SendRawTransactionRequest]) (*connect.Response[v1.SendRawTransactionResponse], error)
	TestMempoolAccept(context.Context, *connect.Request[v1.TestMempoolAcceptRequest]) (*connect.Response[v1.TestMempoolAcceptResponse], error)
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
}

// NewMultisigServiceClient constructs a client for the multisig.v1.MultisigService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMultisigServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MultisigServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	multisigServiceMethods := v1.File_multisig_v1_multisig_proto.Services().ByName("MultisigService").Methods()
	return &multisigServiceClient{
		addMultisigAddress: connect.NewClient[v1.AddMultisigAddressRequest, v1.AddMultisigAddressResponse](
			httpClient,
			baseURL+MultisigServiceAddMultisigAddressProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("AddMultisigAddress")),
			connect.WithClientOptions(opts...),
		),
		importAddress: connect.NewClient[v1.ImportAddressRequest, v1.ImportAddressResponse](
			httpClient,
			baseURL+MultisigServiceImportAddressProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("ImportAddress")),
			connect.WithClientOptions(opts...),
		),
		getAddressInfo: connect.NewClient[v1.GetAddressInfoRequest, v1.GetAddressInfoResponse](
			httpClient,
			baseURL+MultisigServiceGetAddressInfoProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("GetAddressInfo")),
			connect.WithClientOptions(opts...),
		),
		listUnspent: connect.NewClient[v1.ListUnspentRequest, v1.ListUnspentResponse](
			httpClient,
			baseURL+MultisigServiceListUnspentProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("ListUnspent")),
			connect.WithClientOptions(opts...),
		),
		listAddressGroupings: connect.NewClient[v1.ListAddressGroupingsRequest, v1.ListAddressGroupingsResponse](
			httpClient,
			baseURL+MultisigServiceListAddressGroupingsProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("ListAddressGroupings")),
			connect.WithClientOptions(opts...),
		),
		createRawTransaction: connect.NewClient[v1.CreateRawTransactionRequest, v1.CreateRawTransactionResponse](
			httpClient,
			baseURL+MultisigServiceCreateRawTransactionProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("CreateRawTransaction")),
			connect.WithClientOptions(opts...),
		),
		createPsbt: connect.NewClient[v1.CreatePsbtRequest, v1.CreatePsbtResponse](
			httpClient,
			baseURL+MultisigServiceCreatePsbtProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("CreatePsbt")),
			connect.WithClientOptions(opts...),
		),
		walletCreateFundedPsbt: connect.NewClient[v1.WalletCreateFundedPsbtRequest, v1.WalletCreateFundedPsbtResponse](
			httpClient,
			baseURL+MultisigServiceWalletCreateFundedPsbtProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("WalletCreateFundedPsbt")),
			connect.WithClientOptions(opts...),
		),
		decodePsbt: connect.NewClient[v1.DecodePsbtRequest, v1.DecodePsbtResponse](
			httpClient,
			baseURL+MultisigServiceDecodePsbtProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("DecodePsbt")),
			connect.WithClientOptions(opts...),
		),
		analyzePsbt: connect.NewClient[v1.AnalyzePsbtRequest, v1.AnalyzePsbtResponse](
			httpClient,
			baseURL+MultisigServiceAnalyzePsbtProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("AnalyzePsbt")),
			connect.WithClientOptions(opts...),
		),
		walletProcessPsbt: connect.NewClient[v1.WalletProcessPsbtRequest, v1.WalletProcessPsbtResponse](
			httpClient,
			baseURL+MultisigServiceWalletProcessPsbtProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("WalletProcessPsbt")),
			connect.WithClientOptions(opts...),
		),
		combinePsbt: connect.NewClient[v1.CombinePsbtRequest, v1.CombinePsbtResponse](
			httpClient,
			baseURL+MultisigServiceCombinePsbtProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("CombinePsbt")),
			connect.WithClientOptions(opts...),
		),
		finalizePsbt: connect.NewClient[v1.FinalizePsbtRequest, v1.FinalizePsbtResponse](
			httpClient,
			baseURL+MultisigServiceFinalizePsbtProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("FinalizePsbt")),
			connect.WithClientOptions(opts...),
		),
		utxoUpdatePsbt: connect.NewClient[v1.UtxoUpdatePsbtRequest, v1.UtxoUpdatePsbtResponse](
			httpClient,
			baseURL+MultisigServiceUtxoUpdatePsbtProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("UtxoUpdatePsbt")),
			connect.WithClientOptions(opts...),
		),
		joinPsbts: connect.NewClient[v1.JoinPsbtsRequest, v1.JoinPsbtsResponse](
			httpClient,
			baseURL+MultisigServiceJoinPsbtsProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("JoinPsbts")),
			connect.WithClientOptions(opts...),
		),
		signRawTransactionWithWallet: connect.NewClient[v1.SignRawTransactionWithWalletRequest, v1.SignRawTransactionWithWalletResponse](
			httpClient,
			baseURL+MultisigServiceSignRawTransactionWithWalletProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("SignRawTransactionWithWallet")),
			connect.WithClientOptions(opts...),
		),
		sendRawTransaction: connect.NewClient[v1.SendRawTransactionRequest, v1.SendRawTransactionResponse](
			httpClient,
			baseURL+MultisigServiceSendRawTransactionProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("SendRawTransaction")),
			connect.WithClientOptions(opts...),
		),
		testMempoolAccept: connect.NewClient[v1.TestMempoolAcceptRequest, v1.TestMempoolAcceptResponse](
			httpClient,
			baseURL+MultisigServiceTestMempoolAcceptProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("TestMempoolAccept")),
			connect.WithClientOptions(opts...),
		),
		getTransaction: connect.NewClient[v1.GetTransactionRequest, v1.GetTransactionResponse](
			httpClient,
			baseURL+MultisigServiceGetTransactionProcedure,
			connect.WithSchema(multisigServiceMethods.ByName("GetTransaction")),
			connect.WithClientOptions(opts...),
		),
	}
}

// multisigServiceClient implements MultisigServiceClient.
type multisigServiceClient struct {
	addMultisigAddress           *connect.Client[v1.AddMultisigAddressRequest, v1.AddMultisigAddressResponse]
	importAddress                *connect.Client[v1.ImportAddressRequest, v1.ImportAddressResponse]
	getAddressInfo               *connect.Client[v1.GetAddressInfoRequest, v1.GetAddressInfoResponse]
	listUnspent                  *connect.Client[v1.ListUnspentRequest, v1.ListUnspentResponse]
	listAddressGroupings         *connect.Client[v1.ListAddressGroupingsRequest, v1.ListAddressGroupingsResponse]
	createRawTransaction         *connect.Client[v1.CreateRawTransactionRequest, v1.CreateRawTransactionResponse]
	createPsbt                   *connect.Client[v1.CreatePsbtRequest, v1.CreatePsbtResponse]
	walletCreateFundedPsbt       *connect.Client[v1.WalletCreateFundedPsbtRequest, v1.WalletCreateFundedPsbtResponse]
	decodePsbt                   *connect.Client[v1.DecodePsbtRequest, v1.DecodePsbtResponse]
	analyzePsbt                  *connect.Client[v1.AnalyzePsbtRequest, v1.AnalyzePsbtResponse]
	walletProcessPsbt            *connect.Client[v1.WalletProcessPsbtRequest, v1.WalletProcessPsbtResponse]
	combinePsbt                  *connect.Client[v1.CombinePsbtRequest, v1.CombinePsbtResponse]
	finalizePsbt                 *connect.Client[v1.FinalizePsbtRequest, v1.FinalizePsbtResponse]
	utxoUpdatePsbt               *connect.Client[v1.UtxoUpdatePsbtRequest, v1.UtxoUpdatePsbtResponse]
	joinPsbts                    *connect.Client[v1.JoinPsbtsRequest, v1.JoinPsbtsResponse]
	signRawTransactionWithWallet *connect.Client[v1.SignRawTransactionWithWalletRequest, v1.SignRawTransactionWithWalletResponse]
	sendRawTransaction           *connect.Client[v1.SendRawTransactionRequest, v1.SendRawTransactionResponse]
	testMempoolAccept            *connect.Client[v1.TestMempoolAcceptRequest, v1.TestMempoolAcceptResponse]
	getTransaction               *connect.Client[v1.GetTransactionRequest, v1.GetTransactionResponse]
}

// AddMultisigAddress calls multisig.v1.MultisigService.AddMultisigAddress.
func (c *multisigServiceClient) AddMultisigAddress(ctx context.Context, req *connect.Request[v1.AddMultisigAddressRequest]) (*connect.Response[v1.AddMultisigAddressResponse], error) {
	return c.addMultisigAddress.CallUnary(ctx, req)
}

// ImportAddress calls multisig.v1.MultisigService.ImportAddress.
func (c *multisigServiceClient) ImportAddress(ctx context.Context, req *connect.Request[v1.ImportAddressRequest]) (*connect.Response[v1.ImportAddressResponse], error) {
	return c.importAddress.CallUnary(ctx, req)
}

// GetAddressInfo calls multisig.v1.MultisigService.GetAddressInfo.
func (c *multisigServiceClient) GetAddressInfo(ctx context.Context, req *connect.Request[v1.GetAddressInfoRequest]) (*connect.Response[v1.GetAddressInfoResponse], error) {
	return c.getAddressInfo.CallUnary(ctx, req)
}

// ListUnspent calls multisig.v1.MultisigService.ListUnspent.
func (c *multisigServiceClient) ListUnspent(ctx context.Context, req *connect.Request[v1.ListUnspentRequest]) (*connect.Response[v1.ListUnspentResponse], error) {
	return c.listUnspent.CallUnary(ctx, req)
}

// ListAddressGroupings calls multisig.v1.MultisigService.ListAddressGroupings.
func (c *multisigServiceClient) ListAddressGroupings(ctx context.Context, req *connect.Request[v1.ListAddressGroupingsRequest]) (*connect.Response[v1.ListAddressGroupingsResponse], error) {
	return c.listAddressGroupings.CallUnary(ctx, req)
}

// CreateRawTransaction calls multisig.v1.MultisigService.CreateRawTransaction.
func (c *multisigServiceClient) CreateRawTransaction(ctx context.Context, req *connect.Request[v1.CreateRawTransactionRequest]) (*connect.Response[v1.CreateRawTransactionResponse], error) {
	return c.createRawTransaction.CallUnary(ctx, req)
}

// CreatePsbt calls multisig.v1.MultisigService.CreatePsbt.
func (c *multisigServiceClient) CreatePsbt(ctx context.Context, req *connect.Request[v1.CreatePsbtRequest]) (*connect.Response[v1.CreatePsbtResponse], error) {
	return c.createPsbt.CallUnary(ctx, req)
}

// WalletCreateFundedPsbt calls multisig.v1.MultisigService.WalletCreateFundedPsbt.
func (c *multisigServiceClient) WalletCreateFundedPsbt(ctx context.Context, req *connect.Request[v1.WalletCreateFundedPsbtRequest]) (*connect.Response[v1.WalletCreateFundedPsbtResponse], error) {
	return c.walletCreateFundedPsbt.CallUnary(ctx, req)
}

// DecodePsbt calls multisig.v1.MultisigService.DecodePsbt.
func (c *multisigServiceClient) DecodePsbt(ctx context.Context, req *connect.Request[v1.DecodePsbtRequest]) (*connect.Response[v1.DecodePsbtResponse], error) {
	return c.decodePsbt.CallUnary(ctx, req)
}

// AnalyzePsbt calls multisig.v1.MultisigService.AnalyzePsbt.
func (c *multisigServiceClient) AnalyzePsbt(ctx context.Context, req *connect.Request[v1.AnalyzePsbtRequest]) (*connect.Response[v1.AnalyzePsbtResponse], error) {
	return c.analyzePsbt.CallUnary(ctx, req)
}

// WalletProcessPsbt calls multisig.v1.MultisigService.WalletProcessPsbt.
func (c *multisigServiceClient) WalletProcessPsbt(ctx context.Context, req *connect.Request[v1.WalletProcessPsbtRequest]) (*connect.Response[v1.WalletProcessPsbtResponse], error) {
	return c.walletProcessPsbt.CallUnary(ctx, req)
}

// CombinePsbt calls multisig.v1.MultisigService.CombinePsbt.
func (c *multisigServiceClient) CombinePsbt(ctx context.Context, req *connect.Request[v1.CombinePsbtRequest]) (*connect.Response[v1.CombinePsbtResponse], error) {
	return c.combinePsbt.CallUnary(ctx, req)
}

// FinalizePsbt calls multisig.v1.MultisigService.FinalizePsbt.
func (c *multisigServiceClient) FinalizePsbt(ctx context.Context, req *connect.Request[v1.FinalizePsbtRequest]) (*connect.Response[v1.FinalizePsbtResponse], error) {
	return c.finalizePsbt.CallUnary(ctx, req)
}

// UtxoUpdatePsbt calls multisig.v1.MultisigService.UtxoUpdatePsbt.
func (c *multisigServiceClient) UtxoUpdatePsbt(ctx context.Context, req *connect.Request[v1.UtxoUpdatePsbtRequest]) (*connect.Response[v1.UtxoUpdatePsbtResponse], error) {
	return c.utxoUpdatePsbt.CallUnary(ctx, req)
}

// JoinPsbts calls multisig.v1.MultisigService.JoinPsbts.
func (c *multisigServiceClient) JoinPsbts(ctx context.Context, req *connect.Request[v1.JoinPsbtsRequest]) (*connect.Response[v1.JoinPsbtsResponse], error) {
	return c.joinPsbts.CallUnary(ctx, req)
}

// SignRawTransactionWithWallet calls multisig.v1.MultisigService.SignRawTransactionWithWallet.
func (c *multisigServiceClient) SignRawTransactionWithWallet(ctx context.Context, req *connect.Request[v1.SignRawTransactionWithWalletRequest]) (*connect.Response[v1.SignRawTransactionWithWalletResponse], error) {
	return c.signRawTransactionWithWallet.CallUnary(ctx, req)
}

// SendRawTransaction calls multisig.v1.MultisigService.SendRawTransaction.
func (c *multisigServiceClient) SendRawTransaction(ctx context.Context, req *connect.Request[v1.SendRawTransactionRequest]) (*connect.Response[v1.SendRawTransactionResponse], error) {
	return c.sendRawTransaction.CallUnary(ctx, req)
}

// TestMempoolAccept calls multisig.v1.MultisigService.TestMempoolAccept.
func (c *multisigServiceClient) TestMempoolAccept(ctx context.Context, req *connect.Request[v1.TestMempoolAcceptRequest]) (*connect.Response[v1.TestMempoolAcceptResponse], error) {
	return c.testMempoolAccept.CallUnary(ctx, req)
}

// GetTransaction calls multisig.v1.MultisigService.GetTransaction.
func (c *multisigServiceClient) GetTransaction(ctx context.Context, req *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return c.getTransaction.CallUnary(ctx, req)
}

// MultisigServiceHandler is an implementation of the multisig.v1.MultisigService service.
type MultisigServiceHandler interface {
	// Address management
	AddMultisigAddress(context.Context, *connect.Request[v1.AddMultisigAddressRequest]) (*connect.Response[v1.AddMultisigAddressResponse], error)
	ImportAddress(context.Context, *connect.Request[v1.ImportAddressRequest]) (*connect.Response[v1.ImportAddressResponse], error)
	GetAddressInfo(context.Context, *connect.Request[v1.GetAddressInfoRequest]) (*connect.Response[v1.GetAddressInfoResponse], error)
	// UTXO management
	ListUnspent(context.Context, *connect.Request[v1.ListUnspentRequest]) (*connect.Response[v1.ListUnspentResponse], error)
	ListAddressGroupings(context.Context, *connect.Request[v1.ListAddressGroupingsRequest]) (*connect.Response[v1.ListAddressGroupingsResponse], error)
	// Transaction creation
	CreateRawTransaction(context.Context, *connect.Request[v1.CreateRawTransactionRequest]) (*connect.Response[v1.CreateRawTransactionResponse], error)
	CreatePsbt(context.Context, *connect.Request[v1.CreatePsbtRequest]) (*connect.Response[v1.CreatePsbtResponse], error)
	WalletCreateFundedPsbt(context.Context, *connect.Request[v1.WalletCreateFundedPsbtRequest]) (*connect.Response[v1.WalletCreateFundedPsbtResponse], error)
	// PSBT handling
	DecodePsbt(context.Context, *connect.Request[v1.DecodePsbtRequest]) (*connect.Response[v1.DecodePsbtResponse], error)
	AnalyzePsbt(context.Context, *connect.Request[v1.AnalyzePsbtRequest]) (*connect.Response[v1.AnalyzePsbtResponse], error)
	WalletProcessPsbt(context.Context, *connect.Request[v1.WalletProcessPsbtRequest]) (*connect.Response[v1.WalletProcessPsbtResponse], error)
	CombinePsbt(context.Context, *connect.Request[v1.CombinePsbtRequest]) (*connect.Response[v1.CombinePsbtResponse], error)
	FinalizePsbt(context.Context, *connect.Request[v1.FinalizePsbtRequest]) (*connect.Response[v1.FinalizePsbtResponse], error)
	UtxoUpdatePsbt(context.Context, *connect.Request[v1.UtxoUpdatePsbtRequest]) (*connect.Response[v1.UtxoUpdatePsbtResponse], error)
	JoinPsbts(context.Context, *connect.Request[v1.JoinPsbtsRequest]) (*connect.Response[v1.JoinPsbtsResponse], error)
	// Transaction signing
	SignRawTransactionWithWallet(context.Context, *connect.Request[v1.SignRawTransactionWithWalletRequest]) (*connect.Response[v1.SignRawTransactionWithWalletResponse], error)
	// Transaction misc
	SendRawTransaction(context.Context, *connect.Request[v1.SendRawTransactionRequest]) (*connect.Response[v1.SendRawTransactionResponse], error)
	TestMempoolAccept(context.Context, *connect.Request[v1.TestMempoolAcceptRequest]) (*connect.Response[v1.TestMempoolAcceptResponse], error)
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
}

// NewMultisigServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMultisigServiceHandler(svc MultisigServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	multisigServiceMethods := v1.File_multisig_v1_multisig_proto.Services().ByName("MultisigService").Methods()
	multisigServiceAddMultisigAddressHandler := connect.NewUnaryHandler(
		MultisigServiceAddMultisigAddressProcedure,
		svc.AddMultisigAddress,
		connect.WithSchema(multisigServiceMethods.ByName("AddMultisigAddress")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceImportAddressHandler := connect.NewUnaryHandler(
		MultisigServiceImportAddressProcedure,
		svc.ImportAddress,
		connect.WithSchema(multisigServiceMethods.ByName("ImportAddress")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceGetAddressInfoHandler := connect.NewUnaryHandler(
		MultisigServiceGetAddressInfoProcedure,
		svc.GetAddressInfo,
		connect.WithSchema(multisigServiceMethods.ByName("GetAddressInfo")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceListUnspentHandler := connect.NewUnaryHandler(
		MultisigServiceListUnspentProcedure,
		svc.ListUnspent,
		connect.WithSchema(multisigServiceMethods.ByName("ListUnspent")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceListAddressGroupingsHandler := connect.NewUnaryHandler(
		MultisigServiceListAddressGroupingsProcedure,
		svc.ListAddressGroupings,
		connect.WithSchema(multisigServiceMethods.ByName("ListAddressGroupings")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceCreateRawTransactionHandler := connect.NewUnaryHandler(
		MultisigServiceCreateRawTransactionProcedure,
		svc.CreateRawTransaction,
		connect.WithSchema(multisigServiceMethods.ByName("CreateRawTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceCreatePsbtHandler := connect.NewUnaryHandler(
		MultisigServiceCreatePsbtProcedure,
		svc.CreatePsbt,
		connect.WithSchema(multisigServiceMethods.ByName("CreatePsbt")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceWalletCreateFundedPsbtHandler := connect.NewUnaryHandler(
		MultisigServiceWalletCreateFundedPsbtProcedure,
		svc.WalletCreateFundedPsbt,
		connect.WithSchema(multisigServiceMethods.ByName("WalletCreateFundedPsbt")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceDecodePsbtHandler := connect.NewUnaryHandler(
		MultisigServiceDecodePsbtProcedure,
		svc.DecodePsbt,
		connect.WithSchema(multisigServiceMethods.ByName("DecodePsbt")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceAnalyzePsbtHandler := connect.NewUnaryHandler(
		MultisigServiceAnalyzePsbtProcedure,
		svc.AnalyzePsbt,
		connect.WithSchema(multisigServiceMethods.ByName("AnalyzePsbt")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceWalletProcessPsbtHandler := connect.NewUnaryHandler(
		MultisigServiceWalletProcessPsbtProcedure,
		svc.WalletProcessPsbt,
		connect.WithSchema(multisigServiceMethods.ByName("WalletProcessPsbt")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceCombinePsbtHandler := connect.NewUnaryHandler(
		MultisigServiceCombinePsbtProcedure,
		svc.CombinePsbt,
		connect.WithSchema(multisigServiceMethods.ByName("CombinePsbt")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceFinalizePsbtHandler := connect.NewUnaryHandler(
		MultisigServiceFinalizePsbtProcedure,
		svc.FinalizePsbt,
		connect.WithSchema(multisigServiceMethods.ByName("FinalizePsbt")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceUtxoUpdatePsbtHandler := connect.NewUnaryHandler(
		MultisigServiceUtxoUpdatePsbtProcedure,
		svc.UtxoUpdatePsbt,
		connect.WithSchema(multisigServiceMethods.ByName("UtxoUpdatePsbt")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceJoinPsbtsHandler := connect.NewUnaryHandler(
		MultisigServiceJoinPsbtsProcedure,
		svc.JoinPsbts,
		connect.WithSchema(multisigServiceMethods.ByName("JoinPsbts")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceSignRawTransactionWithWalletHandler := connect.NewUnaryHandler(
		MultisigServiceSignRawTransactionWithWalletProcedure,
		svc.SignRawTransactionWithWallet,
		connect.WithSchema(multisigServiceMethods.ByName("SignRawTransactionWithWallet")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceSendRawTransactionHandler := connect.NewUnaryHandler(
		MultisigServiceSendRawTransactionProcedure,
		svc.SendRawTransaction,
		connect.WithSchema(multisigServiceMethods.ByName("SendRawTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceTestMempoolAcceptHandler := connect.NewUnaryHandler(
		MultisigServiceTestMempoolAcceptProcedure,
		svc.TestMempoolAccept,
		connect.WithSchema(multisigServiceMethods.ByName("TestMempoolAccept")),
		connect.WithHandlerOptions(opts...),
	)
	multisigServiceGetTransactionHandler := connect.NewUnaryHandler(
		MultisigServiceGetTransactionProcedure,
		svc.GetTransaction,
		connect.WithSchema(multisigServiceMethods.ByName("GetTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	return "/multisig.v1.MultisigService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MultisigServiceAddMultisigAddressProcedure:
			multisigServiceAddMultisigAddressHandler.ServeHTTP(w, r)
		case MultisigServiceImportAddressProcedure:
			multisigServiceImportAddressHandler.ServeHTTP(w, r)
		case MultisigServiceGetAddressInfoProcedure:
			multisigServiceGetAddressInfoHandler.ServeHTTP(w, r)
		case MultisigServiceListUnspentProcedure:
			multisigServiceListUnspentHandler.ServeHTTP(w, r)
		case MultisigServiceListAddressGroupingsProcedure:
			multisigServiceListAddressGroupingsHandler.ServeHTTP(w, r)
		case MultisigServiceCreateRawTransactionProcedure:
			multisigServiceCreateRawTransactionHandler.ServeHTTP(w, r)
		case MultisigServiceCreatePsbtProcedure:
			multisigServiceCreatePsbtHandler.ServeHTTP(w, r)
		case MultisigServiceWalletCreateFundedPsbtProcedure:
			multisigServiceWalletCreateFundedPsbtHandler.ServeHTTP(w, r)
		case MultisigServiceDecodePsbtProcedure:
			multisigServiceDecodePsbtHandler.ServeHTTP(w, r)
		case MultisigServiceAnalyzePsbtProcedure:
			multisigServiceAnalyzePsbtHandler.ServeHTTP(w, r)
		case MultisigServiceWalletProcessPsbtProcedure:
			multisigServiceWalletProcessPsbtHandler.ServeHTTP(w, r)
		case MultisigServiceCombinePsbtProcedure:
			multisigServiceCombinePsbtHandler.ServeHTTP(w, r)
		case MultisigServiceFinalizePsbtProcedure:
			multisigServiceFinalizePsbtHandler.ServeHTTP(w, r)
		case MultisigServiceUtxoUpdatePsbtProcedure:
			multisigServiceUtxoUpdatePsbtHandler.ServeHTTP(w, r)
		case MultisigServiceJoinPsbtsProcedure:
			multisigServiceJoinPsbtsHandler.ServeHTTP(w, r)
		case MultisigServiceSignRawTransactionWithWalletProcedure:
			multisigServiceSignRawTransactionWithWalletHandler.ServeHTTP(w, r)
		case MultisigServiceSendRawTransactionProcedure:
			multisigServiceSendRawTransactionHandler.ServeHTTP(w, r)
		case MultisigServiceTestMempoolAcceptProcedure:
			multisigServiceTestMempoolAcceptHandler.ServeHTTP(w, r)
		case MultisigServiceGetTransactionProcedure:
			multisigServiceGetTransactionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMultisigServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMultisigServiceHandler struct{}

func (UnimplementedMultisigServiceHandler) AddMultisigAddress(context.Context, *connect.Request[v1.AddMultisigAddressRequest]) (*connect.Response[v1.AddMultisigAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.AddMultisigAddress is not implemented"))
}

func (UnimplementedMultisigServiceHandler) ImportAddress(context.Context, *connect.Request[v1.ImportAddressRequest]) (*connect.Response[v1.ImportAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.ImportAddress is not implemented"))
}

func (UnimplementedMultisigServiceHandler) GetAddressInfo(context.Context, *connect.Request[v1.GetAddressInfoRequest]) (*connect.Response[v1.GetAddressInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.GetAddressInfo is not implemented"))
}

func (UnimplementedMultisigServiceHandler) ListUnspent(context.Context, *connect.Request[v1.ListUnspentRequest]) (*connect.Response[v1.ListUnspentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.ListUnspent is not implemented"))
}

func (UnimplementedMultisigServiceHandler) ListAddressGroupings(context.Context, *connect.Request[v1.ListAddressGroupingsRequest]) (*connect.Response[v1.ListAddressGroupingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.ListAddressGroupings is not implemented"))
}

func (UnimplementedMultisigServiceHandler) CreateRawTransaction(context.Context, *connect.Request[v1.CreateRawTransactionRequest]) (*connect.Response[v1.CreateRawTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.CreateRawTransaction is not implemented"))
}

func (UnimplementedMultisigServiceHandler) CreatePsbt(context.Context, *connect.Request[v1.CreatePsbtRequest]) (*connect.Response[v1.CreatePsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.CreatePsbt is not implemented"))
}

func (UnimplementedMultisigServiceHandler) WalletCreateFundedPsbt(context.Context, *connect.Request[v1.WalletCreateFundedPsbtRequest]) (*connect.Response[v1.WalletCreateFundedPsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.WalletCreateFundedPsbt is not implemented"))
}

func (UnimplementedMultisigServiceHandler) DecodePsbt(context.Context, *connect.Request[v1.DecodePsbtRequest]) (*connect.Response[v1.DecodePsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.DecodePsbt is not implemented"))
}

func (UnimplementedMultisigServiceHandler) AnalyzePsbt(context.Context, *connect.Request[v1.AnalyzePsbtRequest]) (*connect.Response[v1.AnalyzePsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.AnalyzePsbt is not implemented"))
}

func (UnimplementedMultisigServiceHandler) WalletProcessPsbt(context.Context, *connect.Request[v1.WalletProcessPsbtRequest]) (*connect.Response[v1.WalletProcessPsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.WalletProcessPsbt is not implemented"))
}

func (UnimplementedMultisigServiceHandler) CombinePsbt(context.Context, *connect.Request[v1.CombinePsbtRequest]) (*connect.Response[v1.CombinePsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.CombinePsbt is not implemented"))
}

func (UnimplementedMultisigServiceHandler) FinalizePsbt(context.Context, *connect.Request[v1.FinalizePsbtRequest]) (*connect.Response[v1.FinalizePsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.FinalizePsbt is not implemented"))
}

func (UnimplementedMultisigServiceHandler) UtxoUpdatePsbt(context.Context, *connect.Request[v1.UtxoUpdatePsbtRequest]) (*connect.Response[v1.UtxoUpdatePsbtResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.UtxoUpdatePsbt is not implemented"))
}

func (UnimplementedMultisigServiceHandler) JoinPsbts(context.Context, *connect.Request[v1.JoinPsbtsRequest]) (*connect.Response[v1.JoinPsbtsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.JoinPsbts is not implemented"))
}

func (UnimplementedMultisigServiceHandler) SignRawTransactionWithWallet(context.Context, *connect.Request[v1.SignRawTransactionWithWalletRequest]) (*connect.Response[v1.SignRawTransactionWithWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.SignRawTransactionWithWallet is not implemented"))
}

func (UnimplementedMultisigServiceHandler) SendRawTransaction(context.Context, *connect.Request[v1.SendRawTransactionRequest]) (*connect.Response[v1.SendRawTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.SendRawTransaction is not implemented"))
}

func (UnimplementedMultisigServiceHandler) TestMempoolAccept(context.Context, *connect.Request[v1.TestMempoolAcceptRequest]) (*connect.Response[v1.TestMempoolAcceptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.TestMempoolAccept is not implemented"))
}

func (UnimplementedMultisigServiceHandler) GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("multisig.v1.MultisigService.GetTransaction is not implemented"))
}
