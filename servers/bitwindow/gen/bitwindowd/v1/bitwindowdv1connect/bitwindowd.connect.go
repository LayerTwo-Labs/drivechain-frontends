// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bitwindowd/v1/bitwindowd.proto

package bitwindowdv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/servers/bitwindow/gen/bitwindowd/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BitwindowdServiceName is the fully-qualified name of the BitwindowdService service.
	BitwindowdServiceName = "bitwindowd.v1.BitwindowdService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BitwindowdServiceStopProcedure is the fully-qualified name of the BitwindowdService's Stop RPC.
	BitwindowdServiceStopProcedure = "/bitwindowd.v1.BitwindowdService/Stop"
)

// BitwindowdServiceClient is a client for the bitwindowd.v1.BitwindowdService service.
type BitwindowdServiceClient interface {
	Stop(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewBitwindowdServiceClient constructs a client for the bitwindowd.v1.BitwindowdService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBitwindowdServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BitwindowdServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bitwindowdServiceMethods := v1.File_bitwindowd_v1_bitwindowd_proto.Services().ByName("BitwindowdService").Methods()
	return &bitwindowdServiceClient{
		stop: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+BitwindowdServiceStopProcedure,
			connect.WithSchema(bitwindowdServiceMethods.ByName("Stop")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bitwindowdServiceClient implements BitwindowdServiceClient.
type bitwindowdServiceClient struct {
	stop *connect.Client[emptypb.Empty, emptypb.Empty]
}

// Stop calls bitwindowd.v1.BitwindowdService.Stop.
func (c *bitwindowdServiceClient) Stop(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.stop.CallUnary(ctx, req)
}

// BitwindowdServiceHandler is an implementation of the bitwindowd.v1.BitwindowdService service.
type BitwindowdServiceHandler interface {
	Stop(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewBitwindowdServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBitwindowdServiceHandler(svc BitwindowdServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bitwindowdServiceMethods := v1.File_bitwindowd_v1_bitwindowd_proto.Services().ByName("BitwindowdService").Methods()
	bitwindowdServiceStopHandler := connect.NewUnaryHandler(
		BitwindowdServiceStopProcedure,
		svc.Stop,
		connect.WithSchema(bitwindowdServiceMethods.ByName("Stop")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bitwindowd.v1.BitwindowdService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BitwindowdServiceStopProcedure:
			bitwindowdServiceStopHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBitwindowdServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBitwindowdServiceHandler struct{}

func (UnimplementedBitwindowdServiceHandler) Stop(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitwindowd.v1.BitwindowdService.Stop is not implemented"))
}
