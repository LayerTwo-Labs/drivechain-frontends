build-go:
    go build -o ./bin/bitwindowd .

build: build-bdk-cli build-enforcer build-go

clean:
    rm -rf ./bin
    rm -rf bip300301_enforcer.mdb
    rm -rf .crates*
    go clean

lint:
    golangci-lint run ./...

gen: gen-server gen-enforcer

gen-server:
    buf generate

gen-enforcer:
    buf generate --template buf.gen.yaml https://github.com/LayerTwo-Labs/cusf_sidechain_proto.git

build-bdk-cli:
    #!/usr/bin/env bash
    set -euo pipefail
    if [ ! -f "./bdk/bin/bdk-cli" ]; then
        echo "Building bdk-cli..."
        mkdir -p ./bdk/bin
        mkdir -p ./bin
        if ! command -v rustc &> /dev/null; then
            echo "Error: Rust is not installed. Please install Rust and try again."
            exit 1
        fi
        cargo install \
        --git https://github.com/bitcoindevkit/bdk-cli.git \
        --tag v0.27.1 \
        --root ./bdk \
        --no-default-features \
        --features=key-value-db,compiler,electrum
        echo "bdk-cli has been built to ./bdk/bin/bdk-cli"
        cp ./bdk/bin/bdk-cli ./bin/bdk-cli
    else
        echo "bdk-cli already exists, skipping build"
    fi

build-enforcer:
    #!/usr/bin/env bash
    set -euo pipefail

    # Download the correct binary for the current OS
    if [[ "$OSTYPE" == "darwin"* ]]; then
        enforcer_version_postfix="apple-darwin"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        enforcer_version_postfix="unknown-linux-gnu"
    else
        echo "Unsupported operating system: $OSTYPE"
        exit 1
    fi

    binary_name="bip300301_enforcer"
    if ! test -f ./bin/$binary_name; then
        # Setup
        echo "Downloading $binary_name..."
        mkdir -p ./bin
        # Download
        enforcer_zip=bip300301-enforcer-latest-x86_64-$enforcer_version_postfix.zip
        curl --fail -O https://releases.drivechain.info/$enforcer_zip
        # Unpack
        echo unpacking: unzip $enforcer_zip
        unzip $enforcer_zip
        enforcer_binary=$(find . -name "bip300301_enforcer*" -print -quit)
        if [ -z "$enforcer_binary" ]; then
            echo "Error: Could not find the enforcer binary in the extracted files."
            exit 1
        fi
        # Move and make executable
        mv "$enforcer_binary" ./bin/$binary_name
        chmod +x ./bin/$binary_name
        echo "$binary_name has been downloaded to ./bin/$binary_name and made executable"
        # Clean up
        rm $enforcer_zip
    else
        echo "$binary_name already exists in ./bin/$binary_name, skipping download"
    fi
