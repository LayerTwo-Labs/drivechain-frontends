// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: faucet/v1/faucet.proto

package faucetv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/LayerTwo-Labs/sidesail/faucet-backend/gen/faucet/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FaucetServiceName is the fully-qualified name of the FaucetService service.
	FaucetServiceName = "faucet.v1.FaucetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FaucetServiceDispenseCoinsProcedure is the fully-qualified name of the FaucetService's
	// DispenseCoins RPC.
	FaucetServiceDispenseCoinsProcedure = "/faucet.v1.FaucetService/DispenseCoins"
	// FaucetServiceListClaimsProcedure is the fully-qualified name of the FaucetService's ListClaims
	// RPC.
	FaucetServiceListClaimsProcedure = "/faucet.v1.FaucetService/ListClaims"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	faucetServiceServiceDescriptor             = v1.File_faucet_v1_faucet_proto.Services().ByName("FaucetService")
	faucetServiceDispenseCoinsMethodDescriptor = faucetServiceServiceDescriptor.Methods().ByName("DispenseCoins")
	faucetServiceListClaimsMethodDescriptor    = faucetServiceServiceDescriptor.Methods().ByName("ListClaims")
)

// FaucetServiceClient is a client for the faucet.v1.FaucetService service.
type FaucetServiceClient interface {
	DispenseCoins(context.Context, *connect.Request[v1.DispenseCoinsRequest]) (*connect.Response[v1.DispenseCoinsResponse], error)
	ListClaims(context.Context, *connect.Request[v1.ListClaimsRequest]) (*connect.Response[v1.ListClaimsResponse], error)
}

// NewFaucetServiceClient constructs a client for the faucet.v1.FaucetService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFaucetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FaucetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &faucetServiceClient{
		dispenseCoins: connect.NewClient[v1.DispenseCoinsRequest, v1.DispenseCoinsResponse](
			httpClient,
			baseURL+FaucetServiceDispenseCoinsProcedure,
			connect.WithSchema(faucetServiceDispenseCoinsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listClaims: connect.NewClient[v1.ListClaimsRequest, v1.ListClaimsResponse](
			httpClient,
			baseURL+FaucetServiceListClaimsProcedure,
			connect.WithSchema(faucetServiceListClaimsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// faucetServiceClient implements FaucetServiceClient.
type faucetServiceClient struct {
	dispenseCoins *connect.Client[v1.DispenseCoinsRequest, v1.DispenseCoinsResponse]
	listClaims    *connect.Client[v1.ListClaimsRequest, v1.ListClaimsResponse]
}

// DispenseCoins calls faucet.v1.FaucetService.DispenseCoins.
func (c *faucetServiceClient) DispenseCoins(ctx context.Context, req *connect.Request[v1.DispenseCoinsRequest]) (*connect.Response[v1.DispenseCoinsResponse], error) {
	return c.dispenseCoins.CallUnary(ctx, req)
}

// ListClaims calls faucet.v1.FaucetService.ListClaims.
func (c *faucetServiceClient) ListClaims(ctx context.Context, req *connect.Request[v1.ListClaimsRequest]) (*connect.Response[v1.ListClaimsResponse], error) {
	return c.listClaims.CallUnary(ctx, req)
}

// FaucetServiceHandler is an implementation of the faucet.v1.FaucetService service.
type FaucetServiceHandler interface {
	DispenseCoins(context.Context, *connect.Request[v1.DispenseCoinsRequest]) (*connect.Response[v1.DispenseCoinsResponse], error)
	ListClaims(context.Context, *connect.Request[v1.ListClaimsRequest]) (*connect.Response[v1.ListClaimsResponse], error)
}

// NewFaucetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFaucetServiceHandler(svc FaucetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	faucetServiceDispenseCoinsHandler := connect.NewUnaryHandler(
		FaucetServiceDispenseCoinsProcedure,
		svc.DispenseCoins,
		connect.WithSchema(faucetServiceDispenseCoinsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	faucetServiceListClaimsHandler := connect.NewUnaryHandler(
		FaucetServiceListClaimsProcedure,
		svc.ListClaims,
		connect.WithSchema(faucetServiceListClaimsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/faucet.v1.FaucetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FaucetServiceDispenseCoinsProcedure:
			faucetServiceDispenseCoinsHandler.ServeHTTP(w, r)
		case FaucetServiceListClaimsProcedure:
			faucetServiceListClaimsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFaucetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFaucetServiceHandler struct{}

func (UnimplementedFaucetServiceHandler) DispenseCoins(context.Context, *connect.Request[v1.DispenseCoinsRequest]) (*connect.Response[v1.DispenseCoinsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("faucet.v1.FaucetService.DispenseCoins is not implemented"))
}

func (UnimplementedFaucetServiceHandler) ListClaims(context.Context, *connect.Request[v1.ListClaimsRequest]) (*connect.Response[v1.ListClaimsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("faucet.v1.FaucetService.ListClaims is not implemented"))
}
