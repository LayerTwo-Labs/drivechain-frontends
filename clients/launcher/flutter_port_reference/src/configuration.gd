extends Control

# Default Bitcoin configuration template
# In Flutter: Store this as a constant string or in a separate config file
const DEFAULT_CONFIG_BITCOIN : String = '''# Generated by cusf_launcher
rpcuser=user
rpcpassword=password
zmqpubsequence=tcp://localhost:29000
txindex=1
server=1
signet=1
fallbackfee=0.00021
[signet]
addnode=drivechain.live:8383
signetblocktime=60
signetchallenge=00141f61d57873d70d28bd28b3c9f9d6bf818b5a0d6a
'''

# Signal emitted when configuration is complete
# In Flutter: Use a callback or Stream to notify completion
signal configuration_complete

# Get Thunder data directory path based on platform
# In Flutter: Use path_provider package to get appropriate app data directory
func get_thunder_datadir() -> String:
    var user : String = get_username()
    
    match OS.get_name():
        "Linux":
            # ~/.local/share/thunder/
            return str("/home/", user, "/.local/share/thunder/")
        "Windows":
            # %APPDATA%\thunder
            return str("C:\\Users\\", user, "\\AppData\\Roaming\\thunder")
        "macOS":
            # ~/Library/Application Support/thunder/
            return str("/Users/", user, "/Library/Application Support/thunder/")
    
    return ""

# Get Bitcoin data directory path based on platform
# In Flutter: Use path_provider package to get appropriate app data directory
func get_bitcoin_datadir() -> String:
    var user : String = get_username()
    
    match OS.get_name():
        "Linux":
            # ~/.drivechain
            return str("/home/", user, "/.drivechain")
        "Windows":
            # %LOCALAPPDATA%\drivechain
            return str("C:\\Users\\", user, "\\AppData\\Local\\drivechain")
        "macOS":
            # ~/Library/Application Support/drivechain/
            return str("/Users/", user, "/Library/Application Support/drivechain/")
    
    return ""

# Get Enforcer data directory path based on platform
# In Flutter: Use path_provider package to get appropriate app data directory
func get_enforcer_datadir() -> String:
    var user : String = get_username()
    
    match OS.get_name():
        "Linux":
            # ~/.local/share/bip300301_enforcer/
            return str("/home/", user, "/.local/share/bip300301_enforcer/")
        "Windows":
            # %APPDATA%\bip300301_enforcer
            return str("C:\\Users\\", user, "\\AppData\\Roaming\\bip300301_enforcer")
        "macOS":
            # ~/Library/Application Support/bip300301_enforcer/
            return str("/Users/", user, "/Library/Application Support/bip300301_enforcer/")
    
    return ""

# Get BitWindow data directory path based on platform
# In Flutter: Use path_provider package to get appropriate app data directory
func get_bitwindow_datadir() -> String:
    var user : String = get_username()
    
    match OS.get_name():
        "Linux":
            # ~/.local/share/bitwindow/
            return str("/home/", user, "/.local/share/bitwindow/")
        "Windows":
            # %APPDATA%\bitwindow
            return str("C:\\Users\\", user, "\\AppData\\Roaming\\bitwindow")
        "macOS":
            # ~/Library/Application Support/bitwindow/
            return str("/Users/", user, "/Library/Application Support/bitwindow/")
    
    return ""

# Get BitWindow daemon data directory path based on platform
# In Flutter: Use path_provider package to get appropriate app data directory
func get_bitwindowd_datadir() -> String:
    var user : String = get_username()
    
    match OS.get_name():
        "Linux":
            # ~/.local/share/bitwindowd/
            return str("/home/", user, "/.local/share/bitwindowd/")
        "Windows":
            # Note: Path might not be correct, needs verification
            return str("C:\\Users\\", user, "\\AppData\\Roaming\\com.layertwolabs.bitwindow")
        "macOS":
            # ~/Library/Application Support/bitwindowd
            return str("/Users/", user, "/Library/Application Support/bitwindowd")
    
    return ""

# Get current username from environment variables
# In Flutter: Use platform-specific APIs to get user information
func get_username() -> String:
    var user : String = ""
    if OS.has_environment("USERNAME"):
        # Windows uses USERNAME
        user = OS.get_environment("USERNAME")
    elif OS.has_environment("USER"):
        # Unix-like systems use USER
        user = OS.get_environment("USER")
    
    return user

# Check if Bitcoin configuration exists
# In Flutter: Use dart:io File operations
func have_bitcoin_configuration() -> bool:
    if FileAccess.file_exists(str(get_bitcoin_datadir(), "/bitcoin.conf")):
        configuration_complete.emit()
        return true
    
    return false

# Write Bitcoin configuration file
# In Flutter: Use dart:io File operations
func write_bitcoin_configuration() -> void:
    # Create Bitcoin data directory if it doesn't exist
    DirAccess.make_dir_absolute(get_bitcoin_datadir())
    
    # Write default configuration
    var file = FileAccess.open(str(get_bitcoin_datadir(), "/bitcoin.conf"), FileAccess.WRITE_READ)
    file.store_string(DEFAULT_CONFIG_BITCOIN)
    
    configuration_complete.emit()
